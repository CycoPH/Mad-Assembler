mads 2.1.6 build 18 (13 Nov 22)
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
     1 				;================================================================================
     2 				; Pad 1.84   NRV 1995 - 2018
     3 				;================================================================================
     4
     5 				;--------------------------------------------------------------------------------
     6 				; Changelog 1.84:
     7
     8 				; - created pad_title.asm
     9 				; - changed to new RMT file, with intro jingle (is also a song of speed 4!)
    10 				; - played intro jingle at the start of a level (with a "kernel", should sound
    11 				;   perfect in NTSC and PAL)
    12 				; - increased min mouse speed to 2, movement feels better (at least in emulation)
    13 				; - minimum "max mouse step" selectable in the menu is now 2
    14 				; - changed font and map files to add the new "gate open" effect animation
    15 				; - added "electricity" animation effect, when opening the exits of a level
    16 				; - added sound priority system
    17 				; - added new sound for the "extra life" event
    18 				; - added new sound for the "pick bonus" event
    19 				; - added new sound for the "lost life" event
    20 				; - fixed old hidden bug, when destroying an enemy too high in the screen
    21 				; - changed MAX_BALL_HARD_HITS to 50 (was 100), these are the hits needed for the
    22 				;   ball to change trajectory, after too much time without hitting the pad
    23
    24 				;--------------------------------------------------------------------------------
    25 				; Changelog 1.83:
    26
    27 				; - added 2 more angles to the paddle, for a smoother control of the ball direction
    28 				; - fixed multi ball start angles and "anti loop" logic for the new paddle angles
    29 				; - changed default mouse accel to 2 (for a better control speed)
    30 				; - tested double step when using the mouse, but is just better to increase the accel
    31 				; - changed default starting speed of the ball in casual and extra modes (slower)
    32 				; - put enemy code and data behind define blocks (USE_ENEMY_CODE)
    33 				; - added enemy code for logic states, creation, destruction, movement and animation
    34 				; - added different behaviors for the 3 types of enemies (zones of movement, collision
    35 				;   reaction against balls, avoid/follow player, hover time, probabilities)
    36 				; - added new sound for enemy destruction
    37 				; - added rule for the enemies hit when using the "X" powerup (no deflection)
    38 				; - added rule so enemies don't reappear until the ball is in play
    39 				; - fixed some size and color bugs for the enemies (in normal game and in the pause)
    40 				; - fixed bug where a pad hardware collision against a ball destroyed an enemy
    41 				; - added "Fast" powerup, to increase the ball speed (probability taken from "Slow")
    42 				; - added error message when trying NTSC or PAL version in incorrect system
    43 				; - changed max ball hard hits to 100
    44 				; - changed a little the paddle colors
    45 				; - changed some comments and added some new ones
    46
    47 				;--------------------------------------------------------------------------------
    48 				; Changelog 1.82:
    49
    50 				; - added paddle controller angles 25% and 75%
    51 				; - added some colors and changed some things in the tittle screen
    52 				; - integrated RMT code and added "4x" song from Miker
    53 				; - new vcount system to play RMT music with "4x" updates (it plays the song at
    54 				;   the same speed in PAL and NTSC, without the need to drop music steps)
    55 				; - modified input system to work with the new RMT vcount logic in the main loop
    56 				; - added volume decay to the song when starting a game
    57 				; - fixed lives display bug when ending the game with more than 3 balls
    58 				; - better handling of a problem when selecting paddles with a mouse connected
    59 				;   (but still exists in some degree)
    60 				; - added new game mode "extra" (changed option name to "Game mode"), with a
    61 				;   different level sequence (instead of a "tree" is more like Arkanoid 2)
    62 				; - changed balance and difficulty of some levels, removed one level and added a
    63 				;   new one in the "extra" game mode (the first one)
    64 				; - changed some brick colors in some levels
    65 				; - changed some sounds from 15Khz to 64Khz (to be able to add some new ones)
    66
    67 				;--------------------------------------------------------------------------------
    68 				; Changelog 1.81:
    69
    70 				; - first extra ball is at $20000 and then after every $100000
    71 				; - added small ball speed up when starting the "mega ball" powerup
    72 				; - when pressing RESET we do a cold start now
    73 				; - fixed: unable to select "arcade" after changing the difficulty
    74 				; - fixed: giving unwanted score when opening the exits at the end of a level
    75 				; - added paddle controllers from 1 to 4 (select with "C" option)
    76 				; - added "Paddle angle" option: 50% or 100% (use half or the full rotation to move)
    77 				; - modified high score (and level) logic, so when you select easy, casual or
    78 				;   arcade you see the score and level info for that difficulty only
    79 				; - added "highlight" effect for all hard bricks at the start of a level
    80
    81 				;--------------------------------------------------------------------------------
    82 				; To do:
    83
    84 				; - give score for destroying enemies? special actions (like red speedup ball)?
    85
    86 				; - new levels
    87
    88 				; + destroy pad animation and state
    89
    90 				; + sound effects for win, lose
    91 				; + sound effect when passing the high score? show score in game?
    92 				; + small random variation to the frequency of the sound effects?
    93
    94 				; - check "m_usePaddleControllerFlag" to not init the position of the pad?
    95
    96 				; - another input methods: trackball, joystick, keyboard
    97 				; - add speed parameter for the mouse, to slowdown the movement?
    98 				;  (decimal part with 3 or 4 bits?)
    99
   100 				; - use button to really use the exits? (need to touch and press the button
   101 				;  at the same time)
   102 				; - open exits when there is only one brick left? (or the number of lives)
   103 				; - use PM2 for bonus (don't steal the one of the ball), bonus with 2 PM's
   104 				; - new paddle colors for some powerups (mega, capture), color rotation?
   105
   106 				; - vaus type "smooth" (change "disrupt" starting ball angles), add m_ballAngleIndex
   107
   108 				; + check open two sides at the end of the level
   109 				; + check the sound system
   110 				; + check highlight animation system (losing a ball, multiball or fast balls)
   111 				; + check restore brick system
   112
   113 				; - try to fix NTSC / PAL small differences (brick animations?, sfx?)
   114
   115 				; + laser powerup?, curve ball?, confuse? (rotate the background down or up),
   116 				;  dizzy?, zig zag ball? control ball until the first collision,
   117 				;  avoid powerups (like falling rocks), brick powerup (acts like a brick,
   118 				;  descending at first, then blocking the ball and powerup generation
   119 				;  until destroyed), magnetic pad (for bonus)
   120
   121 				; + change BALL_HITS_TO_SPEEDUP usage, different per level? only sides + pad hits?
   122 				; + "m_firstBonusDelayCounter" could be updated also for bricks without a bonus
   123 				; + do the "player" bonus clear the effect of other powerups?
   124
   125 				; ++ new movement, step and collision system, once per frame
   126
   127 				; ++ change balls to use 4 chars instead of the PM's (can use white color)
   128 				; ++ change pads to use some chars instead (and more color and detail)
   129 				; ++ free PM's for the enemies
   130 				; ++ maybe do falling bonus also with chars
   131
   132 				; * counted number of updates per frame (near 44 in NTSC, 64 in PAL)
   133
   134
   135 				;--------------------------------------------------------------------------------
   136 				; Final version?
   137
   138 				; - define screen, colors, use of P/M, 3 enemies, paddle, 3 balls, bricks,
   139 				;	levels, powerup effects (laser shot), use of DLI's, midline changes
   140 				;	(P/M's should be used to add color to the bricks and the paddle; the balls,
   141 				;	the enemies, the laser shot, the powerups can be software sprites)
   142 				;	(should be able to render stage 2, 30 and 31.. also 4 and 7)
   143 				; - new graphics: backgrounds, bricks, enemies, paddles, powerups and effects
   144 				; - complete all levels
   145 				; - new sound effects, better sound engine (add priorities), music
   146 				; - other screens (presentation, game start, game complete, hi score)
   147 				; - complete all powerups
   148 				; - add logic for all enemies (movement, AI, creation, destruction)
   149 				; - boss level, win game logic
   150
   151 				; - scoring and records system
   152 				; White (50) 	Orange (60) 	Cyan (70) 	Green (80) 	Red(90)
   153 				; Blue(100) 	Violet(110) 	Yellow(120)
   154 				; hard silver bricks: 50 x level
   155 				; use break powerup exit: 10000
   156 				; catch powerups: 1000, hit enemies: 100
   157 				; laser shots count as ball hits (also give score and generate new powerups)
   158
   159 				; in my version: 80 per simple brick, 50 per hit to a hard brick,
   160 				;  1000 per powerup, bricks x2 with "reduce" powerup, 10000 using "break" exit,
   161 				;  one extra player after 20000 points, 5000 per completing a level without
   162 				;  losing a ball (all bricks)
   163
   164 				; + from A2: add powerups, moving bricks, new enemies, new levels, bosses
   165
   166 				; * enemies only reflect one of the axis of the ball direction?
   167 				;  no, sometimes they change the angle, without changing the direction
   168 				; * slow powerup override effects of other powerups (like laser)
   169 				; * with 3 balls all of them change speed at the same time
   170 				; * strange things in arkanoid 1: enemies passing through a zone with bricks
   171 				;  connected in "diagonal" (level 2); ball hitting the corner of a brick and
   172 				;  reflecting both directions; bonus at the first brick; two "laser" bonus
   173 				;  one after another
   174
   175
   176 				;--------------------------------------------------------------------------------
   177 				; current hardware usage:
   178
   179 				; Graphics:
   180 				; - mode antic 4, colbk = 0, colpf3 = 14 (used for missiles also)
   181 				; - colpf2 used for plain bricks (changed by dli's)
   182 				; - colpf1 = 8, grey for hard bricks (also changed by dli's)
   183 				; - colpf0 = $x4 (main background color)
   184
   185 				; P/M's:
   186 				; - pad: player3 (colpm3)
   187 				; - one ball: player 0 and player 1 (colpm0 and colpm1)
   188 				; - bonus pill (powerup): player 1 (borrowed from ball) and missile 0 (colpf3)
   189 				; - multi ball: ball 1 - player 0, ball 2 - player 1, ball 3 - player 2
   190 				; - enemy: player 3, missiles 1, 2 and 3 (colpf3)
   191
   192 				; + could use a software sprite for the paddle and the enemies, players 0 and 1 for
   193 				;	one ball, players 0, 1 and 2 for the 3 balls, missile 1 and 2 for the shots,
   194 				;	player 3 and missile 0 for the bonus (missiles 1, 2, 3 can be used for the pad)
   195 				; + maybe is better to reserve 3 players for the enemies, and do the balls and the
   196 				;	paddle as software sprites
   197
   198 				; mouse input:
   199 				; - reads per frame: 24 in NTSC (1440Hz) and 27 in PAL (1350Hz))
   200 				; (NTSC: 20-> 1200,1260,1320,1380,1440,1500,1560 (26))
   201 				; (PAL: 24-> 1200,1250,1300,1350,1400 (28))
   202
   203 				; max movement for a paddle of 8 pixels in a screen with 13 bricks:
   204 				; 104 - 8 = 96, so max movement in a frame should be capped to this value
   205 				; (-96 or +96), so we can have any type of acceleration..
   206 				; if we don't want to check the limit, then assuming 27 reads in a frame,
   207 				; with a max acceleration of 5 pixels per read, the max value = 1x1 + 2x1 +
   208 				; 3x1 + 4x1 + 5x23 = 125 .. good enough
   209
   210 				; sound:
   211 				; - audctl per effect, 2 voices per effect (1 and 3), one effect at a time
   212
   213
   214 				;--------------------------------------------------------------------------------
   215 				; includes:
   216
   217 					icl "base/sys_equates.asm"
Source: D:\!Delphi\mads\examples\games\pad\base\sys_equates.asm
     1 				;================================================================================
     2 				; System equates, Atari XL + mads [NRV 2009]
     3 				;================================================================================
     4
     5 				;----------------------------------------
     6 				; GTIA:
     7 				;----------------------------------------
     8
     9 = D000			M0PF	= $D000  ; read only
    10 = D001			M1PF	= $D001  ; read only
    11 = D002			M2PF	= $D002  ; read only
    12 = D003			M3PF	= $D003  ; read only
    13
    14 = D004			P0PF	= $D004  ; read only
    15 = D005			P1PF	= $D005  ; read only
    16 = D006			P2PF	= $D006  ; read only
    17 = D007			P3PF	= $D007  ; read only
    18
    19 = D008			M0PL	= $D008  ; read only
    20 = D009			M1PL	= $D009  ; read only
    21 = D00A			M2PL	= $D00A  ; read only
    22 = D00B			M3PL	= $D00B  ; read only
    23
    24 = D00C			P0PL	= $D00C  ; read only
    25 = D00D			P1PL	= $D00D  ; read only
    26 = D00E			P2PL	= $D00E  ; read only
    27 = D00F			P3PL	= $D00F  ; read only
    28
    29 = D010			TRIG0	= $D010  ; read only
    30 = D011			TRIG1	= $D011  ; read only
    31 = D012			TRIG2	= $D012  ; read only
    32 = D013			TRIG3	= $D013  ; read only
    33
    34 = D014			PAL		= $D014  ; read only
    35
    36 				; positions for normal screen: 48 left (+160)--> 208 right (or 32-->224 for wide playfield)
    37 				; 32 top (+192)--> 224 bottom (or 16-->112 for double line resolution)
    38 = D000			HPOSP0	= $D000  ; write only
    39 = D001			HPOSP1	= $D001  ; write only
    40 = D002			HPOSP2	= $D002  ; write only
    41 = D003			HPOSP3	= $D003  ; write only
    42
    43 = D004			HPOSM0	= $D004  ; write only
    44 = D005			HPOSM1	= $D005  ; write only
    45 = D006			HPOSM2	= $D006  ; write only
    46 = D007			HPOSM3	= $D007  ; write only
    47
    48 				; 0 (or 2) normal width, 1 double width, 4 quadruple width
    49 = D008			SIZEP0	= $D008  ; write only
    50 = D009			SIZEP1	= $D009  ; write only
    51 = D00A			SIZEP2	= $D00A  ; write only
    52 = D00B			SIZEP3	= $D00B  ; write only
    53
    54 = D00C			SIZEM	= $D00C  ; write only		// the same 2 bits as the players, but in one byte, in this order: m3m2m1m0
    55
    56 = D00D			GRAFP0	= $D00D  ; write only
    57 = D00E			GRAFP1	= $D00E  ; write only
    58 = D00F			GRAFP2	= $D00F  ; write only
    59 = D010			GRAFP3	= $D010  ; write only
    60
    61 = D011			GRAFM	= $D011  ; write only		// 4 missiles in this order: m3m2m1m0
    62
    63 = D012			COLPM0	= $D012  ; write only
    64 = D013			COLPM1	= $D013  ; write only
    65 = D014			COLPM2	= $D014  ; write only
    66 = D015			COLPM3	= $D015  ; write only
    67
    68 = D016			COLPF0	= $D016  ; write only
    69 = D017			COLPF1	= $D017  ; write only
    70 = D018			COLPF2	= $D018  ; write only
    71 = D019			COLPF3	= $D019  ; write only
    72
    73 = D01A			COLBK	= $D01A  ; write only
    74
    75 = D01B			PRIOR	= $D01B  ; write only
    76 = D01C			VDELAY	= $D01C  ; write only
    77 = D01D			GRACTL	= $D01D  ; write only
    78 = D01E			HITCLR	= $D01E  ; write only
    79
    80 = D01F			CONSOL	= $D01F  ; read and write
    81
    82 				;----------------------------------------
    83 				; POKEY:
    84 				;----------------------------------------
    85
    86 = D200			POT0	= $D200  ; read only
    87 = D201			POT1	= $D201  ; read only
    88 = D202			POT2	= $D202  ; read only
    89 = D203			POT3	= $D203  ; read only
    90 = D204			POT4	= $D204  ; read only
    91 = D205			POT5	= $D205  ; read only
    92 = D206			POT6	= $D206  ; read only
    93 = D207			POT7	= $D207  ; read only
    94
    95 = D208			ALLPOT	= $D208  ; read only
    96
    97 = D209			KBCODE	= $D209  ; read only
    98 = D20A			RANDOM	= $D20A  ; read only
    99
   100 = D20D			SERIN	= $D20D  ; read only
   101 = D20E			IRQST	= $D20E  ; read only
   102 = D20F			SKSTAT	= $D20F  ; read only
   103
   104
   105 = D200			AUDF1	= $D200  ; write only
   106 = D201			AUDC1	= $D201  ; write only
   107 = D202			AUDF2	= $D202  ; write only
   108 = D203			AUDC2	= $D203  ; write only
   109 = D204			AUDF3	= $D204  ; write only
   110 = D205			AUDC3	= $D205  ; write only
   111 = D206			AUDF4	= $D206  ; write only
   112 = D207			AUDC4	= $D207  ; write only
   113
   114 = D208			AUDCTL	= $D208  ; write only
   115
   116 = D209			STIMER	= $D209  ; write only
   117 = D20A			SKREST	= $D20A  ; write only
   118 = D20B			POTGO	= $D20B  ; write only
   119
   120 = D20D			SEROUT	= $D20D  ; write only
   121 = D20E			IRQEN	= $D20E  ; write only
   122 = D20F			SKCTL	= $D20F  ; write only
   123
   124 				;----------------------------------------
   125 				; PIA:
   126 				;----------------------------------------
   127
   128 = D300			PORTA	= $D300  ; read and write
   129 = D301			PORTB	= $D301  ; read and write
   130 = D302			PACTL	= $D302  ; read and write
   131 = D303			PBCTL	= $D303  ; read and write
   132
   133 				;----------------------------------------
   134 				; ANTIC:
   135 				;----------------------------------------
   136
   137 = D40B			VCOUNT	= $D40B  ; read only
   138
   139 = D40C			PENH	= $D40C  ; read only
   140 = D40D			PENV	= $D40D  ; read only
   141
   142 = D40F			NMIST	= $D40F  ; read only
   143
   144
   145 = D400			DMACTL	= $D400  ; write only
   146 = D401			CHACTL	= $D401  ; write only
   147 = D402			DLISTL	= $D402  ; write only
   148 = D403			DLISTH	= $D403  ; write only
   149 = D404			HSCROL	= $D404  ; write only
   150 = D405			VSCROL	= $D405  ; write only
   151 = D407			PMBASE	= $D407  ; write only
   152 = D409			CHBASE	= $D409  ; write only
   153 = D40A			WSYNC	= $D40A  ; write only
   154 = D40E			NMIEN	= $D40E  ; write only
   155 = D40F			NMIRES	= $D40F  ; write only
   156
   157 				;----------------------------------------
   158 				; Shadow registers:
   159 				;----------------------------------------
   160
   161 = 022F			SDMCTL	= 559	; shadow of DMACTL
   162 = 026F			GPRIOR	= 623	; shadow of PRIOR
   163
   164 = 02C0			PCOLR0	= 704	; shadow of COLPM0
   165 = 02C4			COLOR0	= 708	; shadow of COLPF0
   166
   167 = 0014			RTCLOCK	= 20
   168 = 004D			ATRACT	= 77
   169
   170 = 02F4			CHBAS	= 756	; shadow of CHBASE
   171 = 02FC			CH		= 764
   172 = 02F3			CHACT	= 755
   173
   174 = 0230			SDLSTL	= 560	; display list address
   175 = 0200			VDSLST	= 512	; DLI address
   176
   177 = 0270			PADDL0	= 624	; 0-228 , shadow of POT0
   178 = 027C			PTRIG0	= 636	; 0 = PRESSED , shadow of PTRG0
   179 = 0278			STICK0	= 632	; 0000 = RLDU , shadow of PORTA
   180 = 0284			STRIG0	= 644	; 0 = PRESSED , shadow of TRIG0
   181
   182 = 0244			COLDST	= 580	; non zero --> do a cold start when pressing the reset key
   183
   184 				;----------------------------------------
   185 				; VBI:
   186 				;----------------------------------------
   187
   188 = E45F			XITVB_I			= 58463
   189 = E462			XITVB_D			= 58466
   190 = 0006			VBI_I			= 6
   191 = 0007			VBI_D			= 7
   192 = C0E2			NORMAL_VBI_I	= 49378
   193 = C28A			NORMAL_VBI_D	= 49802
   194 = E45C			SETVBV			= 58460
   195 = 0222			VVBLKI			= 546
   196 = 0224			VVBLKD			= 548
   197 = E462			XITVB			= XITVB_D
   198
   199 				;----------------------------------------
   200 				; Handler vectors:
   201 				;----------------------------------------
   202
   203 = FFFA			NMIH_VECTOR		= 65530
   204 = FFFC			RESH_VECTOR		= 65532
   205 = FFFE			IRQH_VECTOR		= 65534
   206
   207 				;----------------------------------------
   208 				; I/O:
   209 				;----------------------------------------
   210
   211 = E456			CIOV			= $E456	; (58454)
   212 = E459			SIOV			= $E459	; (58457)
   213
   214 				;----------------------------------------
   215 				; Bit values:
   216 				;----------------------------------------
   217
   218 				; DMA values
   219 = 0020			DV_DMA_ON			= %00100000
   220 = 0010			DV_PM_ONE_LINE		= %00010000
   221 = 0008			DV_PLAYERS_ON		= %00001000
   222 = 0004			DV_MISSILES_ON		= %00000100
   223 = 0003			DV_WIDE_PF			= %00000011
   224 = 0002			DV_NORMAL_PF		= %00000010
   225 = 0001			DV_NARROW_PF		= %00000001
   226
   227 				; Display list values
   228 = 0080			DL_DLI_MASK		= %10000000
   229 = 0040			DL_LMS_MASK		= %01000000
   230 = 0020			DL_VSCROLL_MASK	= %00100000
   231 = 0010			DL_HSCROLL_MASK	= %00010000
   232
   233 = 0001			DL_JMP		= 1
   234 = 0041			DL_JVB		= 65
   235
   236 = 0000			DL_BLANK_1	= 0
   237 = 0010			DL_BLANK_2	= 16
   238 = 0020			DL_BLANK_3	= 32
   239 = 0030			DL_BLANK_4	= 48
   240 = 0040			DL_BLANK_5	= 64
   241 = 0050			DL_BLANK_6	= 80
   242 = 0060			DL_BLANK_7	= 96
   243 = 0070			DL_BLANK_8	= 112
   244
   245 				; Antic graphic modes
   246 = 0002			GM_CHAR_A2	= 2			; 2 colors, 40x24, 960b, 40xline, 8 scanlines
   247 = 0006			GM_CHAR_A6	= 6			; 4 colors, 20x24, 480b, 40xline, 8 scanlines
   248 = 0007			GM_CHAR_A7	= 7			; 4 colors, 20x12, 240b, 20xline, 16 scanlines
   249 = 0004			GM_CHAR_A4	= 4			; 5 colors, 40x24, 960b, 40xline, 8 scanlines
   250 = 0005			GM_CHAR_A5	= 5			; 5 colors, 40x12, 480b, 40xline, 16 scanlines
   251 = 0003			GM_CHAR_A3	= 3			; 2 colors, 40x24, 760b, 40xline, 10 scanlines
   252
   253 				; Basic graphic modes
   254 = 0002			GM_CHAR_G0	= 2			; 2 colors, 40x24, 960b, 40xline, 8 scanlines
   255 = 0006			GM_CHAR_G1	= 6			; 4 colors, 20x24, 480b, 40xline, 8 scanlines
   256 = 0007			GM_CHAR_G2	= 7			; 4 colors, 20x12, 240b, 20xline, 16 scanlines
   257 = 0004			GM_CHAR_G12	= 4			; 5 colors, 40x24, 960b, 40xline, 8 scanlines
   258 = 0005			GM_CHAR_G13	= 5			; 5 colors, 40x12, 480b, 40xline, 16 scanlines
   259
   260 = 0008			GM_PIXEL_G3	= 8			; 4 colors, 40x24, 240b, 10xline, 8 scanline
   261 = 0009			GM_PIXEL_G4	= 9			; 2 colors, 80x48, 480b, 10xline, 4 scanline
   262 = 000A			GM_PIXEL_G5	= 10		; 4 colors, 80x48, 960b, 20xline, 4 scanline
   263 = 000B			GM_PIXEL_G6	= 11		; 2 colors, 160x96, 1920b, 20xline, 2 scanline
   264 = 000D			GM_PIXEL_G7	= 13		; 4 colors, 160x96, 3840b, 40xline, 2 scanline
   265 = 000F			GM_PIXEL_G8	= 15		; 2 colors, 320x192, 7680b, 40xline, 1 scanline
   266 = 000C			GM_PIXEL_G14	= 12	; 2 colors, 160x192, 3840b, 20xline, 1 scanline
   267 = 000E			GM_PIXEL_G15	= 14	; 4 colors, 160x192, 7680b, 40xline, 1 scanline
   268
   269 = 000F			GM_PIXEL_G9	= 15		; 1 color, 80x192, 7680b, 40xline, 1 scanline
   270 = 000F			GM_PIXEL_G10	= 15	; 9 colors, 80x192, 7680b, 40xline, 1 scanline
   271 = 000F			GM_PIXEL_G11	= 15	; 16 colors, 80x192, 7680b, 40xline, 1 scanline
   272
   273 				; Prior values
   274 = 0001			PRV_PM_PRIORITY_1	= %00000001		; p0 p1 p2 p3 / pf0 pf1 pf2 pf3 (p5) / bk
   275 = 0002			PRV_PM_PRIORITY_2	= %00000010		; p0 p1 / pf0 pf1 pf2 pf3 (p5) / p2 p3 / bk
   276 = 0004			PRV_PM_PRIORITY_3	= %00000100		; pf0 pf1 pf2 pf3 (p5) /  p0 p1 p2 p3 / bk
   277 = 0008			PRV_PM_PRIORITY_4	= %00001000		; pf1 pf2 /  p0 p1 p2 p3 / pf0 pf3 (p5) / bk
   278 = 0010			PRV_FIFTH_PLAYER	= %00010000
   279 = 0020			PRV_PM_OVERLAP		= %00100000
   280 = 0040			PRV_GTIA_9			= %01000000
   281 = 0080			PRV_GTIA_10			= %10000000
   282 = 00C0			PRV_GTIA_11			= %11000000
   283
   284 				; Gractl values
   285 = 0001			GCTL_MISSILES		= %001
   286 = 0002			GCTL_PLAYERS		= %010
   287 = 0004			GCTL_LATCH_TRIGGERS	= %100
   288
   289 				; Consol values:
   290 = 0001			CNV_START_MASK		= %001
   291 = 0002			CNV_OPTION_MASK		= %010
   292 = 0004			CNV_SELECT_MASK		= %100
   293
   294 				; Stick values:
   295 = 0008			STV_RIGHT_MASK		= %1000
   296 = 0004			STV_LEFT_MASK		= %0100
   297 = 0002			STV_DOWN_MASK		= %0010
   298 = 0001			STV_UP_MASK			= %0001
   299
   300 = 0008			STICK_MASK_RIGHT	= %1000
   301 = 0004			STICK_MASK_LEFT		= %0100
   302 = 0002			STICK_MASK_DOWN		= %0010
   303 = 0001			STICK_MASK_UP		= %0001
   304
   305 = 0007			STICK_VALUE_RIGHT	= %0111
   306 = 000B			STICK_VALUE_LEFT	= %1011
   307 = 000D			STICK_VALUE_DOWN	= %1101
   308 = 000E			STICK_VALUE_UP		= %1110
   309
   218
   219 					icl "base/sys_macros.asm"
Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm
     1 				;================================================================================
     2 				; System macros, Atari XL + mads [NRV 2009]
     3 				;================================================================================
     4
     5 				;--------------------------------------------------------------------------------
     6 				; SetVector [address] [word]
     7 				;--------------------------------------------------------------------------------
     8
     9 					.macro SetVector
    10 					   .if :0 <> 2
    11 					      .error "SetVector error"
    12 				
    13 					   .else
    14 					      lda #<:2
    15 					      sta :1
    16 					      lda #>:2
    17 					      sta :1+1
    18 					   .endif
    19 				
    20 					.endm
    21
    22
    23 				;--------------------------------------------------------------------------------
    24 				; SetColor [0..4] [0..255]
    25 				; SetColor [0..4] [0..15] [0..15]
    26 				;--------------------------------------------------------------------------------
    27
    28 					.macro SetColor
    29 					   .if :0 < 2 .or :0 > 3
    30 					      .error "SetColor error"
    31 				
    32 					   .else
    33 					      .if :0 = 2
    34 					          lda #:2
    35 					          sta COLPF0+:1
    36 					      .else
    37 					          lda #[:2 * 16 + :3]
    38 					          sta COLPF0+:1
    39 					      .endif
    40 					   .endif
    41 				
    42 					.endm
    43
    44
    45 				;--------------------------------------------------------------------------------
    46 				; SetPMColor [0..3] [0..255]
    47 				; SetPMColor [0..3] [0..15] [0..15]
    48 				;--------------------------------------------------------------------------------
    49
    50 					.macro SetPMColor
    51 					   .if :0 < 2 .or :0 > 3
    52 					      .error "SetPMColor error"
    53 				
    54 					   .else
    55 					      .if :0 = 2
    56 					          lda #:2
    57 					          sta COLPM0+:1
    58 					      .else
    59 					          lda #[:2 * 16 + :3]
    60 					          sta COLPM0+:1
    61 					      .endif
    62 					   .endif
    63 				
    64 					.endm
    65
    66
    67 				;--------------------------------------------------------------------------------
    68 				; VcountSync [0..130]
    69 				; (maximum limit is different on PAL: 155)
    70 				; (could wait forever if there are interrupts activated!)
    71 				; (or if some other "thread" uses "wsync")
    72 				;--------------------------------------------------------------------------------
    73
    74 					.macro VcountSync
    75 					   .if :0 <> 1
    76 					      .error "VcountSync error"
    77 				
    78 					   .else
    79 					      sta WSYNC
    80 				
    81 					      lda #:1
    82 				VSync1	 cmp VCOUNT
    83 					      bne VSync1
    84 				
    85 					      lda #:1+1
    86 				VSync2	 cmp VCOUNT
    87 					      bne VSync2
    88 				
    89 					      sta WSYNC
    90 					   .endif
    91 				
    92 					.endm
    93
    94
    95 				;--------------------------------------------------------------------------------
    96 				; VcountWait [0..130]
    97 				; (maximum limit is different on PAL: 155)
    98 				;--------------------------------------------------------------------------------
    99
   100 					.macro VcountWait
   101 					   .if :0 <> 1
   102 					      .error "VcountWait error"
   103 				
   104 					   .else
   105 					      lda #:1
   106 				VWait1	 cmp VCOUNT
   107 					      bne VWait1
   108 					   .endif
   109 				
   110 					.endm
   111
   112
   113 				;--------------------------------------------------------------------------------
   114 				; VcountWaitUntilEnter [0..129] [(p1+1)..130]
   115 				; (maximum limit is different on PAL: 155)
   116 				;--------------------------------------------------------------------------------
   117
   118 					.macro VcountWaitUntilEnter
   119 					   .if :0 <> 2 .or :1 >= :2
   120 					      .error "VcountWaitUntilEnter error"
   121 				
   122 					   .else
   123 				VWait1     lda VCOUNT
   124 						 cmp #:1
   125 						 beq VExit
   126 					      bcc VWait1	; VCOUNT < :1
   127 						 cmp #:2
   128 						 beq VExit
   129 					      bcs VWait1	; VCOUNT >= :2
   130 				VExit
   131 					   .endif
   132 				
   133 					.endm
   134
   135
   136 				;--------------------------------------------------------------------------------
   137 				; VcountWaitUntilExit [0..129] [(p1+1)..130]
   138 				; (maximum limit is different on PAL: 155)
   139 				;--------------------------------------------------------------------------------
   140
   141 					.macro VcountWaitUntilExit
   142 					   .if :0 <> 2 .or :1 >= :2
   143 					      .error "VcountWaitUntilExit error"
   144 				
   145 					   .else
   146 				VWait1     lda VCOUNT
   147 						 cmp #:1
   148 						 beq VWait1
   149 					      bcc VExit	; VCOUNT < :1
   150 						 cmp #:2
   151 					      bcc VWait1	; VCOUNT < :2
   152 						 beq VWait1
   153 				VExit
   154 					   .endif
   155 				
   156 					.endm
   157
   158
   159 				;--------------------------------------------------------------------------------
   160 				; MarkScanLine [0..255] [0..255]
   161 				; (mark the current scan line with a color)
   162 				;--------------------------------------------------------------------------------
   163
   164 					.macro MarkScanLine
   165 					   .if :0 <> 0 .and :0 <> 2
   166 					      .error "MarkScanLine error"
   167 				
   168 					   .else
   169 					  	   .if :0 = 0
   170 				  		      sta WSYNC
   171 				  	     	 lda #255		; mark color
   172 					  	      sta COLBK
   173 				
   174 				  		      sta WSYNC
   175 				  	     	 lda #0		; restore color
   176 					  	      sta COLBK
   177 				
   178 				  		   .else
   179 					     	 sta WSYNC
   180 						      lda #:1		; mark color
   181 						      sta COLBK
   182 				
   183 						      sta WSYNC
   184 						      lda #:2		; restore color
   185 					     	 sta COLBK
   186 						   .endif
   187 					   .endif
   188 				
   189 					.endm
   190
   191
   192 				;--------------------------------------------------------------------------------
   193 				; MarkScanLineIfConsol [0..255] [0..255]
   194 				; (mark the current scan line with a color, if a consol key is pressed)
   195 				;--------------------------------------------------------------------------------
   196
   197 					.macro MarkScanLineIfConsol
   198 					   .if :0 <> 0 .and :0 <> 2
   199 					      .error "MarkScanLineIfConsol error"
   200 				
   201 					   .else
   202 						 .if :0 = 0
   203 						      lda CONSOL
   204 						      and #%111
   205 					     	 cmp #%111
   206 						      beq ExitMarkScanLineIfConsol
   207 				
   208 						      sta WSYNC
   209 						      lda #255		; mark color
   210 						      sta COLBK
   211 				
   212 						      sta WSYNC
   213 						      lda #0		; restore color
   214 					     	 sta COLBK
   215 				
   216 					   	 .else
   217 						      lda CONSOL
   218 						      and #%111
   219 					     	 cmp #%111
   220 						      beq ExitMarkScanLineIfConsol
   221 				
   222 						      sta WSYNC
   223 					     	 lda #:1		; mark color
   224 						      sta COLBK
   225 				
   226 						      sta WSYNC
   227 					     	 lda #:2		; restore color
   228 						      sta COLBK
   229 				
   230 					   	 .endif
   231 					   .endif
   232 				
   233 				ExitMarkScanLineIfConsol
   234 				
   235 					.endm
   236
   237
   238 				;--------------------------------------------------------------------------------
   239 				; MarkCyclesIfConsol [0..255] [0..255]
   240 				; (mark the current scan position with a color, for some cycles)
   241 				;--------------------------------------------------------------------------------
   242
   243 					.macro MarkCyclesIfConsol
   244 					   .if :0 = 0
   245 					      lda CONSOL
   246 					      and #%111
   247 					      cmp #%111
   248 					      beq ExitMarkCyclesIfConsol
   249 				
   250 					      lda #255		; mark color
   251 					      sta COLBK
   252 				
   253 					      lda ($00),y	; dummy 5 cycles
   254 					      lda ($00),y	; dummy 5 cycles
   255 					      lda ($00),y	; dummy 5 cycles
   256 					      lda ($00),y	; dummy 5 cycles
   257 					      lda ($00),y	; dummy 5 cycles
   258 					      lda ($00),y	; dummy 5 cycles
   259 				
   260 					      lda #0		; restore color
   261 					      sta COLBK
   262 				
   263 					   .elseif :0 = 2
   264 					      lda CONSOL
   265 					      and #%111
   266 					      cmp #%111
   267 					      beq ExitMarkCyclesIfConsol
   268 				
   269 					      lda #:1		; mark color
   270 					      sta COLBK
   271 				
   272 					      lda ($00),y	; dummy 5 cycles
   273 					      lda ($00),y	; dummy 5 cycles
   274 					      lda ($00),y	; dummy 5 cycles
   275 					      lda ($00),y	; dummy 5 cycles
   276 					      lda ($00),y	; dummy 5 cycles
   277 					      lda ($00),y	; dummy 5 cycles
   278 				
   279 					      lda #:2		; restore color
   280 					      sta COLBK
   281 				
   282 					   .else
   283 					      .error "MarkCyclesIfConsol error"
   284 				
   285 					   .endif
   286 				
   287 				ExitMarkCyclesIfConsol
   288 				
   289 					.endm
   290
   291
   292 				;--------------------------------------------------------------------------------
   293 				; SetBasic [0,1]
   294 				;--------------------------------------------------------------------------------
   295
   296 					.macro SetBasic
   297 					   .if :0 <> 1
   298 					      .error "SetBasic error"
   299 				
   300 					   .else
   301 					      .if :1 = 0
   302 					         lda PORTB	; deactivate Basic
   303 					         ora #%00000010
   304 					         sta PORTB
   305 					      .else
   306 					         lda PORTB	; activate Basic
   307 					         and #%11111101
   308 					         sta PORTB
   309 					      .endif
   310 					   .endif
   311 				
   312 					.endm
   313
   314
   315 				;--------------------------------------------------------------------------------
   316 				; SetOperativeSystem [0,1]
   317 				;--------------------------------------------------------------------------------
   318
   319 					.macro SetOperativeSystem
   320 					   .if :0 <> 1
   321 					      .error "SetOperativeSystem error"
   322 				
   323 					   .else
   324 					      .if :1 = 0
   325 					         lda PORTB	; deactivate Operative System
   326 					         and #%11111110
   327 					         sta PORTB
   328 					      .else
   329 					         lda PORTB	; activate Operative System
   330 					         ora #%00000001
   331 					         sta PORTB
   332 					      .endif
   333 					   .endif
   334 				
   335 					.endm
   336
   337
   338 				;--------------------------------------------------------------------------------
   339 				; EnableBasic
   340 				;--------------------------------------------------------------------------------
   341
   342 					.macro EnableBasic
   343 					   .if :0 <> 0
   344 					      .error "EnableBasic error"
   345 				
   346 					   .else
   347 					      SetBasic 1
   348 					   .endif
   349 				
   350 					.endm
   351
   352
   353 				;--------------------------------------------------------------------------------
   354 				; DisableBasic
   355 				;--------------------------------------------------------------------------------
   356
   357 					.macro DisableBasic
   358 					   .if :0 <> 0
   359 					      .error "DisableBasic error"
   360 				
   361 					   .else
   362 					      SetBasic 0
   363 					   .endif
   364 				
   365 					.endm
   366
   367
   368 				;--------------------------------------------------------------------------------
   369 				; EnableOperativeSystem
   370 				;--------------------------------------------------------------------------------
   371
   372 					.macro EnableOperativeSystem
   373 					   .if :0 <> 0
   374 					      .error "EnableOperativeSystem error"
   375 				
   376 					   .else
   377 					      SetOperativeSystem 1
   378 					   .endif
   379 				
   380 					.endm
   381
   382
   383 				;--------------------------------------------------------------------------------
   384 				; DisableOperativeSystem
   385 				;--------------------------------------------------------------------------------
   386
   387 					.macro DisableOperativeSystem
   388 					   .if :0 <> 0
   389 					      .error "DisableOperativeSystem error"
   390 				
   391 					   .else
   392 					      SetOperativeSystem 0
   393 					   .endif
   394 				
   395 					.endm
   396
   397
   398 				;--------------------------------------------------------------------------------
   399 				; EnableNormalInterrupts
   400 				;--------------------------------------------------------------------------------
   401
   402 					.macro EnableNormalInterrupts
   403 					   .if :0 <> 0
   404 					      .error "EnableNormalInterrupts error"
   405 				
   406 					   .else
   407 					      cli
   408 				;	      lda #[8+16+32]	; serial I/O interrupts
   409 				;	      lda #[64+128]		; keyboard and break interrupts (only ones enabled on powerup)
   410 				;	      sta IRQEN
   411 					      lda #64			; VBI interrupt
   412 					      sta NMIEN
   413 					   .endif
   414 				
   415 					.endm
   416
   417
   418 				;--------------------------------------------------------------------------------
   419 				; DisableNormalInterrupts
   420 				;--------------------------------------------------------------------------------
   421
   422 					.macro DisableNormalInterrupts
   423 					   .if :0 <> 0
   424 					      .error "DisableNormalInterrupts error"
   425 				
   426 					   .else
   427 					      sei
   428 					      lda #0
   429 					      sta IRQEN
   430 					      sta NMIEN
   431 					   .endif
   432 				
   433 					.endm
   434
   435
   436 				;--------------------------------------------------------------------------------
   437 				; ClearSystem
   438 				;--------------------------------------------------------------------------------
   439
   440 					.macro ClearSystem
   441 					   .if :0 <> 0
   442 					      .error "ClearSystem error"
   443 				
   444 					   .else
   445 					      clc
   446 					      cld
   447 				
   448 					      sei
   449 				
   450 					      lda #0
   451 					      sta IRQEN	; clear interrupts and screen
   452 					      sta NMIEN
   453 				
   454 					      sta DMACTL
   455 					      sta COLBK
   456 				
   457 					      sta GRACTL	; clear P/M
   458 					      sta GRAFP0
   459 					      sta GRAFP1
   460 					      sta GRAFP2
   461 					      sta GRAFP3
   462 					      sta GRAFM
   463 				
   464 					      sta HPOSP0
   465 					      sta HPOSP1
   466 					      sta HPOSP2
   467 					      sta HPOSP3
   468 					      sta HPOSM0
   469 					      sta HPOSM1
   470 					      sta HPOSM2
   471 					      sta HPOSM3
   472 				
   473 					      sta PRIOR	; clear GTIA also
   474 				
   475 					      sta AUDCTL	; clear sound
   476 					      sta AUDC1
   477 					      sta AUDC2
   478 					      sta AUDC3
   479 					      sta AUDC4
   480 				
   481 					      lda #3
   482 					      sta SKCTL
   483 					   .endif
   484 				
   485 					.endm
   486
   487
   488 				;--------------------------------------------------------------------------------
   489 				; SetDisplayListAddress [word]
   490 				; (use when the screen is not being displayed!)
   491 				; (remember to not cross the 1K limit..)
   492 				;--------------------------------------------------------------------------------
   493
   494 					.macro SetDisplayListAddress
   495 					   .if :0 <> 1
   496 					      .error "SetDisplayListAddress error"
   497 				
   498 					   .else
   499 					      SetVector DLISTL, :1
   500 				
   501 				;	      lda #<:1
   502 				;	      sta DLISTL
   503 				;	      lda #>:1
   504 				;	      sta DLISTH
   505 					   .endif
   506 				
   507 					.endm
   508
   509
   510 				;--------------------------------------------------------------------------------
   511 				; SetFontAddress [word]
   512 				; (remember that this transform to a page a number)
   513 				;--------------------------------------------------------------------------------
   514
   515 					.macro SetFontAddress
   516 					   .if :0 <> 1
   517 					      .error "SetFontAddress error"
   518 				
   519 					   .else
   520 					      lda #>:1
   521 					      sta CHBASE
   522 					   .endif
   523 				
   524 					.endm
   525
   526
   527 				;--------------------------------------------------------------------------------
   528 				; SetPMBaseAddress [word]
   529 				; (remember that this transform to a page a number)
   530 				;--------------------------------------------------------------------------------
   531
   532 					.macro SetPMBaseAddress
   533 					   .if :0 <> 1
   534 					      .error "SetPMBaseAddress error"
   535 				
   536 					   .else
   537 					      lda #>:1
   538 					      sta PMBASE
   539 					   .endif
   540 				
   541 					.endm
   542
   543
   544 				;--------------------------------------------------------------------------------
   545 				; SetMemory [address] [bytes] [value]
   546 				;--------------------------------------------------------------------------------
   547
   548 				; warning, using some page zero memory
   549
   550 					.macro SetMemory
   551 				
   552 				setMemPtr	= 254
   553 				setMemCounter	= 252
   554 				
   555 					   .if :0 <> 3
   556 					      .error "SetMemory error"
   557 				
   558 					   .else
   559 					      ldy #0
   560 				
   561 					      lda #<:1
   562 					      sta setMemPtr
   563 					      lda #>:1
   564 					      sta setMemPtr+1
   565 				
   566 					      .if :2 < 256
   567 					         lda #:3
   568 				setMemLoop1
   569 					         sta (setMemPtr),y
   570 					         iny
   571 					         cpy #:2
   572 					         bne setMemLoop1
   573 				
   574 					      .else
   575 					         lda #<:2
   576 					         sta setMemCounter
   577 					         lda #>:2
   578 					         sta setMemCounter+1
   579 				
   580 				setMemLoop2
   581 					         lda #:3
   582 					         sta (setMemPtr),y
   583 					         iny
   584 					         bne setMemB1
   585 					         inc setMemPtr+1
   586 				setMemB1
   587 					         lda setMemCounter
   588 					         bne setMemB2
   589 					         dec setMemCounter+1
   590 				setMemB2
   591 					         dec setMemCounter
   592 				
   593 					         lda setMemCounter
   594 					         ora setMemCounter+1
   595 					         bne setMemLoop2
   596 					      .endif
   597 					   .endif
   598 				
   599 					.endm
   600
   601
   602 				;--------------------------------------------------------------------------------
   603 				; SetMemoryRandom [address] [bytes]
   604 				;--------------------------------------------------------------------------------
   605
   606 				; warning, using some page zero memory
   607
   608 					.macro SetMemoryRandom
   609 				
   610 				setMemRPtr	= 254
   611 				setMemRCounter	= 252
   612 				
   613 					   .if :0 <> 2
   614 					      .error "SetMemoryRandom error"
   615 				
   616 					   .else
   617 					      ldy #0
   618 				
   619 					      lda #<:1
   620 					      sta setMemRPtr
   621 					      lda #>:1
   622 					      sta setMemRPtr+1
   623 				
   624 					      .if :2 < 256
   625 				setMemRLoop1
   626 					         lda RANDOM
   627 					         sta (setMemRPtr),y
   628 					         iny
   629 					         cpy #:2
   630 					         bne setMemRLoop1
   631 				
   632 					      .else
   633 					         lda #<:2
   634 					         sta setMemRCounter
   635 					         lda #>:2
   636 					         sta setMemRCounter+1
   637 				
   638 				setMemRLoop2
   639 					         lda RANDOM
   640 					         sta (setMemRPtr),y
   641 					         iny
   642 					         bne setMemRB1
   643 					         inc setMemRPtr+1
   644 				setMemRB1
   645 					         lda setMemRCounter
   646 					         bne setMemRB2
   647 					         dec setMemRCounter+1
   648 				setMemRB2
   649 					         dec setMemRCounter
   650 				
   651 					         lda setMemRCounter
   652 					         ora setMemRCounter+1
   653 					         bne setMemRLoop2
   654 					      .endif
   655 					   .endif
   656 				
   657 					.endm
   658
   659
   660 				;--------------------------------------------------------------------------------
   661 				; ClampMemory [address] [bytes] [min value] [max value]
   662 				;--------------------------------------------------------------------------------
   663
   664 				; warning, using some page zero memory
   665
   666 					.macro ClampMemory
   667 				
   668 				clampMemPtr	= 254
   669 				clampMemCounter	= 252
   670 				
   671 					   .if :0 <> 4
   672 					      .error "ClampMemory error"
   673 				
   674 					   .else
   675 					      ldy #0
   676 				
   677 					      lda #<:1
   678 					      sta clampMemPtr
   679 					      lda #>:1
   680 					      sta clampMemPtr+1
   681 				
   682 					      .if :2 < 256
   683 				clampMemLoop1
   684 					         lda (clampMemPtr),y
   685 					         cmp #:3
   686 					         bcs clampMemB3		; if >= min then continue
   687 					         lda #:3
   688 					         jmp clampMemB4
   689 				clampMemB3
   690 					         cmp #:4
   691 					         bcc clampMemB4		; if < max then continue
   692 				;	         beq clampMemB4		; if = max then continue
   693 					         lda #:4
   694 				clampMemB4
   695 					         sta (clampMemPtr),y
   696 				
   697 					         iny
   698 					         cpy #:2
   699 					         bne clampMemLoop1
   700 				
   701 					      .else
   702 					         lda #<:2
   703 					         sta clampMemCounter
   704 					         lda #>:2
   705 					         sta clampMemCounter+1
   706 				
   707 				clampMemLoop2
   708 					         lda (clampMemPtr),y
   709 					         cmp #:3
   710 					         bcs clampMemB5		; if >= min then continue
   711 					         lda #:3
   712 					         jmp clampMemB6
   713 				clampMemB5
   714 					         cmp #:4
   715 					         bcc clampMemB6		; if < max then continue
   716 				;	         beq clampMemB6		; if = max then continue
   717 					         lda #:4
   718 				clampMemB6
   719 					         sta (clampMemPtr),y
   720 				
   721 					         iny
   722 					         bne clampMemB1
   723 					         inc clampMemPtr+1
   724 				clampMemB1
   725 					         lda clampMemCounter
   726 					         bne clampMemB2
   727 					         dec clampMemCounter+1
   728 				clampMemB2
   729 					         dec clampMemCounter
   730 				
   731 					         lda clampMemCounter
   732 					         ora clampMemCounter+1
   733 					         bne clampMemLoop2
   734 					      .endif
   735 					   .endif
   736 				
   737 					.endm
   738
   739
   740 				;--------------------------------------------------------------------------------
   741 				; AndMemory [address] [bytes] [value]
   742 				;--------------------------------------------------------------------------------
   743
   744 				; warning, using some page zero memory
   745
   746 					.macro AndMemory
   747 				
   748 				andMemPtr	= 254
   749 				andMemCounter	= 252
   750 				
   751 					   .if :0 <> 3
   752 					      .error "AndMemory error"
   753 				
   754 					   .else
   755 					      ldy #0
   756 				
   757 					      lda #<:1
   758 					      sta andMemPtr
   759 					      lda #>:1
   760 					      sta andMemPtr+1
   761 				
   762 					      .if :2 < 256
   763 				andMemLoop1
   764 					         lda (andMemPtr),y
   765 					         and #:3
   766 					         sta (andMemPtr),y
   767 					         iny
   768 					         cpy #:2
   769 					         bne andMemLoop1
   770 				
   771 					      .else
   772 					         lda #<:2
   773 					         sta andMemCounter
   774 					         lda #>:2
   775 					         sta andMemCounter+1
   776 				
   777 				andMemLoop2
   778 					         lda (andMemPtr),y
   779 					         and #:3
   780 					         sta (andMemPtr),y
   781 					         iny
   782 					         bne andMemB1
   783 					         inc andMemPtr+1
   784 				andMemB1
   785 					         lda andMemCounter
   786 					         bne andMemB2
   787 					         dec andMemCounter+1
   788 				andMemB2
   789 					         dec andMemCounter
   790 				
   791 					         lda andMemCounter
   792 					         ora andMemCounter+1
   793 					         bne andMemLoop2
   794 					      .endif
   795 					   .endif
   796 				
   797 					.endm
   798
   799
   800 				;--------------------------------------------------------------------------------
   801 				; CopyMemory [source address] [dest address] [bytes]
   802 				;--------------------------------------------------------------------------------
   803
   804 				; warning, using some page zero memory
   805
   806 					.macro CopyMemory
   807 				
   808 				copyMemPtr1	= 254
   809 				copyMemPtr2	= 252
   810 				copyMemCounter	= 250
   811 				
   812 					   .if :0 <> 3
   813 					      .error "CopyMemory error"
   814 				
   815 					   .else
   816 					      ldy #0
   817 				
   818 					      lda #<:1
   819 					      sta copyMemPtr1
   820 					      lda #>:1
   821 					      sta copyMemPtr1+1
   822 				
   823 					      lda #<:2
   824 					      sta copyMemPtr2
   825 					      lda #>:2
   826 					      sta copyMemPtr2+1
   827 				
   828 					      .if :3 < 256
   829 				copyMemLoop1
   830 					         lda (copyMemPtr1),y
   831 					         sta (copyMemPtr2),y
   832 					         iny
   833 					         cpy #:3
   834 					         bne copyMemLoop1
   835 				
   836 					      .else
   837 					         lda #<:3
   838 					         sta copyMemCounter
   839 					         lda #>:3
   840 					         sta copyMemCounter+1
   841 				
   842 				copyMemLoop2
   843 					         lda (copyMemPtr1),y
   844 					         sta (copyMemPtr2),y
   845 					         iny
   846 					         bne copyMemB1
   847 					         inc copyMemPtr1+1
   848 					         inc copyMemPtr2+1
   849 				copyMemB1
   850 					         lda copyMemCounter
   851 					         bne copyMemB2
   852 					         dec copyMemCounter+1
   853 				copyMemB2
   854 					         dec copyMemCounter
   855 				
   856 					         lda copyMemCounter
   857 					         ora copyMemCounter+1
   858 					         bne copyMemLoop2
   859 					      .endif
   860 					   .endif
   861 				
   862 					.endm
   863
   864
   865 				;--------------------------------------------------------------------------------
   866 				; CreateDisplayList [DL address] [DL mode] [memory address]
   867 				; (remember to not cross the 1K limit.. and the 4K limit)
   868 				;--------------------------------------------------------------------------------
   869
   870 				; 	.macro CreateDisplayList
   871 				; 	   .if :0 <> 3
   872 				; 	      .error "CreateDisplayList error"
   873 				; 
   874 				; 	   .else
   875 				; 
   876 				; 	   .endif
   877 				; 
   878 				; 	.endm
   879
   880
   881 				;--------------------------------------------------------------------------------
   882 				;
   883 				;--------------------------------------------------------------------------------
   884
   885
   886
   220
   221
   222 				;--------------------------------------------------------------------------------
   223 				; constants:
   224
   225 				;SHOW_TIMING_AREAS = 1
   226 = 0001			PAL_VERSION = 1
   227 				;SKIP_LEVEL_HACK = 1
   228 = 0001			USE_ENEMY_CODE = 1
   229
   230 				; this is the area covered by the level background, where the ball can move
   231 = 0068			GAME_AREA_SIZEX = 104
   232 = 00D0			GAME_AREA_SIZEY = 208
   233
   234 = 0020			BYTES_LINE = 32
   235
   236 = 0003			LEFT_BRICK_OFFSET = 3
   237 = 000D			NUM_BRICKS_X = 13
   238 = 0012			NUM_BRICKS_Y = 18
   239
   240 = 0012			BOTTOM_BRICK_NUM = NUM_BRICKS_Y
   241
   242 = 0008			BRICK_SIZEX = 8
   243 = 0008			BRICK_SIZEY = 8
   244 = 0010			PAD_SIZEX = 16
   245 = 0006			PAD_SIZEY = 6
   246 = 0003			BALL_SIZEX = 3
   247 = 0006			BALL_SIZEY = 6
   248
   249 = 0008			PAD_SMALL_SIZEX = 8
   250 = 0018			PAD_LARGE_SIZEX = 24
   251
   252 = 0005			STARTING_BALL_SPEED = 5
   253 = 0002			MIN_BALL_SPEED = 2
   254 = 0006			TOP_BORDER_BALL_SPEED = 6
   255 = 0007			MAX_BALL_SPEED = 7
   256 = 0001			BALL_HITS_SPEEDUP_STEP = 1
   257 = 0001			SLOW_BONUS_SLOWDOWN_STEP = 1
   258 = 0001			FAST_BONUS_SPEEDUP_STEP = 1
   259
   260 				;BALL_HITS_TO_SPEEDUP = 128
   261 = 0028			BALL_SPEEDUP_HALF_SECONDS = 40
   262
   263 = 0032			MAX_BALL_HARD_HITS = 50
   264
   265 = 0004			BALL_START_ANGLE_INDEX = 4
   266
   267 = 0000			MIN_PAD_POSX = 0
   268 = 0058			MAX_PAD_POSX = GAME_AREA_SIZEX-PAD_SIZEX
   269
   270 = 0060			MAX_PAD_SMALL_POSX = GAME_AREA_SIZEX-PAD_SMALL_SIZEX
   271 = 0050			MAX_PAD_LARGE_POSX = GAME_AREA_SIZEX-PAD_LARGE_SIZEX
   272
   273 = 00C8			PAD_POSY1 = 200
   274 = 00CE			PAD_POSY2 = PAD_POSY1+PAD_SIZEY
   275 = 001B			PAD_BRICK_LINE = 2+NUM_BRICKS_Y+7
   276 = 0032			PAD_START_POSITION = 50
   277
   278 = 00C2			PAD_BALL_POSY1 = PAD_POSY1-BALL_SIZEY
   279 = 00C8			PAD_BALL_POSY2 = PAD_POSY2-BALL_SIZEY
   280
   281 = 0000			MIN_BALL_POSX = 0
   282 = 0065			MAX_BALL_POSX = GAME_AREA_SIZEX-BALL_SIZEX
   283 = 0000			MIN_BALL_POSY = 0
   284 = 00CC			MAX_BALL_POSY = GAME_AREA_SIZEY-[BALL_SIZEY-2]
   285
   286
   287 = 000E			BALL_COLOR = $0E
   288 				;BALL_BACKG_COLOR1 = $98
   289
   290 				.if .def PAL_VERSION
   291 = 002C			BALL_MEGA_COLOR = $2C
   292 = 0026			BALL_MEGA_BACKG_COLOR = $26
   293 				.else
   294 				BALL_MEGA_COLOR = $3C
   295 				BALL_MEGA_BACKG_COLOR = $36
   296 				.endif
   297
   298
   299 = 0008			BONUS_SIZEX = 8
   300 = 0008			BONUS_SIZEY = 8
   301 = 00CC			MAX_BONUS_POSY = GAME_AREA_SIZEY-[BONUS_SIZEY-4]
   302 = 0009			MAX_BONUS_NUM = 9
   303 = 0003			BONUS_ANIM_SPEED = 3
   304 = 0002			ABORT_BONUS_NUM = 2
   305
   306 				.if .def PAL_VERSION
   307 = 006D			BONUS_FALL_SPEED_LSB = 109
   308 = 0001			BONUS_FALL_SPEED_MSB = 1
   309 				.else
   310 				BONUS_FALL_SPEED_LSB = 48
   311 				BONUS_FALL_SPEED_MSB = 1
   312 				.endif
   313
   314 = 001C			MAX_LEVEL_NUM = 28
   315 = 0015			LAST_LEVEL_GROUP_INDEX = 21
   316
   317 = 001B			MAX_LEVEL_NUM_EXTRA = 27
   318 = 0019			LAST_LEVEL_GROUP_INDEX_EXTRA = 25
   319
   320 = 0003			STARTING_BALLS = 3
   321 = 0003			MAX_BALLS_IN_PLAY = 3
   322
   323 = 004C			PM_OFFSET_X = 76
   324 = 001C			PM_OFFSET_Y = 28
   325
   326 = 0008			MAX_ACTIVE_HIGHLIGHT_ANIMS = 8
   327 = 0004			HIGHLIGHT_ANIM_FRAMES = 4
   328
   329 				.if .def PAL_VERSION
   330 = 0002			HIGHLIGHT_ANIM_TIME = 2
   331 				.else
   332 				HIGHLIGHT_ANIM_TIME = 2
   333 				.endif
   334
   335 = 0018			MAX_ACTIVE_RESTORE_BRICKS = 24
   336 = 000E			RESTORE_BRICK_TIME = 14
   337
   338 				; half a second resolution for this counter (30 NTSC, 25 PAL)
   339 				.if .def PAL_VERSION
   340 = 0019			VBI_COUNTER_FRAMES = 25
   341 = 0005			FRAMES_TIMER_UNIT = 5
   342 = 0032			FRAMES_ONE_SECOND = 50
   343 				.else
   344 				VBI_COUNTER_FRAMES = 30
   345 				FRAMES_TIMER_UNIT = 6
   346 				FRAMES_ONE_SECOND = 60
   347 				.endif
   348
   349 = 0002			MIN_MOUSE_STEP = 2
   350 = 0002			MAX_MOUSE_STEP = 2
   351 = 0003			MOUSE_READS_TO_ACCELERATE = 3
   352 = 000A			MOUSE_ACCEL_MEMORY = 10
   353
   354 				.if .def PAL_VERSION
   355 = 001B			DLI_READ_MOUSE_LINES = 27
   356 				.else
   357 				DLI_READ_MOUSE_LINES = 24
   358 				.endif
   359
   360 = 00B4			RESTORE_BRICK_LEFT_CHAR = 52+128
   361 = 00B5			RESTORE_BRICK_RIGHT_CHAR = RESTORE_BRICK_LEFT_CHAR+1
   362 = 0052			RESTORE_BRICK_VALUE = $52
   363
   364 = 00AC			BALL_CHAR = 44+128
   365 = 002D			BLANK_CHAR = 45
   366 = 000A			MAX_BALLS_IN_HUD = 10
   367
   368 				.if .def PAL_VERSION
   369 = 009B			MAX_VCOUNT_VALUE = 155
   370 = 0027			RMT_UPDATE_VCOUNT_LINES = 39
   371 				.else
   372 				MAX_VCOUNT_VALUE = 130
   373 				RMT_UPDATE_VCOUNT_LINES = 39
   374 				.endif
   375
   376 = 001C			MUSIC_FADEOUT_VCOUNT_STEPS = 28
   377
   378 = 007D			START_GAME_SOUND_TIME = FRAMES_TIMER_UNIT*25
   379
   380 = 0004			RMT_SONG_SPEED = 4
   381
   382
   383 				; enemy states
   384 = 0000			ENEMY_STATE_OFF			= 0
   385 = 0001			ENEMY_STATE_MOVING			= 1
   386 = 0002			ENEMY_STATE_HOVERING		= 2
   387 = 0003			ENEMY_STATE_DESTRUCTION		= 3
   388 = 0004			ENEMY_STATE_WAIT_RESPAWN		= 4
   389
   390 				; enemy types
   391 = 0000			ENEMY_TYPE_RED				= 0
   392 = 0001			ENEMY_TYPE_BLUE			= 1
   393 = 0002			ENEMY_TYPE_GREEN			= 2
   394
   395 				; enemy screen limits
   396 				;ENEMY_LIMIT_TOP			= 30
   397 = 00B4			ENEMY_LIMIT_BOTTOM			= 180
   398 = 004E			ENEMY_LIMIT_LEFT			= 78
   399 = 00A6			ENEMY_LIMIT_RIGHT			= 166
   400
   401
   402 				; game states
   403 				;GS_LEVEL_START		= 10
   404 = 0014			GS_LEVEL_PLAY		= 20
   405 = 001E			GS_LEVEL_WIN		= 30
   406
   407
   408 				;--------------------------------------------------------------------------------
   409 				; memory map:
   410
   411 				; remember that some move/copy macros use the last 6 bytes of page zero!
   412
   413 = 0000			Vars_address				= 0
   414 = 00D2			Static_vars_address			= 210
   415 = 00FA			Macros_vars_address			= 250
   416 = 00E7			RMT_vars_address			= [Macros_vars_address-19]
   417
   418 = 2800			RMT_song_address			= $2800		; 10K (3K zone) (1722 bytes) (2362 bytes)
   419 = 313A			RMT_end_song_address		= [RMT_song_address+2362]
   420 = 3400			RMT_address				= $3400		; 13K (?K zone)
   421
   422 = 4000			Prog_start				= $4000		; 16K (24K available)
   423
   424 = A000			PM_zone_address			= $A000		; 40K (uses <2K)
   425 = A000			DL1_address				= $A000		; 40K (DL1 and DL2 area, uses <0.5K)
   426 = A800			DL1_data_address			= $A800		; 42K (uses <2K)
   427
   428 = B000			Atari_font_address			= $B000		; 44K (uses 1K)
   429 = B400			Font1_address				= $B400		; 45K (uses 1K)
   430 = B800			Font_background_address		= $B800		; 46K (uses 2K)
   431
   432 				;System_font_address		= $E000		; (OS rom should be active)
   433
   434
   435 				;--------------------------------------------------------------------------------
   436 				; variables:
   437
   438 					org Vars_address
   439
   440 				save_a						org *+1
   441 				save_x						org *+1
   442 				save_y						org *+1
   443
   444 				old_port						org *+1
   445 				temp_port						org *+1
   446 				mouse_mov						org *+1
   447 				old_mov							org *+1
   448
   449 				m_portAHorizontalBits			org *+1
   450
   451 				pad_xpos						org *+1
   452
   453 				m_padAtRightLimitFlag			org *+1
   454 				m_padAtLeftLimitFlag			org *+1
   455
   456
   457 				; this group of vars have a version for every ball in play (MAX_BALLS_IN_PLAY)
   458 				ball_xstep_1					org *+MAX_BALLS_IN_PLAY
   459 				ball_xstep_2					org *+MAX_BALLS_IN_PLAY
   460 				ball_ystep_1					org *+MAX_BALLS_IN_PLAY
   461 				ball_ystep_2					org *+MAX_BALLS_IN_PLAY
   462 				ball_xdir						org *+MAX_BALLS_IN_PLAY
   463 				ball_ydir						org *+MAX_BALLS_IN_PLAY
   464
   465 				ball_xpos_1						org *+MAX_BALLS_IN_PLAY
   466 				ball_xpos_2						org *+MAX_BALLS_IN_PLAY
   467 				ball_xpos_3						org *+MAX_BALLS_IN_PLAY
   468 				ball_ypos_1						org *+MAX_BALLS_IN_PLAY
   469 				ball_ypos_2						org *+MAX_BALLS_IN_PLAY
   470 				ball_ypos_3						org *+MAX_BALLS_IN_PLAY
   471 				ball_rxpos						org *+MAX_BALLS_IN_PLAY
   472 				ball_rypos						org *+MAX_BALLS_IN_PLAY
   473 				old_ball_rypos					org *+MAX_BALLS_IN_PLAY
   474
   475 				m_ballLostFlag					org *+MAX_BALLS_IN_PLAY
   476
   477
   478 				ptr_1						org *+2
   479 				ptr_2						org *+2
   480 				ctd_1						org *+1
   481 				ctd_2						org *+1
   482 				temp_1						org *+1
   483 				temp_2						org *+1
   484
   485 				dli_index						org *+1
   486
   487 				brick_xchar						org *+1
   488 				brick_ychar						org *+1
   489
   490 				m_tempBrickIndex				org *+1
   491
   492 				m_soundFlag						org *+1
   493 				m_soundSize						org *+1
   494 				m_soundIndex					org *+1
   495 				; ptr_snd						org *+2
   496 				; ptr_snd_bak					org *+2
   497 				m_soundPriority					org *+1
   498
   499 				vbi_anim_ctd					org *+1
   500 				anim_num						org *+1
   501 				vbi_jif_ctd						org *+1
   502 				vbi_gold_ctd					org *+1
   503
   504 				gold_init						org *+1
   505 				gold_num						org *+1
   506 				gold_index						org *+1
   507
   508 				m_levelIndex					org *+1
   509 				m_nextLevelIsLeft				org *+1
   510
   511 				brick_lev_num					org *+1
   512
   513 				m_backgroundIndex				org *+1
   514 				m_backgroundColor				org *+1
   515
   516 				m_numberOfBallsLeft				org *+1
   517 				m_ballNumHud					org *+1
   518
   519 				; bonus_flag = 0 --> no bonus powerup is active
   520 				; bonus_flag = 128 --> bonus powerup just created, needs init in VBI (for one frame only)
   521 				; bonus_flag = 1 --> bonus powerup falling, updated in the VBI
   522 				bonus_flag					org *+1
   523
   524 				bonus_xpos					org *+1
   525 				bonus_ypos					org *+1
   526 				bonus_ypos_decimal				org *+1
   527 				bonus_sh_line					org *+1
   528 				bonus_sh_ctd					org *+1
   529 				ptr_bonus_sh					org *+2
   530 				bonus_color					org *+1
   531
   532 				m_bonusType					org *+1
   533 				m_lastBonusType				org *+1
   534
   535 				m_extraPlayerBonusFlag			org *+1
   536 				m_bonusExpandIsActive			org *+1
   537 				m_bonusCatchIsActive			org *+1
   538 				;m_bonusLaserIsActive			org *+1
   539 				m_bonusBreakIsActive			org *+1
   540
   541 				m_bonusReduceIsActive			org *+1
   542 				m_bonusMegaIsActive				org *+1
   543
   544 				;m_firstBonusDelayCounter			org *+1
   545
   546 				m_mouseAccelCounter				org *+1
   547 				m_mouseStep						org *+1			; this was called m_mouseAccelStep before
   548 				m_mouseAccelMemoryCounter		org *+1
   549
   550 				m_oldMouseReadDirection			org *+1
   551
   552 				;m_padFrameDirection				org *+1
   553 				m_padFrameDeltaStep				org *+1
   554
   555 				m_ballSpeedCounter				org *+1
   556 				m_currentBallSpeed				org *+1
   557
   558 				m_ballLostThisLevelFlag			org *+1
   559
   560 				m_ballSpeedUpTimer				org *+1
   561 				m_ballHardHitsCounter			org *+1
   562
   563 				m_catchedBallPadOffset			org *+1
   564 				m_ballCatchedByPadFlag			org *+1
   565 				m_ballCatchedByPadTimer			org *+1
   566
   567 				m_ballAntialiasColor			org *+1
   568 				m_ballBackgroundColor			org *+1
   569
   570 				m_numberOfBallsInPlay			org *+1
   571 				m_currentBallIndex				org *+1
   572
   573 				m_ballHitTopBorderFlag			org *+1
   574 				;m_ballHitsCounter				org *+1
   575
   576 				m_maxPadPosX					org *+1
   577 				m_maxPadPosXPlusOne				org *+1
   578 				m_padCollisionSizeX				org *+1
   579 				m_padCollisionHalfSizeX			org *+1
   580 				m_padHalfSizeX					org *+1
   581
   582 				m_padMiddlePos					org *+1
   583 				m_padMiddlePosPM				org *+1
   584
   585 				m_padSizeP3					org *+1
   586
   587 				m_playerScore					org *+3
   588 				;m_sessionHighScore				org *+3
   589 				m_tempScore					org *+1
   590
   591 				m_padHPOSP3					org *+1
   592
   593 				.if .def USE_ENEMY_CODE
   594 				m_enemy1PosX					org *+1
   595 				m_enemy1PosX_L1				org *+1
   596 				m_enemy1PosY					org *+1
   597 				m_enemy1BasePosY				org *+1
   598 				m_enemy1BasePosY_L1				org *+1
   599
   600 				m_enemy1OldPosY				org *+1
   601 				m_enemy1SineIndex				org *+1
   602
   603 				m_enemy1StepX					org *+1
   604 				m_enemy1StepY					org *+1
   605 				m_enemy1StepX_L1				org *+1
   606 				m_enemy1StepY_L1				org *+1
   607
   608 				m_enemy1LimitX					org *+1
   609 				m_enemy1LimitY					org *+1
   610
   611 				m_enemy1DirectionsFlag			org *+1
   612
   613 				m_enemy1Type					org *+1
   614
   615 				m_enemy1State					org *+1
   616 				m_enemy1StateTimer				org *+2
   617
   618 				m_enemy1AnimIndex				org *+1
   619 				m_enemy1AnimCounter				org *+1
   620
   621 				m_enemy1SizeP3					org *+1
   622
   623 				m_enemy1OffsetM1				org *+1
   624 				m_enemy1OffsetM2				org *+1
   625 				m_enemy1OffsetM3				org *+1
   626
   627 				m_enemy1ColorP3				org *+1
   628 				.endif
   629
   630 				m_startGameFlag				org *+1
   631
   632 				m_gameState					org *+1
   633
   634 				m_startGameBallCatchedFlag		org *+1
   635
   636 				m_waitForSongEndCounter			org *+1
   637 				m_rmtSongSpeedCounter			org *+1
   638
   639 				m_openSidesWaitTimer			org *+1
   640 				m_animateExitsTimer				org *+1
   641 				m_exitsAnimationIndex			org *+1
   642
   643 				m_startGameWaitTimer			org *+1
   644
   645 				m_keyPausePressed				org *+1
   646 				m_oldKeyPausePressed			org *+1
   647 				m_pauseModeFlag				org *+1
   648
   649 				m_leftDigit					org *+1
   650 				m_rightDigit					org *+1
   651
   652 				m_startLevelHighlightTimer		org *+1
   653 				m_startLevelHighlightStep		org *+1
   654
   655 				m_newKeyPressedFlag				org *+1
   656 				m_oldKeyPressedFlag				org *+1
   657 				m_newKeyPressedValue			org *+1
   658 				m_oldKeyPressedValue			org *+1
   659
   660 				m_newTriggerPressedFlag			org *+1
   661 				m_oldTriggerPressedFlag			org *+1
   662
   663 				m_currentVcountLineRMT			org *+1
   664 				m_nextVcountLineRMT				org *+1
   665 				m_musicFadeOutCounter			org *+1
   666
   667 				m_dliP3PL						org *+1
   668
   669 				.if .def SHOW_TIMING_AREAS
   670 				m_mainAreaColor				org *+1
   671 				.endif
   672
   673
   674 				;================================================================================
   675
   676 				END_VARS_AREA
   677 					.if END_VARS_AREA > Static_vars_address
   678 						.error "Vars area overwrite static vars area!"
   679 					.endif
   680
   681 				;================================================================================
   682
   683 					org Static_vars_address
   684
   685 				m_sessionHighScore				org *+3
   686 				m_sessionHighLevel				org *+1
   687
   688 				m_difficultyIndex				org *+1
   689 				;m_selectedVausIndex				org *+1
   690 				m_selectedMouseAccel			org *+1
   691 				m_selectedLevelIndex			org *+1
   692 				m_selectedControllerIndex		org *+1
   693 				m_selectedPaddleAngleIndex		org *+1
   694
   695 				m_triggerTypeMask				org *+1
   696
   697 				m_startingBallSpeed				org *+1
   698 				m_topBorderBallSpeed			org *+1
   699 				m_maxBallSpeed					org *+1
   700 				m_ballSpeedUpHalfSeconds			org *+1
   701
   702 				m_usePaddleControllerFlag		org *+1
   703
   704
   705 				;================================================================================
   706
   707 				END_STATIC_VARS_AREA
   708 					.if END_STATIC_VARS_AREA > RMT_vars_address
   709 						.error "Static vars area overwrite RMT vars area!"
   710 					.endif
   711
   712 				;================================================================================
   713
   714 				; RMT music (use the address from the header of the music file,
   715 				; must be equal to RMT_song_address, or $2800 in this case)
   716
   717 					opt h-					; RMT module is standard Atari binary file already
   718
   719 00E1 FF FF 00 28 39 31 + 	ins "RMT/ark_2a_exp.rmt"		; include music RMT module
   720
   721 					opt h+
   722
   723
   724 				;================================================================================
   725
   726 0A21				org RMT_end_song_address
   727
   728 313A			END_RMT_SONG_AREA
   729 					.if END_RMT_SONG_AREA > [PLAYER-$0320]
   730 						.error "RMT song area overwrite the RMT code area!"
   731 					.endif
   732
   733 				;================================================================================
   734
   735 				; RMT code (the first 1K is almost used for vars)
   736 				; (from PLAYER-$0320 to PLAYER for mono RMT player)
   737
   738 313A				org RMT_address+$400
   739
   740 = 0000			STEREOMODE equ 0				; 0 => compile RMT player for mono 4 tracks
   741
   742 3800				icl "RMT/rmtplayr_v3.asm"	; include hacked RMT player routine
Source: D:\!Delphi\mads\examples\games\pad\RMT\rmtplayr_v3.asm
     1 				;*
     2 				;* Raster Music Tracker, RMT Atari routine version 1.20090108
     3 				;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2009
     4 				;* http://raster.atari.org
     5 				;*
     6 				;* Warnings:
     7 				;*
     8 				;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     9 				;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
    10 				;*    address for frequency tables and functionary variables. It's:
    11 				;*		a) from PLAYER-$03c0 to PLAYER for stereo RMTplayer
    12 				;*		b) from PLAYER-$0320 to PLAYER for mono RMTplayer
    13 				;*
    14 				;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
    15 				;*    i.e. "PLAYER" address can be $..00 only!
    16 				;*
    17 				;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
    18 				;*
    19 				;* STEREOMODE	equ 0..3			;0 => compile RMTplayer for 4 tracks mono
    20 				;*							;1 => compile RMTplayer for 8 tracks stereo
    21 				;*							;2 => compile RMTplayer for 4 tracks stereo L1 R2 R3 L4
    22 				;*							;3 => compile RMTplayer for 4 tracks stereo L1 L2 R3 R4
    23 				;*
    24
    25 = 0004			TRACKS		equ 4
    26
    27 				;================================================================================
    28 3800			PLAYER
    29
    30 				;================================================================================
    31 				;* RMT FEATures definitions file
    32 				;* For optimizations of RMT player routine to concrete RMT module only!
    33 				;================================================================================
    34
    35 3800				icl "RMT/ark_2a_feat.asm"
Source: D:\!Delphi\mads\examples\games\pad\RMT\ark_2a_feat.asm
     1 				;* --------BEGIN--------
     2 = 0000			FEAT_SFX		equ 0
     3 = 0001			FEAT_GLOBALVOLUMEFADE	equ 1		;RMTGLOBALVOLUMEFADE variable
     4 = 0000			FEAT_NOSTARTINGSONGLINE	equ 0
     5 = 0004			FEAT_INSTRSPEED		equ 4
     6 = 0000			FEAT_CONSTANTSPEED		equ 0		;(2 times)
     7 = 0001			FEAT_COMMAND1		equ 1		;(50 times)
     8 = 0000			FEAT_COMMAND2		equ 0		;(0 times)
     9 = 0000			FEAT_COMMAND3		equ 0		;(0 times)
    10 = 0000			FEAT_COMMAND4		equ 0		;(0 times)
    11 = 0000			FEAT_COMMAND5		equ 0		;(0 times)
    12 = 0000			FEAT_COMMAND6		equ 0		;(0 times)
    13 = 0000			FEAT_COMMAND7SETNOTE		equ 0		;(0 times)
    14 = 0000			FEAT_COMMAND7VOLUMEONLY		equ 0		;(0 times)
    15 = 0000			FEAT_PORTAMENTO		equ 0		;(0 times)
    16 = 0000			FEAT_FILTER		equ 0		;(0 times)
    17 = 0000			FEAT_FILTERG0L		equ 0		;(0 times)
    18 = 0000			FEAT_FILTERG1L		equ 0		;(0 times)
    19 = 0000			FEAT_FILTERG0R		equ 0		;(0 times)
    20 = 0000			FEAT_FILTERG1R		equ 0		;(0 times)
    21 = 0000			FEAT_BASS16		equ 0		;(0 times)
    22 = 0000			FEAT_BASS16G1L		equ 0		;(0 times)
    23 = 0000			FEAT_BASS16G3L		equ 0		;(0 times)
    24 = 0000			FEAT_BASS16G1R		equ 0		;(0 times)
    25 = 0000			FEAT_BASS16G3R		equ 0		;(0 times)
    26 = 0000			FEAT_VOLUMEONLYG0L		equ 0		;(0 times)
    27 = 0000			FEAT_VOLUMEONLYG2L		equ 0		;(0 times)
    28 = 0000			FEAT_VOLUMEONLYG3L		equ 0		;(0 times)
    29 = 0000			FEAT_VOLUMEONLYG0R		equ 0		;(0 times)
    30 = 0000			FEAT_VOLUMEONLYG2R		equ 0		;(0 times)
    31 = 0000			FEAT_VOLUMEONLYG3R		equ 0		;(0 times)
    32 = 0001			FEAT_TABLETYPE		equ 1		;(2 times)
    33 = 0000			FEAT_TABLEMODE		equ 0		;(0 times)
    34 = 0000			FEAT_TABLEGO		equ 0		;(0 times)
    35 = 0001			FEAT_AUDCTLMANUALSET		equ 1		;(2 times)
    36 = 0000			FEAT_VOLUMEMIN		equ 0		;(0 times)
    37 = 0001			FEAT_EFFECTVIBRATO		equ 1		;(1 times)
    38 = 0000			FEAT_EFFECTFSHIFT		equ 0		;(0 times)
    39 				;* --------END--------
    36
    37 				;================================================================================
    38 				; RMT ZeroPage addresses
    39 				;================================================================================
    40 3800				org RMT_vars_address
    41
    42 00E7			p_tis
    43
    44 00E7			p_instrstable		org *+2
    45 00E9			p_trackslbstable	org *+2
    46 00EB			p_trackshbstable	org *+2
    47 00ED			p_song			org *+2
    48 00EF			ns				org *+2
    49 00F1			nr				org *+2
    50 00F3			nt				org *+2
    51 00F5			reg1				org *+1
    52 00F6			reg2				org *+1
    53 00F7			reg3				org *+1
    54 00F8			tmp				org *+1
    55
    56 					IFT FEAT_COMMAND2
    57 				frqaddcmd2		org *+1
    58 					EIF
    59
    60 				;================================================================================
    61 					IFT TRACKS>4
    62 					org PLAYER-$400+$40
    63 					ELS
    64 00F9				org PLAYER-$400+$e0
    65 					EIF
    66
    67 34E0			track_variables
    68
    69 34E0			trackn_db	org *+TRACKS
    70 34E4			trackn_hb	org *+TRACKS
    71 34E8			trackn_idx	org *+TRACKS
    72 34EC			trackn_pause	org *+TRACKS
    73 34F0			trackn_note	org *+TRACKS
    74 34F4			trackn_volume	org *+TRACKS
    75 34F8			trackn_distor 	org *+TRACKS
    76 34FC			trackn_shiftfrq	org *+TRACKS
    77 					IFT FEAT_PORTAMENTO
    78 				trackn_portafrqc org *+TRACKS
    79 				trackn_portafrqa org *+TRACKS
    80 				trackn_portaspeed org *+TRACKS
    81 				trackn_portaspeeda org *+TRACKS
    82 				trackn_portadepth org *+TRACKS
    83 					EIF
    84 3500			trackn_instrx2	org *+TRACKS
    85 3504			trackn_instrdb	org *+TRACKS
    86 3508			trackn_instrhb	org *+TRACKS
    87 350C			trackn_instridx	org *+TRACKS
    88 3510			trackn_instrlen	org *+TRACKS
    89 3514			trackn_instrlop	org *+TRACKS
    90 3518			trackn_instrreachend	org *+TRACKS
    91 351C			trackn_volumeslidedepth org *+TRACKS
    92 3520			trackn_volumeslidevalue org *+TRACKS
    93 					IFT FEAT_VOLUMEMIN
    94 				trackn_volumemin		org *+TRACKS
    95 					EIF
    96 = 0001			FEAT_EFFECTS equ FEAT_EFFECTVIBRATO||FEAT_EFFECTFSHIFT
    97 					IFT FEAT_EFFECTS
    98 3524			trackn_effdelay			org *+TRACKS
    99 					EIF
   100 					IFT FEAT_EFFECTVIBRATO
   101 3528			trackn_effvibratoa		org *+TRACKS
   102 					EIF
   103 					IFT FEAT_EFFECTFSHIFT
   104 				trackn_effshift		org *+TRACKS
   105 					EIF
   106 352C			trackn_tabletypespeed org *+TRACKS
   107 					IFT FEAT_TABLEMODE
   108 				trackn_tablemode	org *+TRACKS
   109 					EIF
   110 3530			trackn_tablenote	org *+TRACKS
   111 3534			trackn_tablea		org *+TRACKS
   112 3538			trackn_tableend		org *+TRACKS
   113 					IFT FEAT_TABLEGO
   114 				trackn_tablelop		org *+TRACKS
   115 					EIF
   116 353C			trackn_tablespeeda	org *+TRACKS
   117 					IFT FEAT_FILTER||FEAT_BASS16
   118 				trackn_command		org *+TRACKS
   119 					EIF
   120 					IFT FEAT_BASS16
   121 				trackn_outnote		org *+TRACKS
   122 					EIF
   123 					IFT FEAT_FILTER
   124 				trackn_filter		org *+TRACKS
   125 					EIF
   126 3540			trackn_audf	org *+TRACKS
   127 3544			trackn_audc	org *+TRACKS
   128 					IFT FEAT_AUDCTLMANUALSET
   129 3548			trackn_audctl	org *+TRACKS
   130 					EIF
   131
   132 354C			v_aspeed		org *+1
   133
   134 354D			track_endvariables
   135
   136
   137 				;================================================================================
   138 354D					org PLAYER-$100-$140-$40+2
   139
   140 = 000C			INSTRPAR	equ 12
   141 3582			tabbeganddistor
   142 3582-35BF> 80 00		 dta frqtabpure-frqtab,$00
   143 3584 80 20		 dta frqtabpure-frqtab,$20
   144 3586 80 40		 dta frqtabpure-frqtab,$40
   145 3588 00 C0		 dta frqtabbass1-frqtab,$c0
   146 358A 80 80		 dta frqtabpure-frqtab,$80
   147 358C 80 A0		 dta frqtabpure-frqtab,$a0
   148 358E 00 C0		 dta frqtabbass1-frqtab,$c0
   149 3590 40 C0		 dta frqtabbass2-frqtab,$c0
   150
   151 						IFT FEAT_EFFECTVIBRATO
   152 3592 00 01 05 0B		vibtabbeg dta 0,vib1-vib0,vib2-vib0,vib3-vib0
   153 3596 00			vib0	dta 0
   154 3597 01 FF FF 01		vib1	dta 1,-1,-1,1
   155 359B 01 00 FF FF 00 01	vib2	dta 1,0,-1,-1,0,1
   156 35A1 01 01 00 FF FF FF + vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1
   157 35AB			vibtabnext
   158 35AB 00					dta vib0-vib0+0
   159 35AC 02 03 04 01				dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
   160 35B0 06 07 08 09 0A 05			dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
   161 35B6 0C 0D 0E 0F 10 11 + 		dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
   162 						EIF
   163
   164
   165 				;================================================================================
   166 35C0					org PLAYER-$100-$140
   167
   168 					IFT FEAT_BASS16
   169 				frqtabbasslo
   170 					dta $F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
   171 					dta $95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
   172 					dta $34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
   173 					dta $DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
   174 					EIF
   175
   176
   177 				;================================================================================
   178 35C0					org PLAYER-$100-$100
   179
   180 3600			frqtab
   181 					ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
   182 3600			frqtabbass1
   183 3600-36BF> BF B6 AA A1 + 	dta $BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
   184 3610 98 8F 89 80 7A 71 + 	dta $98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
   185 3620 3C 38 35 32 2F 2D + 	dta $3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
   186 3630 17 16 14 13 12 11 + 	dta $17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
   187 3640			frqtabbass2
   188 3640 FF F1 E4 D8 CA C0 + 	dta $FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
   189 3650 66 61 5A 55 52 4B + 	dta $66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
   190 3660 28 25 24 21 1F 1E + 	dta $28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
   191 3670 0F 0E 0D 0C 0B 0A + 	dta $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
   192 3680			frqtabpure
   193 3680 F3 E6 D9 CC C1 B5 + 	dta $F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
   194 3690 60 5B 55 51 4C 48 + 	dta $60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
   195 36A0 25 23 21 1F 1D 1C + 	dta $25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
   196 36B0 0E 0D 0C 0B 0A 09 + 	dta $0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
   197 					IFT FEAT_BASS16
   198 				frqtabbasshi
   199 					dta $0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
   200 					dta $05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
   201 					dta $02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
   202 					dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   203 					EIF
   204
   205
   206 				;================================================================================
   207 36C0					org PLAYER-$0100
   208
   209 3700			volumetab
   210 3700-3B5F> 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   211 3710 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
   212 3720 00 00 00 00 01 01 + 	dta $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
   213 3730 00 00 00 01 01 01 + 	dta $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
   214 3740 00 00 01 01 01 01 + 	dta $00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
   215 3750 00 00 01 01 01 02 + 	dta $00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
   216 3760 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
   217 3770 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
   218 3780 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
   219 3790 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
   220 37A0 00 01 01 02 03 03 + 	dta $00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
   221 37B0 00 01 01 02 03 04 + 	dta $00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
   222 37C0 00 01 02 02 03 04 + 	dta $00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
   223 37D0 00 01 02 03 03 04 + 	dta $00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
   224 37E0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
   225 37F0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
   226
   227
   228 				;================================================================================
   229 				; Set of RMT main vectors:
   230 				;================================================================================
   231
   232 3800				org PLAYER
   233
   234 3800			RASTERMUSICTRACKER
   235 3800 4C 0F 38			jmp rmt_init
   236 3803 4C D4 39			jmp rmt_play
   237 3806 4C F8 39			jmp rmt_p3
   238 3809 4C 54 38			jmp rmt_silence
   239 380C 4C 2A 3B			jmp SetPokey
   240
   241 					IFT FEAT_SFX
   242 					jmp rmt_sfx			;* A=note(0,..,60),X=channel(0,..,3 or 0,..,7),Y=instrument*2(0,2,4,..,126)
   243 					EIF
   244
   245 380F			rmt_init
   246 380F 86 EF			stx ns
   247 3811 84 F0			sty ns+1
   248 					IFT FEAT_NOSTARTINGSONGLINE==0
   249 3813 48				pha
   250 					EIF
   251 					IFT track_endvariables-track_variables>255
   252 					ldy #0
   253 					tya
   254 				ri0	sta track_variables,y
   255 					sta track_endvariables-$100,y
   256 					iny
   257 					bne ri0
   258 					ELS
   259 3814 A0 6D			ldy #track_endvariables-track_variables
   260 3816 A9 00			lda #0
   261 3818 99 DF 34		ri0	sta track_variables-1,y
   262 381B 88				dey
   263 381C D0 FA			bne ri0
   264 					EIF
   265 381E A0 04			ldy #4
   266 3820 B1 EF			lda (ns),y
   267 3822 8D EC 39			sta v_maxtracklen
   268 3825 C8				iny
   269 					IFT FEAT_CONSTANTSPEED==0
   270 3826 B1 EF			lda (ns),y
   271 3828 8D BA 38			sta v_speed
   272 					EIF
   273 					IFT FEAT_INSTRSPEED==0
   274 					iny
   275 					lda (ns),y
   276 					sta v_instrspeed
   277 					sta v_ainstrspeed
   278 					ELI FEAT_INSTRSPEED>1
   279 382B A9 04			lda #FEAT_INSTRSPEED
   280 382D 8D 28 3B			sta v_ainstrspeed
   281 					EIF
   282 3830 A0 08			ldy #8
   283 3832 B1 EF		ri1	lda (ns),y
   284 3834 99 DF 00			sta p_tis-8,y
   285 3837 C8				iny
   286 3838 C0 10			cpy #8+8
   287 383A D0 F6			bne ri1
   288 					IFT FEAT_NOSTARTINGSONGLINE==0
   289 383C 68				pla
   290 383D 48				pha
   291 					IFT TRACKS>4
   292 					asl @
   293 					asl @
   294 					asl @
   295 					clc
   296 					adc p_song
   297 					sta p_song
   298 					pla
   299 					php
   300 					and #$e0
   301 					asl @
   302 					rol @
   303 					rol @
   304 					rol @
   305 					ELS
   306 383E 0A				asl @
   307 383F 0A				asl @
   308 3840 18				clc
   309 3841 65 ED			adc p_song
   310 3843 85 ED			sta p_song
   311 3845 68				pla
   312 3846 08				php
   313 3847 29 C0			and #$c0
   314 3849 0A				asl @
   315 384A 2A				rol @
   316 384B 2A				rol @
   317 					EIF
   318 384C 28				plp
   319 384D 65 EE			adc p_song+1
   320 384F 85 EE			sta p_song+1
   321 					EIF
   322 3851 20 69 38			jsr GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   323
   324 3854			rmt_silence
   325
   326 				; HACK: I don't want this init (because I am using IRQ's)
   327 3854 A9 00			lda #0
   328 3856 8D 08 D2			sta $d208
   329 3859 A0 03			ldy #3
   330 385B 8C 0F D2			sty $d20f
   331 385E A0 08			ldy #8
   332 3860 99 00 D2		si1	sta $d200,y
   333 3863 88				dey
   334 3864 10 FA			bpl si1
   335
   336 				; .if .def IRQ_15KHz
   337 				; 	lda #1		; 15khz mode (force this clock)
   338 				; 	sta $d208
   339 				; 
   340 				; 	lda #0
   341 				; 	sta $d200
   342 				; 	sta $d201
   343 				; 	sta $d202
   344 				; 	sta $d203
   345 				; 	sta $d204
   346 				; 	sta $d205
   347 				; .else
   348 				; 	lda #64		; channel 1 at 1.79MHz (force this clock)
   349 				; 	sta $d208
   350 				; 
   351 				; 	lda #0
   352 				; 	sta $d202
   353 				; 	sta $d203
   354 				; 	sta $d204
   355 				; 	sta $d205
   356 				; 	sta $d206
   357 				; 	sta $d207
   358 				; .endif
   359
   360 					IFT FEAT_INSTRSPEED==0
   361 					lda v_instrspeed
   362 					ELS
   363 3866 A9 04			lda #FEAT_INSTRSPEED
   364 					EIF
   365 3868 60				rts
   366
   367 3869			GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   368 3869			GetSongLine
   369 3869 A2 00			ldx #0
   370 386B 8E EA 39			stx v_abeat
   371 386E			nn0
   372 386E 8A			nn1	txa
   373 386F A8				tay
   374 3870 B1 ED			lda (p_song),y
   375 3872 C9 FE			cmp #$fe
   376 3874 B0 2D			bcs nn2
   377 3876 A8				tay
   378 3877 B1 E9			lda (p_trackslbstable),y
   379 3879 9D E0 34			sta trackn_db,x
   380 387C B1 EB			lda (p_trackshbstable),y
   381 387E 9D E4 34		nn1a sta trackn_hb,x
   382 3881 A9 00			lda #0
   383 3883 9D E8 34			sta trackn_idx,x
   384 3886 A9 01			lda #1
   385 3888 9D EC 34		nn1a2 sta trackn_pause,x
   386 388B A9 80			lda #$80
   387 388D 9D 00 35			sta trackn_instrx2,x
   388 3890 E8				inx
   389 3891 E0 04		xtracks01	cpx #TRACKS
   390 3893 D0 D9			bne nn1
   391 3895 A5 ED			lda p_song
   392 3897 18				clc
   393 3898 69 04		xtracks02	adc #TRACKS
   394 389A 85 ED			sta p_song
   395 389C 90 1B			bcc GetTrackLine
   396 389E E6 EE			inc p_song+1
   397 38A0			nn1b
   398 38A0 4C B9 38			jmp GetTrackLine
   399 38A3			nn2
   400 38A3 F0 04			beq nn3
   401 38A5			nn2a
   402 38A5 A9 00			lda #0
   403 38A7 F0 DF			beq nn1a2
   404 38A9			nn3
   405 38A9 A0 02			ldy #2
   406 38AB B1 ED			lda (p_song),y
   407 38AD AA				tax
   408 38AE C8				iny
   409 38AF B1 ED			lda (p_song),y
   410 38B1 85 EE			sta p_song+1
   411 38B3 86 ED			stx p_song
   412 38B5 A2 00			ldx #0
   413 38B7 F0 B5			beq nn0
   414 38B9			GetTrackLine
   415 38B9			oo0
   416 38B9			oo0a
   417 					IFT FEAT_CONSTANTSPEED==0
   418 38B9 A9 FF			lda #$ff
   419 = 38BA			v_speed equ *-1
   420 38BB 8D 14 39			sta v_bspeed
   421 					EIF
   422 38BE A2 FF			ldx #-1
   423 38C0			oo1
   424 38C0 E8				inx
   425 38C1 DE EC 34			dec trackn_pause,x
   426 38C4 D0 49			bne oo1x
   427 38C6			oo1b
   428 38C6 BD E0 34			lda trackn_db,x
   429 38C9 85 EF			sta ns
   430 38CB BD E4 34			lda trackn_hb,x
   431 38CE 85 F0			sta ns+1
   432 38D0			oo1i
   433 38D0 BC E8 34			ldy trackn_idx,x
   434 38D3 FE E8 34			inc trackn_idx,x
   435 38D6 B1 EF			lda (ns),y
   436 38D8 85 F5			sta reg1
   437 38DA 29 3F			and #$3f
   438 38DC C9 3D			cmp #61
   439 38DE F0 0E			beq oo1a
   440 38E0 B0 3C			bcs oo2
   441 38E2 9D F0 34			sta trackn_note,x
   442 					IFT FEAT_BASS16
   443 					sta trackn_outnote,x
   444 					EIF
   445 38E5 C8				iny
   446 38E6 B1 EF			lda (ns),y
   447 38E8 4A				lsr @
   448 38E9 29 7E			and #$3f*2
   449 38EB 9D 00 35			sta trackn_instrx2,x
   450 38EE			oo1a
   451 38EE A9 01			lda #1
   452 38F0 9D EC 34			sta trackn_pause,x
   453 38F3 BC E8 34			ldy trackn_idx,x
   454 38F6 FE E8 34			inc trackn_idx,x
   455 38F9 B1 EF			lda (ns),y
   456 38FB 4A				lsr @
   457 38FC 66 F5			ror reg1
   458 38FE 4A				lsr @
   459 38FF 66 F5			ror reg1
   460 3901 A5 F5			lda reg1
   461 					IFT FEAT_GLOBALVOLUMEFADE
   462 3903 38				sec
   463 3904 E9 00			sbc #$00
   464 = 3905			RMTGLOBALVOLUMEFADE equ *-1
   465 3906 B0 02			bcs voig
   466 3908 A9 00			lda #0
   467 390A			voig
   468 					EIF
   469 390A 29 F0			and #$f0
   470 390C 9D F4 34			sta trackn_volume,x
   471 390F			oo1x
   472 390F E0 03		xtracks03sub1	cpx #TRACKS-1
   473 3911 D0 AD			bne oo1
   474 					IFT FEAT_CONSTANTSPEED==0
   475 3913 A9 FF			lda #$ff
   476 = 3914			v_bspeed equ *-1
   477 3915 8D BA 38			sta v_speed
   478 					ELS
   479 					lda #FEAT_CONSTANTSPEED
   480 					EIF
   481 3918 8D 4C 35			sta v_aspeed
   482 391B 4C 63 39			jmp InitOfNewSetInstrumentsOnly
   483 391E			oo2
   484 391E C9 3F			cmp #63
   485 3920 F0 1B			beq oo63
   486 3922 A5 F5			lda reg1
   487 3924 29 C0			and #$c0
   488 3926 F0 09			beq oo62_b
   489 3928 0A				asl @
   490 3929 2A				rol @
   491 392A 2A				rol @
   492 392B 9D EC 34			sta trackn_pause,x
   493 392E 4C 0F 39			jmp oo1x
   494 3931			oo62_b
   495 3931 C8				iny
   496 3932 B1 EF			lda (ns),y
   497 3934 9D EC 34			sta trackn_pause,x
   498 3937 FE E8 34			inc trackn_idx,x
   499 393A 4C 0F 39			jmp oo1x
   500 393D			oo63
   501 393D A5 F5			lda reg1
   502 					IFT FEAT_CONSTANTSPEED==0
   503 393F 30 0C			bmi oo63_1X
   504 3941 C8				iny
   505 3942 B1 EF			lda (ns),y
   506 3944 8D 14 39			sta v_bspeed
   507 3947 FE E8 34			inc trackn_idx,x
   508 394A 4C D0 38			jmp oo1i
   509 394D			oo63_1X
   510 					EIF
   511 394D C9 FF			cmp #255
   512 394F F0 09			beq oo63_11
   513 3951 C8				iny
   514 3952 B1 EF			lda (ns),y
   515 3954 9D E8 34			sta trackn_idx,x
   516 3957 4C D0 38			jmp oo1i
   517 395A			oo63_11
   518 395A 4C 69 38			jmp GetSongLine
   519 395D 4C F8 39		p2xrmtp3	jmp rmt_p3
   520 3960 CA			p2x0 dex
   521 3961 30 FA			 bmi p2xrmtp3
   522 3963			InitOfNewSetInstrumentsOnly
   523 3963 BC 00 35		p2x1 ldy trackn_instrx2,x
   524 3966 30 F8			bmi p2x0
   525 					IFT FEAT_SFX
   526 					jsr SetUpInstrumentY2
   527 					jmp p2x0
   528 				rmt_sfx
   529 					sta trackn_note,x
   530 					IFT FEAT_BASS16
   531 					sta trackn_outnote,x
   532 					EIF
   533 					lda #$f0				;* sfx note volume*16
   534 				RMTSFXVOLUME equ *-1		;* label for sfx note volume parameter overwriting
   535 					sta trackn_volume,x
   536 					EIF
   537 3968			SetUpInstrumentY2
   538 3968 B1 E7			lda (p_instrstable),y
   539 396A 9D 04 35			sta trackn_instrdb,x
   540 396D 85 F3			sta nt
   541 396F C8				iny
   542 3970 B1 E7			lda (p_instrstable),y
   543 3972 9D 08 35			sta trackn_instrhb,x
   544 3975 85 F4			sta nt+1
   545 					IFT FEAT_FILTER
   546 					lda #1
   547 					sta trackn_filter,x
   548 					EIF
   549 					IFT FEAT_TABLEGO
   550 					IFT FEAT_FILTER
   551 					tay
   552 					ELS
   553 					ldy #1
   554 					EIF
   555 					lda (nt),y
   556 					sta trackn_tablelop,x
   557 					iny
   558 					ELS
   559 3977 A0 02			ldy #2
   560 					EIF
   561 3979 B1 F3			lda (nt),y
   562 397B 9D 10 35			sta trackn_instrlen,x
   563 397E C8				iny
   564 397F B1 F3			lda (nt),y
   565 3981 9D 14 35			sta trackn_instrlop,x
   566 3984 C8				iny
   567 3985 B1 F3			lda (nt),y
   568 3987 9D 2C 35			sta trackn_tabletypespeed,x
   569 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   570 398A 29 3F			and #$3f
   571 					EIF
   572 398C 9D 3C 35			sta trackn_tablespeeda,x
   573 					IFT FEAT_TABLEMODE
   574 					lda (nt),y
   575 					and #$40
   576 					sta trackn_tablemode,x
   577 					EIF
   578 					IFT FEAT_AUDCTLMANUALSET
   579 398F C8				iny
   580 3990 B1 F3			lda (nt),y
   581 3992 9D 48 35			sta trackn_audctl,x
   582 3995 C8				iny
   583 					ELS
   584 					ldy #6
   585 					EIF
   586 3996 B1 F3			lda (nt),y
   587 3998 9D 1C 35			sta trackn_volumeslidedepth,x
   588 					IFT FEAT_VOLUMEMIN
   589 					iny
   590 					lda (nt),y
   591 					sta trackn_volumemin,x
   592 					IFT FEAT_EFFECTS
   593 					iny
   594 					EIF
   595 					ELS
   596 					IFT FEAT_EFFECTS
   597 399B A0 08			ldy #8
   598 					EIF
   599 					EIF
   600 					IFT FEAT_EFFECTS
   601 399D B1 F3			lda (nt),y
   602 399F 9D 24 35			sta trackn_effdelay,x
   603 					IFT FEAT_EFFECTVIBRATO
   604 39A2 C8				iny
   605 39A3 B1 F3			lda (nt),y
   606 39A5 A8				tay
   607 39A6 B9 92 35			lda vibtabbeg,y
   608 39A9 9D 28 35			sta trackn_effvibratoa,x
   609 					EIF
   610 					IFT FEAT_EFFECTFSHIFT
   611 					ldy #10
   612 					lda (nt),y
   613 					sta trackn_effshift,x
   614 					EIF
   615 					EIF
   616 39AC A9 80			lda #128
   617 39AE 9D 20 35			sta trackn_volumeslidevalue,x
   618 39B1 9D 00 35			sta trackn_instrx2,x
   619 39B4 0A				asl @
   620 39B5 9D 18 35			sta trackn_instrreachend,x
   621 39B8 9D FC 34			sta trackn_shiftfrq,x
   622 39BB A8				tay
   623 39BC B1 F3			lda (nt),y
   624 39BE 9D 38 35			sta trackn_tableend,x
   625 39C1 69 00			adc #0
   626 39C3 9D 0C 35			sta trackn_instridx,x
   627 39C6 A9 0C			lda #INSTRPAR
   628 39C8 9D 34 35			sta trackn_tablea,x
   629 39CB A8				tay
   630 39CC B1 F3			lda (nt),y
   631 39CE 9D 30 35			sta trackn_tablenote,x
   632 39D1			xata_rtshere
   633 					IFT FEAT_SFX
   634 					rts
   635 					ELS
   636 39D1 4C 60 39			jmp p2x0
   637 					EIF
   638
   639 				;================================================================================
   640 39D4			rmt_play
   641 39D4			rmt_p0
   642 39D4 20 2A 3B			jsr SetPokey
   643 				;================================================================================
   644
   645 39D7			rmt_p1
   646 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
   647 39D7 CE 28 3B			dec v_ainstrspeed
   648 39DA D0 1C			bne rmt_p3
   649 					EIF
   650 					IFT FEAT_INSTRSPEED==0
   651 					lda #$ff
   652 				v_instrspeed	equ *-1
   653 					sta v_ainstrspeed
   654 					ELI FEAT_INSTRSPEED>1
   655 39DC A9 04			lda #FEAT_INSTRSPEED
   656 39DE 8D 28 3B			sta v_ainstrspeed
   657 					EIF
   658 39E1			rmt_p2
   659 39E1 CE 4C 35			dec v_aspeed
   660 39E4 D0 12			bne rmt_p3
   661 39E6 EE EA 39			inc v_abeat
   662 39E9 A9 FF			lda #$ff
   663 = 39EA			v_abeat equ *-1
   664 39EB C9 FF			cmp #$ff
   665 = 39EC			v_maxtracklen equ *-1
   666 39ED F0 03			beq p2o3
   667 39EF 4C B9 38			jmp GetTrackLine
   668 39F2			p2o3
   669 39F2 4C 69 38			jmp GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   670 39F5 4C 0E 3B		go_ppnext	jmp ppnext
   671 39F8			rmt_p3
   672 39F8 A9 36			lda #>frqtab
   673 39FA 85 F2			sta nr+1
   674 39FC A2 03		xtracks05sub1	ldx #TRACKS-1
   675 39FE			pp1
   676 39FE BD 08 35			lda trackn_instrhb,x
   677 3A01 F0 F2			beq go_ppnext
   678 3A03 85 F0			sta ns+1
   679 3A05 BD 04 35			lda trackn_instrdb,x
   680 3A08 85 EF			sta ns
   681 3A0A BC 0C 35			ldy trackn_instridx,x
   682 3A0D B1 EF			lda (ns),y
   683 3A0F 85 F5			sta reg1
   684 3A11 C8				iny
   685 3A12 B1 EF			lda (ns),y
   686 3A14 85 F6			sta reg2
   687 3A16 C8				iny
   688 3A17 B1 EF			lda (ns),y
   689 3A19 85 F7			sta reg3
   690 3A1B C8				iny
   691 3A1C 98				tya
   692 3A1D DD 10 35			cmp trackn_instrlen,x
   693 3A20 90 0A			bcc pp2
   694 3A22 F0 08			beq pp2
   695 3A24 A9 80			lda #$80
   696 3A26 9D 18 35			sta trackn_instrreachend,x
   697 3A29			pp1b
   698 3A29 BD 14 35			lda trackn_instrlop,x
   699 3A2C 9D 0C 35		pp2	sta trackn_instridx,x
   700 3A2F A5 F5			lda reg1
   701 					IFT TRACKS>4
   702 					cpx #4
   703 					bcc pp2s
   704 					lsr @
   705 					lsr @
   706 					lsr @
   707 					lsr @
   708 				pp2s
   709 					EIF
   710 3A31 29 0F			and #$0f
   711 3A33 1D F4 34			ora trackn_volume,x
   712 3A36 A8				tay
   713 3A37 B9 00 37			lda volumetab,y
   714 3A3A 85 F8			sta tmp
   715 3A3C A5 F6			lda reg2
   716 3A3E 29 0E			and #$0e
   717 3A40 A8				tay
   718 3A41 B9 82 35			lda tabbeganddistor,y
   719 3A44 85 F1			sta nr
   720 3A46 A5 F8			lda tmp
   721 3A48 19 83 35			ora tabbeganddistor+1,y
   722 3A4B 9D 44 35			sta trackn_audc,x
   723 3A4E			InstrumentsEffects
   724 					IFT FEAT_EFFECTS
   725 3A4E BD 24 35			lda trackn_effdelay,x
   726 3A51 F0 1D			beq ei2
   727 3A53 C9 01			cmp #1
   728 3A55 D0 16			bne ei1
   729 3A57 BD FC 34			lda trackn_shiftfrq,x
   730 					IFT FEAT_EFFECTFSHIFT
   731 					clc
   732 					adc trackn_effshift,x
   733 					EIF
   734 					IFT FEAT_EFFECTVIBRATO
   735 3A5A 18				clc
   736 3A5B BC 28 35			ldy trackn_effvibratoa,x
   737 3A5E 79 96 35			adc vib0,y
   738 					EIF
   739 3A61 9D FC 34			sta trackn_shiftfrq,x
   740 					IFT FEAT_EFFECTVIBRATO
   741 3A64 B9 AB 35			lda vibtabnext,y
   742 3A67 9D 28 35			sta trackn_effvibratoa,x
   743 					EIF
   744 3A6A 4C 70 3A			jmp ei2
   745 3A6D			ei1
   746 3A6D DE 24 35			dec trackn_effdelay,x
   747 3A70			ei2
   748 					EIF
   749 3A70 BC 38 35			ldy trackn_tableend,x
   750 3A73 C0 0D			cpy #INSTRPAR+1
   751 3A75 90 32			bcc ei3
   752 3A77 BD 3C 35			lda trackn_tablespeeda,x
   753 3A7A 10 27			bpl ei2f
   754 3A7C			ei2c
   755 3A7C 98				tya
   756 3A7D DD 34 35			cmp trackn_tablea,x
   757 3A80 D0 07			bne ei2c2
   758 					IFT FEAT_TABLEGO
   759 					lda trackn_tablelop,x
   760 					ELS
   761 3A82 A9 0C			lda #INSTRPAR
   762 					EIF
   763 3A84 9D 34 35			sta trackn_tablea,x
   764 3A87 D0 03			bne ei2a
   765 3A89			ei2c2
   766 3A89 FE 34 35			inc trackn_tablea,x
   767 3A8C			ei2a
   768 3A8C BD 04 35			lda trackn_instrdb,x
   769 3A8F 85 F3			sta nt
   770 3A91 BD 08 35			lda trackn_instrhb,x
   771 3A94 85 F4			sta nt+1
   772 3A96 BC 34 35			ldy trackn_tablea,x
   773 3A99 B1 F3			lda (nt),y
   774 					IFT FEAT_TABLEMODE
   775 					ldy trackn_tablemode,x
   776 					beq ei2e
   777 					clc
   778 					adc trackn_tablenote,x
   779 				ei2e
   780 					EIF
   781 3A9B 9D 30 35			sta trackn_tablenote,x
   782 3A9E BD 2C 35			lda trackn_tabletypespeed,x
   783 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   784 3AA1 29 3F			and #$3f
   785 					EIF
   786 3AA3			ei2f
   787 3AA3 38				sec
   788 3AA4 E9 01			sbc #1
   789 3AA6 9D 3C 35			sta trackn_tablespeeda,x
   790 3AA9			ei3
   791 3AA9 BD 18 35			lda trackn_instrreachend,x
   792 3AAC 10 18			bpl ei4
   793 3AAE BD F4 34			lda trackn_volume,x
   794 3AB1 F0 13			beq ei4
   795 					IFT FEAT_VOLUMEMIN
   796 					cmp trackn_volumemin,x
   797 					beq ei4
   798 					bcc ei4
   799 					EIF
   800 3AB3 A8				tay
   801 3AB4 BD 20 35			lda trackn_volumeslidevalue,x
   802 3AB7 18				clc
   803 3AB8 7D 1C 35			adc trackn_volumeslidedepth,x
   804 3ABB 9D 20 35			sta trackn_volumeslidevalue,x
   805 3ABE 90 06			bcc ei4
   806 3AC0 98				tya
   807 3AC1 E9 10			sbc #16
   808 3AC3 9D F4 34			sta trackn_volume,x
   809 3AC6			ei4
   810 					IFT FEAT_COMMAND2
   811 					lda #0
   812 					sta frqaddcmd2
   813 					EIF
   814 					IFT FEAT_COMMAND1||FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   815 3AC6 A5 F6			lda reg2
   816 					IFT FEAT_FILTER||FEAT_BASS16
   817 					sta trackn_command,x
   818 					EIF
   819 3AC8 29 70			and #$70
   820 					IFT 1==[FEAT_COMMAND1+FEAT_COMMAND2+FEAT_COMMAND3+FEAT_COMMAND4+FEAT_COMMAND5+FEAT_COMMAND6+[FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY]]
   821 3ACA F0 05			beq cmd0
   822 					ELS
   823 					lsr @
   824 					lsr @
   825 					sta jmx+1
   826 				jmx	bcc *
   827 					jmp cmd0
   828 					nop
   829 					jmp cmd1
   830 					IFT FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   831 					nop
   832 					jmp cmd2
   833 					EIF
   834 					IFT FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   835 					nop
   836 					jmp cmd3
   837 					EIF
   838 					IFT FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   839 					nop
   840 					jmp cmd4
   841 					EIF
   842 					IFT FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   843 					nop
   844 					jmp cmd5
   845 					EIF
   846 					IFT FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   847 					nop
   848 					jmp cmd6
   849 					EIF
   850 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   851 					nop
   852 					jmp cmd7
   853 					EIF
   854 					EIF
   855 					ELS
   856 					IFT FEAT_FILTER||FEAT_BASS16
   857 					lda reg2
   858 					sta trackn_command,x
   859 					EIF
   860 					EIF
   861 3ACC			cmd1
   862 					IFT FEAT_COMMAND1
   863 3ACC A5 F7			lda reg3
   864 3ACE 4C 0B 3B			jmp cmd0c
   865 					EIF
   866 3AD1			cmd2
   867 					IFT FEAT_COMMAND2
   868 					lda reg3
   869 					sta frqaddcmd2
   870 					lda trackn_note,x
   871 					jmp cmd0a
   872 					EIF
   873 3AD1			cmd3
   874 					IFT FEAT_COMMAND3
   875 					lda trackn_note,x
   876 					clc
   877 					adc reg3
   878 					sta trackn_note,x
   879 					jmp cmd0a
   880 					EIF
   881 3AD1			cmd4
   882 					IFT FEAT_COMMAND4
   883 					lda trackn_shiftfrq,x
   884 					clc
   885 					adc reg3
   886 					sta trackn_shiftfrq,x
   887 					lda trackn_note,x
   888 					jmp cmd0a
   889 					EIF
   890 3AD1			cmd5
   891 					IFT FEAT_COMMAND5&&FEAT_PORTAMENTO
   892 					IFT FEAT_TABLETYPE
   893 					lda trackn_tabletypespeed,x
   894 					bpl cmd5a1
   895 					ldy trackn_note,x
   896 					lda (nr),y
   897 					clc
   898 					adc trackn_tablenote,x
   899 					jmp cmd5ax
   900 					EIF
   901 				cmd5a1
   902 					lda trackn_note,x
   903 					clc
   904 					adc trackn_tablenote,x
   905 					cmp #61
   906 					bcc cmd5a2
   907 					lda #63
   908 				cmd5a2
   909 					tay
   910 					lda (nr),y
   911 				cmd5ax
   912 					sta trackn_portafrqc,x
   913 					ldy reg3
   914 					bne cmd5a
   915 					sta trackn_portafrqa,x
   916 				cmd5a
   917 					tya
   918 					lsr @
   919 					lsr @
   920 					lsr @
   921 					lsr @
   922 					sta trackn_portaspeed,x
   923 					sta trackn_portaspeeda,x
   924 					lda reg3
   925 					and #$0f
   926 					sta trackn_portadepth,x
   927 					lda trackn_note,x
   928 					jmp cmd0a
   929 					ELI FEAT_COMMAND5
   930 					lda trackn_note,x
   931 					jmp cmd0a
   932 					EIF
   933 3AD1			cmd6
   934 					IFT FEAT_COMMAND6&&FEAT_FILTER
   935 					lda reg3
   936 					clc
   937 					adc trackn_filter,x
   938 					sta trackn_filter,x
   939 					lda trackn_note,x
   940 					jmp cmd0a
   941 					ELI FEAT_COMMAND6
   942 					lda trackn_note,x
   943 					jmp cmd0a
   944 					EIF
   945 3AD1			cmd7
   946 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   947 					IFT FEAT_COMMAND7SETNOTE
   948 					lda reg3
   949 					IFT FEAT_COMMAND7VOLUMEONLY
   950 					cmp #$80
   951 					beq cmd7a
   952 					EIF
   953 					sta trackn_note,x
   954 					jmp cmd0a
   955 					EIF
   956 					IFT FEAT_COMMAND7VOLUMEONLY
   957 				cmd7a
   958 					lda trackn_audc,x
   959 					ora #$f0
   960 					sta trackn_audc,x
   961 					lda trackn_note,x
   962 					jmp cmd0a
   963 					EIF
   964 					EIF
   965 3AD1			cmd0
   966 3AD1 BD F0 34			lda trackn_note,x
   967 3AD4 18				clc
   968 3AD5 65 F7			adc reg3
   969 3AD7			cmd0a
   970 					IFT FEAT_TABLETYPE
   971 3AD7 BC 2C 35			ldy trackn_tabletypespeed,x
   972 3ADA 30 19			bmi cmd0b
   973 					EIF
   974 3ADC 18				clc
   975 3ADD 7D 30 35			adc trackn_tablenote,x
   976 3AE0 C9 3D			cmp #61
   977 3AE2 90 07			bcc cmd0a1
   978 3AE4 A9 00			lda #0
   979 3AE6 9D 44 35			sta trackn_audc,x
   980 3AE9 A9 3F			lda #63
   981 3AEB			cmd0a1
   982 					IFT FEAT_BASS16
   983 					sta trackn_outnote,x
   984 					EIF
   985 3AEB A8				tay
   986 3AEC B1 F1			lda (nr),y
   987 3AEE 18				clc
   988 3AEF 7D FC 34			adc trackn_shiftfrq,x
   989 					IFT FEAT_COMMAND2
   990 					clc
   991 					adc frqaddcmd2
   992 					EIF
   993 					IFT FEAT_TABLETYPE
   994 3AF2 4C 0B 3B			jmp cmd0c
   995 3AF5			cmd0b
   996 3AF5 C9 3D			cmp #61
   997 3AF7 90 07			bcc cmd0b1
   998 3AF9 A9 00			lda #0
   999 3AFB 9D 44 35			sta trackn_audc,x
  1000 3AFE A9 3F			lda #63
  1001 3B00			cmd0b1
  1002 3B00 A8				tay
  1003 3B01 BD FC 34			lda trackn_shiftfrq,x
  1004 3B04 18				clc
  1005 3B05 7D 30 35			adc trackn_tablenote,x
  1006 3B08 18				clc
  1007 3B09 71 F1			adc (nr),y
  1008 					IFT FEAT_COMMAND2
  1009 					clc
  1010 					adc frqaddcmd2
  1011 					EIF
  1012 					EIF
  1013 3B0B			cmd0c
  1014 3B0B 9D 40 35			sta trackn_audf,x
  1015 3B0E			pp9
  1016 					IFT FEAT_PORTAMENTO
  1017 					lda trackn_portaspeeda,x
  1018 					beq pp10
  1019 					dec trackn_portaspeeda,x
  1020 					bne pp10
  1021 					lda trackn_portaspeed,x
  1022 					sta trackn_portaspeeda,x
  1023 					lda trackn_portafrqa,x
  1024 					cmp trackn_portafrqc,x
  1025 					beq pp10
  1026 					bcs pps1
  1027 					adc trackn_portadepth,x
  1028 					bcs pps8
  1029 					cmp trackn_portafrqc,x
  1030 					bcs pps8
  1031 					jmp pps9
  1032 				pps1
  1033 					sbc trackn_portadepth,x
  1034 					bcc pps8
  1035 					cmp trackn_portafrqc,x
  1036 					bcs pps9
  1037 				pps8
  1038 					lda trackn_portafrqc,x
  1039 				pps9
  1040 					sta trackn_portafrqa,x
  1041 				pp10
  1042 					lda reg2
  1043 					and #$01
  1044 					beq pp11
  1045 					lda trackn_portafrqa,x
  1046 					clc
  1047 					adc trackn_shiftfrq,x
  1048 					sta trackn_audf,x
  1049 				pp11
  1050 					EIF
  1051 3B0E			ppnext
  1052 3B0E CA				dex
  1053 3B0F 30 03			bmi rmt_p4
  1054 3B11 4C FE 39			jmp pp1
  1055 3B14			rmt_p4
  1056 					IFT FEAT_AUDCTLMANUALSET
  1057 3B14 AD 48 35			lda trackn_audctl+0
  1058 3B17 0D 49 35			ora trackn_audctl+1
  1059 3B1A 0D 4A 35			ora trackn_audctl+2
  1060 3B1D 0D 4B 35			ora trackn_audctl+3
  1061 3B20 AA				tax
  1062 					ELS
  1063 					ldx #0
  1064 					EIF
  1065 3B21			qq1
  1066 3B21 8E 2B 3B			stx v_audctl
  1067 					IFT FEAT_FILTER
  1068 					IFT FEAT_FILTERG0L
  1069 					lda trackn_command+0
  1070 					bpl qq2
  1071 					lda trackn_audc+0
  1072 					and #$0f
  1073 					beq qq2
  1074 					lda trackn_audf+0
  1075 					clc
  1076 					adc trackn_filter+0
  1077 					sta trackn_audf+2
  1078 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1079 					lda trackn_audc+2
  1080 					and #$10
  1081 					bne qq1a
  1082 					EIF
  1083 					lda #0
  1084 					sta trackn_audc+2
  1085 				qq1a
  1086 					txa
  1087 					ora #4
  1088 					tax
  1089 					EIF
  1090 				qq2
  1091 					IFT FEAT_FILTERG1L
  1092 					lda trackn_command+1
  1093 					bpl qq3
  1094 					lda trackn_audc+1
  1095 					and #$0f
  1096 					beq qq3
  1097 					lda trackn_audf+1
  1098 					clc
  1099 					adc trackn_filter+1
  1100 					sta trackn_audf+3
  1101 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
  1102 					lda trackn_audc+3
  1103 					and #$10
  1104 					bne qq2a
  1105 					EIF
  1106 					lda #0
  1107 					sta trackn_audc+3
  1108 				qq2a
  1109 					txa
  1110 					ora #2
  1111 					tax
  1112 					EIF
  1113 				qq3
  1114 					IFT FEAT_FILTERG0L||FEAT_FILTERG1L
  1115 					cpx v_audctl
  1116 					bne qq5
  1117 					EIF
  1118 					EIF
  1119 					IFT FEAT_BASS16
  1120 					IFT FEAT_BASS16G1L
  1121 					lda trackn_command+1
  1122 					and #$0e
  1123 					cmp #6
  1124 					bne qq4
  1125 					lda trackn_audc+1
  1126 					and #$0f
  1127 					beq qq4
  1128 					ldy trackn_outnote+1
  1129 					lda frqtabbasslo,y
  1130 					sta trackn_audf+0
  1131 					lda frqtabbasshi,y
  1132 					sta trackn_audf+1
  1133 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
  1134 					lda trackn_audc+0
  1135 					and #$10
  1136 					bne qq3a
  1137 					EIF
  1138 					lda #0
  1139 					sta trackn_audc+0
  1140 				qq3a
  1141 					txa
  1142 					ora #$50
  1143 					tax
  1144 					EIF
  1145 				qq4
  1146 					IFT FEAT_BASS16G3L
  1147 					lda trackn_command+3
  1148 					and #$0e
  1149 					cmp #6
  1150 					bne qq5
  1151 					lda trackn_audc+3
  1152 					and #$0f
  1153 					beq qq5
  1154 					ldy trackn_outnote+3
  1155 					lda frqtabbasslo,y
  1156 					sta trackn_audf+2
  1157 					lda frqtabbasshi,y
  1158 					sta trackn_audf+3
  1159 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1160 					lda trackn_audc+2
  1161 					and #$10
  1162 					bne qq4a
  1163 					EIF
  1164 					lda #0
  1165 					sta trackn_audc+2
  1166 				qq4a
  1167 					txa
  1168 					ora #$28
  1169 					tax
  1170 					EIF
  1171 					EIF
  1172 3B24			qq5
  1173 3B24 8E 2B 3B			stx v_audctl
  1174 					IFT TRACKS>4
  1175 					IFT FEAT_AUDCTLMANUALSET
  1176 					lda trackn_audctl+4
  1177 					ora trackn_audctl+5
  1178 					ora trackn_audctl+6
  1179 					ora trackn_audctl+7
  1180 					tax
  1181 					ELS
  1182 					ldx #0
  1183 					EIF
  1184 					stx v_audctl2
  1185 					IFT FEAT_FILTER
  1186 					IFT FEAT_FILTERG0R
  1187 					lda trackn_command+0+4
  1188 					bpl qs2
  1189 					lda trackn_audc+0+4
  1190 					and #$0f
  1191 					beq qs2
  1192 					lda trackn_audf+0+4
  1193 					clc
  1194 					adc trackn_filter+0+4
  1195 					sta trackn_audf+2+4
  1196 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1197 					lda trackn_audc+2+4
  1198 					and #$10
  1199 					bne qs1a
  1200 					EIF
  1201 					lda #0
  1202 					sta trackn_audc+2+4
  1203 				qs1a
  1204 					txa
  1205 					ora #4
  1206 					tax
  1207 					EIF
  1208 				qs2
  1209 					IFT FEAT_FILTERG1R
  1210 					lda trackn_command+1+4
  1211 					bpl qs3
  1212 					lda trackn_audc+1+4
  1213 					and #$0f
  1214 					beq qs3
  1215 					lda trackn_audf+1+4
  1216 					clc
  1217 					adc trackn_filter+1+4
  1218 					sta trackn_audf+3+4
  1219 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
  1220 					lda trackn_audc+3+4
  1221 					and #$10
  1222 					bne qs2a
  1223 					EIF
  1224 					lda #0
  1225 					sta trackn_audc+3+4
  1226 				qs2a
  1227 					txa
  1228 					ora #2
  1229 					tax
  1230 					EIF
  1231 				qs3
  1232 					IFT FEAT_FILTERG0R||FEAT_FILTERG1R
  1233 					cpx v_audctl2
  1234 					bne qs5
  1235 					EIF
  1236 					EIF
  1237 					IFT FEAT_BASS16
  1238 					IFT FEAT_BASS16G1R
  1239 					lda trackn_command+1+4
  1240 					and #$0e
  1241 					cmp #6
  1242 					bne qs4
  1243 					lda trackn_audc+1+4
  1244 					and #$0f
  1245 					beq qs4
  1246 					ldy trackn_outnote+1+4
  1247 					lda frqtabbasslo,y
  1248 					sta trackn_audf+0+4
  1249 					lda frqtabbasshi,y
  1250 					sta trackn_audf+1+4
  1251 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
  1252 					lda trackn_audc+0+4
  1253 					and #$10
  1254 					bne qs3a
  1255 					EIF
  1256 					lda #0
  1257 					sta trackn_audc+0+4
  1258 				qs3a
  1259 					txa
  1260 					ora #$50
  1261 					tax
  1262 					EIF
  1263 				qs4
  1264 					IFT FEAT_BASS16G3R
  1265 					lda trackn_command+3+4
  1266 					and #$0e
  1267 					cmp #6
  1268 					bne qs5
  1269 					lda trackn_audc+3+4
  1270 					and #$0f
  1271 					beq qs5
  1272 					ldy trackn_outnote+3+4
  1273 					lda frqtabbasslo,y
  1274 					sta trackn_audf+2+4
  1275 					lda frqtabbasshi,y
  1276 					sta trackn_audf+3+4
  1277 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1278 					lda trackn_audc+2+4
  1279 					and #$10
  1280 					bne qs4a
  1281 					EIF
  1282 					lda #0
  1283 					sta trackn_audc+2+4
  1284 				qs4a
  1285 					txa
  1286 					ora #$28
  1287 					tax
  1288 					EIF
  1289 					EIF
  1290 				qs5
  1291 					stx v_audctl2
  1292 					EIF
  1293 3B27			rmt_p5
  1294 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
  1295 3B27 A9 FF			lda #$ff
  1296 = 3B28			v_ainstrspeed equ *-1
  1297 					ELS
  1298 					lda #1
  1299 					EIF
  1300 3B29 60				rts
  1301
  1302 				;================================================================================
  1303 3B2A			SetPokey
  1304 3B2A A0 FF			ldy #$ff
  1305 = 3B2B			v_audctl equ *-1
  1306
  1307 3B2C AD 40 35			lda trackn_audf+0
  1308 3B2F AE 44 35			ldx trackn_audc+0
  1309 3B32 8D 00 D2			sta $d200
  1310 3B35 8E 01 D2			stx $d201
  1311
  1312 3B38 AD 41 35			lda trackn_audf+1
  1313 3B3B AE 45 35			ldx trackn_audc+1
  1314 3B3E 8D 02 D2			sta $d200+2
  1315 3B41 8E 03 D2			stx $d201+2
  1316
  1317 3B44 AD 42 35			lda trackn_audf+2
  1318 3B47 AE 46 35			ldx trackn_audc+2
  1319 3B4A 8D 04 D2			sta $d200+4
  1320 3B4D 8E 05 D2			stx $d201+4
  1321
  1322 3B50 AD 43 35			lda trackn_audf+3
  1323 3B53 AE 47 35			ldx trackn_audc+3
  1324 3B56 8D 06 D2			sta $d200+6
  1325 3B59 8E 07 D2			stx $d201+6
  1326
  1327
  1328 				; HACK: only update 3 voices
  1329
  1330 				; .if .def IRQ_15KHz
  1331 				; 	lda trackn_audf+0
  1332 				; 	ldx trackn_audc+0
  1333 				; 	sta $d200
  1334 				; 	stx $d201
  1335 				;
  1336 				; 	lda trackn_audf+1
  1337 				; 	ldx trackn_audc+1
  1338 				; 	sta $d200+2
  1339 				; 	stx $d201+2
  1340 				;
  1341 				; 	lda trackn_audf+2
  1342 				; 	ldx trackn_audc+2
  1343 				; 	sta $d200+4
  1344 				; 	stx $d201+4
  1345 				;
  1346 				; .else
  1347 				;
  1348 				; 	lda trackn_audf+0
  1349 				; 	ldx trackn_audc+0
  1350 				; 	sta $d200+2
  1351 				; 	stx $d201+2
  1352 				;
  1353 				; 	lda trackn_audf+1
  1354 				; 	ldx trackn_audc+1
  1355 				; 	sta $d200+4
  1356 				; 	stx $d201+4
  1357 				;
  1358 				; 	lda trackn_audf+2
  1359 				; 	ldx trackn_audc+2
  1360 				; 	sta $d200+6
  1361 				; 	stx $d201+6
  1362 				; .endif
  1363
  1364
  1365 				; 	tya
  1366 				; .if .def IRQ_15KHz
  1367 				; 	ora #1			; force 15KHz clock
  1368 				; .else
  1369 				; 	ora #1+64			; force 15KHz clock, force first voice in 1.79MHz
  1370 				; .endif
  1371 				; 	tay
  1372
  1373 3B5C 8C 08 D2		 	sty $d208
  1374
  1375
  1376 3B5F 60				rts
  1377
  1378 3B60			RMTPLAYEREND
   743
   744
   745 				;================================================================================
   746
   747 3B60			END_RMT_PLAYER_AREA
   748
   749 				;================================================================================
   750
   751 3B60				org Prog_start
   752
   753 4000			InitSystem
   754 4000-8DAA> A9 01			lda #1
   755 4002 8D 44 02			sta COLDST		; do cold start when pressing reset key
   756
   757 4005				ClearSystem
Macro: CLEARSYSTEM [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 4005 18				      clc
     6 4006 D8				      cld
     8 4007 78				      sei
    10 4008 A9 00			      lda #0
    11 400A 8D 0E D2			      sta IRQEN	; clear interrupts and screen
    12 400D 8D 0E D4			      sta NMIEN
    14 4010 8D 00 D4			      sta DMACTL
    15 4013 8D 1A D0			      sta COLBK
    17 4016 8D 1D D0			      sta GRACTL	; clear P/M
    18 4019 8D 0D D0			      sta GRAFP0
    19 401C 8D 0E D0			      sta GRAFP1
    20 401F 8D 0F D0			      sta GRAFP2
    21 4022 8D 10 D0			      sta GRAFP3
    22 4025 8D 11 D0			      sta GRAFM
    24 4028 8D 00 D0			      sta HPOSP0
    25 402B 8D 01 D0			      sta HPOSP1
    26 402E 8D 02 D0			      sta HPOSP2
    27 4031 8D 03 D0			      sta HPOSP3
    28 4034 8D 04 D0			      sta HPOSM0
    29 4037 8D 05 D0			      sta HPOSM1
    30 403A 8D 06 D0			      sta HPOSM2
    31 403D 8D 07 D0			      sta HPOSM3
    33 4040 8D 1B D0			      sta PRIOR	; clear GTIA also
    35 4043 8D 08 D2			      sta AUDCTL	; clear sound
    36 4046 8D 01 D2			      sta AUDC1
    37 4049 8D 03 D2			      sta AUDC2
    38 404C 8D 05 D2			      sta AUDC3
    39 404F 8D 07 D2			      sta AUDC4
    41 4052 A9 03			      lda #3
    42 4054 8D 0F D2			      sta SKCTL
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
   758
   759 4057				DisableBasic
Macro: DISABLEBASIC [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     6 4057 AD 01 D3			         lda PORTB	; deactivate Basic
     7 405A 09 02			         ora #%00000010
     8 405C 8D 01 D3			         sta PORTB
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
   760 405F				DisableOperativeSystem
Macro: DISABLEOPERATIVESYSTEM [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     6 405F AD 01 D3			         lda PORTB	; deactivate Operative System
     7 4062 29 FE			         and #%11111110
     8 4064 8D 01 D3			         sta PORTB
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
   761
   762
   763 				;================================================================================
   764
   765 4067				icl "pad_title.asm"
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
     1
     2 				; set starting high score and level
     3 4067 A9 00			lda #0
     4 4069 85 D5			sta m_sessionHighLevel
     5
     6 406B 85 D2			sta m_sessionHighScore
     7 406D 85 D4			sta m_sessionHighScore+2
     8 406F A9 10			lda #$10		; start with a high score of 10000 (for casual difficulty)
     9 4071 85 D3			sta m_sessionHighScore+1
    10
    11 				; init options
    12 4073 A9 00			lda #0
    13 					;sta m_selectedVausIndex
    14 4075 85 D8			sta m_selectedLevelIndex
    15 4077 85 D9			sta m_selectedControllerIndex
    16 4079 85 E0			sta m_usePaddleControllerFlag
    17 					;lda #1	; casual
    18 407B A9 03			lda #3	; extra
    19 407D 85 D6			sta m_difficultyIndex
    20 407F A9 02			lda #2
    21 4081 85 D7			sta m_selectedMouseAccel
    22 4083 A9 03			lda #3	; 100%
    23 4085 85 DA			sta m_selectedPaddleAngleIndex
    24
    25 4087 A9 FF			lda #%11111111
    26 4089 85 DB			sta m_triggerTypeMask
    27
    28 				; init difficulty parameters (for arcade)
    29 				; 	lda #STARTING_BALL_SPEED
    30 				; 	sta m_startingBallSpeed
    31 				; 	lda #TOP_BORDER_BALL_SPEED
    32 				; 	sta m_topBorderBallSpeed
    33 				; 	lda #MAX_BALL_SPEED
    34 				; 	sta m_maxBallSpeed
    35 				; 	lda #BALL_SPEEDUP_HALF_SECONDS
    36 				; 	sta m_ballSpeedUpHalfSeconds
    37
    38 				; init difficulty parameters (for casual and extra modes)
    39 408B A9 03			lda #[STARTING_BALL_SPEED-2]
    40 408D 85 DC			sta m_startingBallSpeed
    41 408F A9 05			lda #[TOP_BORDER_BALL_SPEED-1]
    42 4091 85 DD			sta m_topBorderBallSpeed
    43 4093 A9 06			lda #[MAX_BALL_SPEED-1]
    44 4095 85 DE			sta m_maxBallSpeed
    45 4097 A9 50			lda #[BALL_SPEEDUP_HALF_SECONDS*2]
    46 4099 85 DF			sta m_ballSpeedUpHalfSeconds
    47
    48 				; unlock first 3 normal and extra levels
    49 409B A9 80			lda #128
    50 409D 8D 7E 99			sta TabLevelUnlocked
    51 40A0 8D 7F 99			sta TabLevelUnlocked+1
    52 40A3 8D 80 99			sta TabLevelUnlocked+2
    53
    54 40A6 8D E9 99			sta TabLevelUnlockedExtra
    55 40A9 8D EA 99			sta TabLevelUnlockedExtra+1
    56 40AC 8D EB 99			sta TabLevelUnlockedExtra+2
    57
    58
    59 40AF			StartGame
    60 40AF 20 AA 44			jsr InitAll
    61
    62 40B2				SetDisplayListAddress DL2_address
Macro: SETDISPLAYLISTADDRESS [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 40B2 A9 22			      lda #<DL2_ADDRESS
     6 40B4 8D 02 D4			      sta DLISTL
     7 40B7 A9 A0			      lda #>DL2_ADDRESS
     8 40B9 8D 03 D4			      sta DLISTL+1
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
    63
    64 40BC				SetFontAddress Atari_font_address
Macro: SETFONTADDRESS [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 40BC A9 B0			      lda #>ATARI_FONT_ADDRESS
     6 40BE 8D 09 D4			      sta CHBASE
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
    65
    66 40C1				SetColor 1, 12
Macro: SETCOLOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     6 40C1 A9 0C			          lda #12
     7 40C3 8D 17 D0			          sta COLPF0+1
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
    67 40C6				SetColor 2, 0
Macro: SETCOLOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     6 40C6 A9 00			          lda #0
     7 40C8 8D 18 D0			          sta COLPF0+2
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
    68
    69 				.if .def PAL_VERSION
    70 40CB A9 10			lda #$10
    71 				.else
    72 					lda #$20
    73 				.endif
    74 40CD 8D 12 D0			sta COLPM0
    75 40D0 8D 13 D0			sta COLPM1
    76 40D3 8D 14 D0			sta COLPM2
    77 40D6 8D 15 D0			sta COLPM3
    78
    79 40D9 A9 03			lda #3
    80 40DB 8D 08 D0			sta SIZEP0
    81 40DE 8D 09 D0			sta SIZEP1
    82 40E1 8D 0A D0			sta SIZEP2
    83 40E4 8D 0B D0			sta SIZEP3
    84
    85 40E7 A9 00			lda #0
    86 40E9 8D 0C D0			sta SIZEM
    87
    88 40EC				VcountWait 128
Macro: VCOUNTWAIT [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 40EC A9 80			      lda #128
     6 40EE CD 0B D4		VWait1	 cmp VCOUNT
     7 40F1 D0 FB			      bne VWait1
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
    89
    90 				; show presentation screen
    91 40F3 A9 21			lda #[DV_DMA_ON | DV_NARROW_PF]
    92 40F5 8D 00 D4			sta DMACTL
    93
    94
    95 				; only run in the correct system (show "wrong system" message)
    96 40F8 AD 14 D0			lda PAL
    97 40FB 29 0E			and #14
    98
    99 				.if .def PAL_VERSION
   100 40FD F0 17			beq CorrectVideoSystem
   101 					
   102 					//SetDisplayListAddress DL_PAL_address
   103 					
   104 40FF				SetDisplayListAddress DL_NTSC_address
Macro: SETDISPLAYLISTADDRESS [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 40FF A9 A6			      lda #<DL_NTSC_ADDRESS
     6 4101 8D 02 D4			      sta DLISTL
     7 4104 A9 A2			      lda #>DL_NTSC_ADDRESS
     8 4106 8D 03 D4			      sta DLISTL+1
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
   105 4109 A9 D3			lda #<DL_PAL_data_address
   106 410B 8D AE A2			sta DL_NTSC_message
   107 410E A9 A2			lda #>DL_PAL_data_address
   108 4110 8D AF A2			sta DL_NTSC_message+1
   109 				.else
   110 					bne CorrectVideoSystem
   111 					
   112 					SetDisplayListAddress DL_NTSC_address
   113 				.endif
   114
   115 4113			IncorrectVideoSystem
   116 4113 4C 13 41			jmp IncorrectVideoSystem
   117
   118 4116			CorrectVideoSystem
   119
   120 				; init DLI for the tittle screen
   121 4116				SetVector NMIH_VECTOR, Tittle_score_DLI1_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 4116 A9 DA			      lda #<TITTLE_SCORE_DLI1_ADDRESS
     6 4118 8D FA FF			      sta NMIH_VECTOR
     7 411B A9 63			      lda #>TITTLE_SCORE_DLI1_ADDRESS
     8 411D 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
   122
   123
   124 				; init RMT menu music
   125 4120 A9 00			lda #0
   126 4122 8D 05 39			sta RMTGLOBALVOLUMEFADE
   127
   128 4125 A2 00			ldx #<RMT_song_address		; low byte of RMT module to X reg
   129 4127 A0 28			ldy #>RMT_song_address		; hi byte of RMT module to Y reg
   130 4129 A9 00			lda #0					; starting song line 0-255 to A reg
   131 412B 20 00 38			jsr RASTERMUSICTRACKER		; Init
   132
   133
   134 				; init interruptions
   135 412E A9 80			lda #%10000000		; only DLI's on
   136 4130 8D 0E D4			sta NMIEN
   137
   138
   139 				;----------------------------------------
   140 				; init old input vars
   141 4133 A9 00			lda #0
   142 4135 85 B3			sta m_oldKeyPressedFlag
   143 4137 A9 FF			lda #255
   144 4139 85 B5			sta m_oldKeyPressedValue
   145
   146 413B A9 80			lda #128		; to fix a problem when selecting paddles with a mouse connected
   147 413D 85 B7			sta m_oldTriggerPressedFlag
   148
   149
   150 				; init RMT vcount update system
   151 413F AD 0B D4			lda VCOUNT
   152 4142 85 B8			sta m_currentVcountLineRMT
   153
   154
   155 4144			sg_loop
   156
   157 				; update RMT vcount update system
   158 4144 A5 B8			lda m_currentVcountLineRMT
   159 4146 18				clc
   160 4147 69 27			adc #RMT_UPDATE_VCOUNT_LINES
   161 4149 C9 9C			cmp #[MAX_VCOUNT_VALUE+1]
   162 414B 90 02			bcc sg_vcount_normal
   163
   164 414D			sg_vcount_overflow
   165 414D E9 9C			sbc #[MAX_VCOUNT_VALUE+1]
   166
   167 414F			sg_vcount_normal
   168 414F 85 B9			sta m_nextVcountLineRMT		; set next target value
   169
   170
   171 				; wait until reached or surpassed target vcount value
   172 4151 C5 B8			cmp m_currentVcountLineRMT
   173 4153 90 0E			bcc sg_next_vcount_lower
   174
   175 4155			sg_next_vcount_bigger
   176 4155 AD 0B D4			lda VCOUNT
   177 4158 C5 B8			cmp m_currentVcountLineRMT
   178 415A 90 15			bcc sg_play_music_frame
   179 415C C5 B9			cmp m_nextVcountLineRMT
   180 415E B0 11			bcs sg_play_music_frame
   181
   182 4160 4C 55 41			jmp sg_next_vcount_bigger	; jmp sg_check_input_logic?, return to a special point!
   183
   184
   185 4163			sg_next_vcount_lower
   186 4163 AD 0B D4			lda VCOUNT
   187 4166 C5 B8			cmp m_currentVcountLineRMT
   188 4168 B0 F9			bcs sg_next_vcount_lower		; bcs sg_check_input_logic?, return to a special point!
   189 416A C5 B9			cmp m_nextVcountLineRMT
   190 416C B0 03			bcs sg_play_music_frame
   191
   192 416E 4C 63 41			jmp sg_next_vcount_lower		; jmp sg_check_input_logic?, return to a special point!
   193
   194
   195 4171			sg_play_music_frame
   196 				; play RMT music
   197 4171 20 03 38			jsr RASTERMUSICTRACKER+3		; play one frame
   198
   199
   200 4174 A5 B9			lda m_nextVcountLineRMT
   201 4176 85 B8			sta m_currentVcountLineRMT
   202
   203
   204 				;----------------------------------------
   205 				; check fade out logic
   206 4178 AD 05 39			lda RMTGLOBALVOLUMEFADE
   207 417B F0 18			beq sg_check_input_logic
   208
   209 417D C6 BA			dec m_musicFadeOutCounter
   210 417F D0 C3			bne sg_loop
   211
   212 4181 A9 1C			lda #MUSIC_FADEOUT_VCOUNT_STEPS
   213 4183 85 BA			sta m_musicFadeOutCounter
   214
   215 4185 AD 05 39			lda RMTGLOBALVOLUMEFADE
   216 4188 18				clc
   217 4189 69 10			adc #$10		; this uses only the high 4 bits
   218 418B 8D 05 39			sta RMTGLOBALVOLUMEFADE
   219
   220 418E C9 D0			cmp #$D0		; max fade out substract value
   221 4190 90 B2			bcc sg_loop
   222
   223 4192 4C 86 44			jmp sg_start_game
   224
   225
   226 				;----------------------------------------
   227 				; check keys input logic
   228 4195			sg_check_input_logic
   229 4195 AD 0F D2			lda SKCTL
   230 4198 29 04			and #4	; a key pressed ?
   231 419A F0 0B			beq sg_key_pressed_logic
   232
   233 				; no key pressed
   234 419C A9 00			lda #0
   235 419E 85 B2			sta m_newKeyPressedFlag
   236
   237 41A0 A9 FF			lda #255		; A + SHIFT + CONTROL (used as a "no-key" value)
   238 41A2 85 B4			sta m_newKeyPressedValue
   239
   240 41A4 4C 55 44			jmp sg_check_trigger_pressed		; could be key released logic..
   241
   242
   243 41A7			sg_key_pressed_logic
   244 41A7 A9 80			lda #128
   245 41A9 85 B2			sta m_newKeyPressedFlag
   246
   247 41AB AD 09 D2			lda KBCODE
   248 41AE 29 3F			and #%00111111		; bit7 -> control, bit6 -> shift
   249 41B0 85 B4			sta m_newKeyPressedValue
   250
   251 41B2 C5 B5			cmp m_oldKeyPressedValue
   252 41B4 D0 03			bne sg_check_difficulty_key
   253
   254 41B6 4C 55 44			jmp sg_check_trigger_pressed		; could be key released logic..
   255
   256
   257 				;----------------------------------------
   258 41B9			sg_check_difficulty_key
   259 					;cmp #58		; "D"
   260 41B9 C9 3D			cmp #61		; "G"
   261 41BB F0 03			beq sg_change_difficulty
   262 41BD 4C 51 42			jmp sg_check_controller_key
   263
   264 				; change difficulty level
   265 41C0			sg_change_difficulty
   266 41C0 A6 D6			ldx m_difficultyIndex
   267 41C2 E8				inx
   268 41C3 E0 04			cpx #4
   269 41C5 D0 02			bne sg_set_difficulty
   270 41C7 A2 00			ldx #0
   271 41C9			sg_set_difficulty
   272 41C9 86 D6			stx m_difficultyIndex
   273
   274 41CB F0 22			beq sg_difficulty1			; difficulty easy (speed is always the minimun)
   275
   276 41CD E0 01			cpx #1
   277 41CF F0 19			beq sg_difficulty2
   278
   279 41D1 E0 02			cpx #2
   280 41D3 F0 2D			beq sg_difficulty3
   281
   282 41D5			sg_difficulty4					; difficulty extra (casual speed)
   283 41D5 A2 12			ldx #[6*3]
   284
   285 				; reset selected extra level
   286 41D7 A9 00			lda #0
   287 41D9 85 D8			sta m_selectedLevelIndex
   288 41DB AD 9A 99			lda TabLevelNameExtra
   289 41DE 8D 45 A1			sta DL2_options_line+BYTES_LINE*3+23
   290 41E1 AD 9B 99			lda TabLevelNameExtra+1
   291 41E4 8D 46 A1			sta DL2_options_line+BYTES_LINE*3+24
   292
   293 41E7 4C 17 42			jmp sg_difficulty_speed_med
   294
   295
   296 41EA			sg_difficulty2					; difficulty casual
   297 41EA A2 06			ldx #6
   298
   299 41EC 4C 17 42			jmp sg_difficulty_speed_med
   300
   301
   302 41EF			sg_difficulty1					; difficulty easy
   303 				; reset selected normal level
   304 41EF A9 00			lda #0
   305 41F1 85 D8			sta m_selectedLevelIndex
   306 41F3 AD 31 99			lda TabLevelName
   307 41F6 8D 45 A1			sta DL2_options_line+BYTES_LINE*3+23
   308 41F9 AD 32 99			lda TabLevelName+1
   309 41FC 8D 46 A1			sta DL2_options_line+BYTES_LINE*3+24
   310
   311 41FF 4C 27 42			jmp sg_set_difficulty_text
   312
   313
   314 4202			sg_difficulty3					; difficulty arcade
   315 4202 A2 0C			ldx #[6*2]
   316
   317
   318 4204			sg_difficulty_speed_hard
   319 4204 A9 05			lda #STARTING_BALL_SPEED
   320 4206 85 DC			sta m_startingBallSpeed
   321 4208 A9 06			lda #TOP_BORDER_BALL_SPEED
   322 420A 85 DD			sta m_topBorderBallSpeed
   323 420C A9 07			lda #MAX_BALL_SPEED
   324 420E 85 DE			sta m_maxBallSpeed
   325 4210 A9 28			lda #BALL_SPEEDUP_HALF_SECONDS
   326 4212 85 DF			sta m_ballSpeedUpHalfSeconds
   327
   328 4214 4C 27 42			jmp sg_set_difficulty_text
   329
   330
   331 4217			sg_difficulty_speed_med
   332 4217 A9 03			lda #[STARTING_BALL_SPEED-2]
   333 4219 85 DC			sta m_startingBallSpeed
   334 421B A9 05			lda #[TOP_BORDER_BALL_SPEED-1]
   335 421D 85 DD			sta m_topBorderBallSpeed
   336 421F A9 06			lda #[MAX_BALL_SPEED-1]
   337 4221 85 DE			sta m_maxBallSpeed
   338 4223 A9 50			lda #[BALL_SPEEDUP_HALF_SECONDS*2]
   339 4225 85 DF			sta m_ballSpeedUpHalfSeconds
   340
   341
   342 4227			sg_set_difficulty_text
   343 = 0000				?rowNum = 0
   344 					.rept 6
   345 						LDA TEXT_DIFFICULTY1+?ROWNUM,X
   346 						STA DL2_OPTIONS_LINE+18+?ROWNUM
   347 						?ROWNUM ++
   348 					.endr
Source: REPT
   345 4227 BD AE A1				LDA TEXT_DIFFICULTY1+?ROWNUM,X
   345 422A 8D E0 A0				STA DL2_OPTIONS_LINE+18+?ROWNUM
   345 = 0001					?ROWNUM ++
   345 422D BD AF A1				LDA TEXT_DIFFICULTY1+?ROWNUM,X
   345 4230 8D E1 A0				STA DL2_OPTIONS_LINE+18+?ROWNUM
   345 = 0002					?ROWNUM ++
   345 4233 BD B0 A1				LDA TEXT_DIFFICULTY1+?ROWNUM,X
   345 4236 8D E2 A0				STA DL2_OPTIONS_LINE+18+?ROWNUM
   345 = 0003					?ROWNUM ++
   345 4239 BD B1 A1				LDA TEXT_DIFFICULTY1+?ROWNUM,X
   345 423C 8D E3 A0				STA DL2_OPTIONS_LINE+18+?ROWNUM
   345 = 0004					?ROWNUM ++
   345 423F BD B2 A1				LDA TEXT_DIFFICULTY1+?ROWNUM,X
   345 4242 8D E4 A0				STA DL2_OPTIONS_LINE+18+?ROWNUM
   345 = 0005					?ROWNUM ++
   345 4245 BD B3 A1				LDA TEXT_DIFFICULTY1+?ROWNUM,X
   345 4248 8D E5 A0				STA DL2_OPTIONS_LINE+18+?ROWNUM
   345 = 0006					?ROWNUM ++
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
   349
   350
   351 424B 20 EA 4B			jsr RestoreGameTypeHighScore
   352
   353
   354 424E 4C 6B 44			jmp sg_end_input_logic
   355
   356
   357 				;----------------------------------------
   358 				; sg_check_vaus_key
   359 				; 	cmp #16		; "V"
   360 				; 	bne sg_check_controller_key
   361 				;
   362 				; ; change vaus type (not working yet!)
   363 				; 	ldx m_selectedVausIndex
   364 				; 	inx
   365 				; 	cpx #1 ;2
   366 				; 	bne sg_set_vaus_type
   367 				; 	ldx #0
   368 				; sg_set_vaus_type
   369 				; 	stx m_selectedVausIndex
   370 				;
   371 				; 	beq sg_vaus1
   372 				;
   373 				; 	ldx #6
   374 				;
   375 				; sg_vaus1
   376 				; 	lda Text_vaus_type1,x
   377 				; 	sta DL2_options_line+BYTES_LINE+18
   378 				; 	lda Text_vaus_type1+1,x
   379 				; 	sta DL2_options_line+BYTES_LINE+19
   380 				; 	lda Text_vaus_type1+2,x
   381 				; 	sta DL2_options_line+BYTES_LINE+20
   382 				; 	lda Text_vaus_type1+3,x
   383 				; 	sta DL2_options_line+BYTES_LINE+21
   384 				; 	lda Text_vaus_type1+4,x
   385 				; 	sta DL2_options_line+BYTES_LINE+22
   386 				; 	lda Text_vaus_type1+5,x
   387 				; 	sta DL2_options_line+BYTES_LINE+23
   388 				;
   389 				; 	jmp sg_end_input_logic
   390
   391
   392 				;----------------------------------------
   393 4251			sg_check_controller_key
   394 4251 C9 12			cmp #18		; "C"
   395 4253 F0 03			beq sg_controller_key
   396 4255 4C A6 43			jmp sg_check_mouse_key
   397
   398 4258			sg_controller_key
   399 				; change controller type
   400 4258 A6 D9			ldx m_selectedControllerIndex
   401 425A E8				inx
   402 425B E0 08			cpx #8
   403 425D D0 02			bne sg_set_controller_index
   404 425F A2 00			ldx #0
   405 4261			sg_set_controller_index
   406 4261 86 D9			stx m_selectedControllerIndex
   407
   408 4263 F0 11			beq sg_controller_type1
   409 4265 E0 01			cpx #1
   410 4267 F0 6E			beq sg_controller_type2
   411 4269 E0 02			cpx #2
   412 426B F0 48			beq sg_controller_type3
   413 426D E0 03			cpx #3
   414 426F D0 6B			bne sg_check_paddle_controllers
   415
   416 4271			sg_controller_type4
   417 4271 A2 18			ldx #[8*3]
   418
   419 4273 4C 3E 43			jmp sg_controller_type_amiga
   420
   421
   422 4276			sg_controller_type1
   423 4276 A9 00			lda #<TabGetLowNibble
   424 4278 8D 41 46			sta IG_nibbleTable+1
   425 427B A9 8E			lda #>TabGetLowNibble
   426 427D 8D 42 46			sta IG_nibbleTable+2
   427
   428 4280 A9 00			lda #<TabGetLowNibble
   429 4282 8D 34 66			sta DLI_nibbleTable+1
   430 4285 A9 8E			lda #>TabGetLowNibble
   431 4287 8D 35 66			sta DLI_nibbleTable+2
   432
   433 				; use TRIG0 ($D010) to get the trigger value
   434 428A A9 10			lda #<TRIG0
   435 428C 8D 56 44			sta TRIGGER_address1+1
   436 428F 8D 7B 49			sta TRIGGER_address3+1
   437 4292 8D DF 49			sta TRIGGER_address4+1
   438
   439 4295 A9 D0			lda #>TRIG0
   440 4297 8D 57 44			sta TRIGGER_address1+2
   441 429A 8D 7C 49			sta TRIGGER_address3+2
   442 429D 8D E0 49			sta TRIGGER_address4+2
   443
   444 42A0 A9 00			lda #0
   445 42A2 85 E0			sta m_usePaddleControllerFlag
   446
   447 42A4 A9 FF			lda #%11111111
   448 42A6 85 DB			sta m_triggerTypeMask
   449
   450 				; show mouse accel info line
   451 42A8 A9 0E			lda #<[DL2_options_line+BYTES_LINE*2]
   452 42AA 8D 3F A0			sta DL2_LMS_options_line3
   453 42AD A9 A1			lda #>[DL2_options_line+BYTES_LINE*2]
   454 42AF 8D 40 A0			sta DL2_LMS_options_line3+1
   455
   456 42B2 4C 5A 43			jmp sg_controller_type_atari
   457
   458
   459 42B5			sg_controller_type3
   460 42B5 A2 10			ldx #[8*2]
   461
   462 42B7 A9 00			lda #<TabGetHighNibble
   463 42B9 8D 41 46			sta IG_nibbleTable+1
   464 42BC A9 8F			lda #>TabGetHighNibble
   465 42BE 8D 42 46			sta IG_nibbleTable+2
   466
   467 42C1 A9 00			lda #<TabGetHighNibble
   468 42C3 8D 34 66			sta DLI_nibbleTable+1
   469 42C6 A9 8F			lda #>TabGetHighNibble
   470 42C8 8D 35 66			sta DLI_nibbleTable+2
   471
   472 				; use TRIG1 ($D011) to get the trigger value
   473 42CB EE 56 44			inc TRIGGER_address1+1
   474 42CE EE 7B 49			inc TRIGGER_address3+1
   475 42D1 EE DF 49			inc TRIGGER_address4+1
   476
   477 42D4 4C 5A 43			jmp sg_controller_type_atari
   478
   479
   480 42D7			sg_controller_type2
   481 42D7 A2 08			ldx #8
   482
   483 				; 	lda #<TabGetLowNibble
   484 				; 	sta IG_nibbleTable+1
   485 				; 	lda #>TabGetLowNibble
   486 				; 	sta IG_nibbleTable+2
   487 				;
   488 				; 	lda #<TabGetLowNibble
   489 				; 	sta DLI_nibbleTable+1
   490 				; 	lda #>TabGetLowNibble
   491 				; 	sta DLI_nibbleTable+2
   492
   493 42D9 4C 3E 43			jmp sg_controller_type_amiga
   494
   495
   496 42DC			sg_check_paddle_controllers
   497 				; 	cpx #4
   498 				; 	beq sg_controller_type5
   499 42DC E0 05			cpx #5
   500 42DE F0 3A			beq sg_controller_type6
   501 42E0 E0 06			cpx #6
   502 42E2 F0 42			beq sg_controller_type7
   503 42E4 E0 07			cpx #7
   504 42E6 F0 4A			beq sg_controller_type8
   505
   506 42E8			sg_controller_type5
   507 42E8 A2 20			ldx #[8*4]
   508
   509 42EA A9 80			lda #128
   510 42EC 85 E0			sta m_usePaddleControllerFlag
   511
   512 				; use PORTA ($D300) to get the triggers (PTRIG0..3)
   513 42EE A9 00			lda #<PORTA
   514 42F0 8D 56 44			sta TRIGGER_address1+1
   515 42F3 8D 7B 49			sta TRIGGER_address3+1
   516 42F6 8D DF 49			sta TRIGGER_address4+1
   517
   518 42F9 A9 D3			lda #>PORTA
   519 42FB 8D 57 44			sta TRIGGER_address1+2
   520 42FE 8D 7C 49			sta TRIGGER_address3+2
   521 4301 8D E0 49			sta TRIGGER_address4+2
   522
   523 4304 A9 04			lda #%00000100			; PTRIG0
   524 4306 85 DB			sta m_triggerTypeMask
   525
   526 4308 A9 00			lda #<POT0
   527 430A 8D 53 5E			sta POT_address1+1
   528
   529 				; show paddle angle info line
   530 430D A9 4E			lda #<[DL2_options_line+BYTES_LINE*4]
   531 430F 8D 3F A0			sta DL2_LMS_options_line3
   532 4312 A9 A1			lda #>[DL2_options_line+BYTES_LINE*4]
   533 4314 8D 40 A0			sta DL2_LMS_options_line3+1
   534
   535 4317 4C 73 43			jmp sg_set_controller_text
   536
   537 431A			sg_controller_type6
   538 431A A2 28			ldx #[8*5]
   539
   540 431C A9 08			lda #%00001000			; PTRIG1
   541 431E 85 DB			sta m_triggerTypeMask
   542
   543 4320 EE 53 5E			inc POT_address1+1
   544
   545 4323 4C 73 43			jmp sg_set_controller_text
   546
   547 4326			sg_controller_type7
   548 4326 A2 30			ldx #[8*6]
   549
   550 4328 A9 40			lda #%01000000			; PTRIG2
   551 432A 85 DB			sta m_triggerTypeMask
   552
   553 432C EE 53 5E			inc POT_address1+1
   554
   555 432F 4C 73 43			jmp sg_set_controller_text
   556
   557 4332			sg_controller_type8
   558 4332 A2 38			ldx #[8*7]
   559
   560 4334 A9 80			lda #%10000000			; PTRIG3
   561 4336 85 DB			sta m_triggerTypeMask
   562
   563 4338 EE 53 5E			inc POT_address1+1
   564
   565 433B 4C 73 43			jmp sg_set_controller_text
   566
   567
   568 433E			sg_controller_type_amiga
   569 433E A9 0A			lda #%1010
   570 4340 8D 37 66			sta dli_mouseTypeHMoveMask+1
   571
   572 4343 A9 78			lda #<TabNextValueMovingRightAmiga
   573 4345 8D 3D 66			sta dli_checkMoveRight+1
   574 4348 A9 92			lda #>TabNextValueMovingRightAmiga
   575 434A 8D 3E 66			sta dli_checkMoveRight+2
   576
   577 434D A9 87			lda #<TabNextValueMovingLeftAmiga
   578 434F 8D 70 66			sta dli_checkMoveLeft+1
   579 4352 A9 92			lda #>TabNextValueMovingLeftAmiga
   580 4354 8D 71 66			sta dli_checkMoveLeft+2
   581
   582 4357 4C 73 43			jmp sg_set_controller_text
   583
   584
   585 435A			sg_controller_type_atari
   586 435A A9 03			lda #%11
   587 435C 8D 37 66			sta dli_mouseTypeHMoveMask+1
   588
   589 435F A9 74			lda #<TabNextValueMovingRight
   590 4361 8D 3D 66			sta dli_checkMoveRight+1
   591 4364 A9 92			lda #>TabNextValueMovingRight
   592 4366 8D 3E 66			sta dli_checkMoveRight+2
   593
   594 4369 A9 83			lda #<TabNextValueMovingLeft
   595 436B 8D 70 66			sta dli_checkMoveLeft+1
   596 436E A9 92			lda #>TabNextValueMovingLeft
   597 4370 8D 71 66			sta dli_checkMoveLeft+2
   598
   599
   600 4373			sg_set_controller_text
   601 = 0000				?rowNum = 0
   602 					.rept 8
   603 						LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   604 						STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   605 						?ROWNUM ++
   606 					.endr
Source: REPT
   603 4373 BD C6 A1				LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   603 4376 8D 01 A1				STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   603 = 0001					?ROWNUM ++
   603 4379 BD C7 A1				LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   603 437C 8D 02 A1				STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   603 = 0002					?ROWNUM ++
   603 437F BD C8 A1				LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   603 4382 8D 03 A1				STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   603 = 0003					?ROWNUM ++
   603 4385 BD C9 A1				LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   603 4388 8D 04 A1				STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   603 = 0004					?ROWNUM ++
   603 438B BD CA A1				LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   603 438E 8D 05 A1				STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   603 = 0005					?ROWNUM ++
   603 4391 BD CB A1				LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   603 4394 8D 06 A1				STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   603 = 0006					?ROWNUM ++
   603 4397 BD CC A1				LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   603 439A 8D 07 A1				STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   603 = 0007					?ROWNUM ++
   603 439D BD CD A1				LDA TEXT_CONTROLLER_TYPE1+?ROWNUM,X
   603 43A0 8D 08 A1				STA DL2_OPTIONS_LINE+BYTES_LINE+19+?ROWNUM
   603 = 0008					?ROWNUM ++
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
   607
   608 43A3 4C 6B 44			jmp sg_end_input_logic
   609
   610
   611 				;----------------------------------------
   612 43A6			sg_check_mouse_key
   613 43A6 C9 25			cmp #37		; "M"
   614 43A8 D0 1B			bne sg_check_level_key
   615
   616 				; change max mouse speed step value, two hard coded values in the DLI code
   617 43AA A6 D7			ldx m_selectedMouseAccel
   618 43AC E8				inx
   619 43AD E0 06			cpx #6
   620 43AF D0 02			bne sg_set_max_accel
   621 43B1 A2 02			ldx #MIN_MOUSE_STEP		; (2)
   622 43B3			sg_set_max_accel
   623 43B3 86 D7			stx m_selectedMouseAccel
   624
   625 43B5 8A				txa
   626 43B6 18				clc
   627 43B7 69 10			adc #"0"
   628 43B9 8D 25 A1			sta DL2_options_line+BYTES_LINE*2+23
   629
   630 					;inx		; add 1 to displayed value (min mouse step should be 1, for no acceleration)
   631 43BC 8E 52 66			stx dli_mouse_accel_step_value1+1
   632 43BF 8E 85 66			stx dli_mouse_accel_step_value2+1
   633
   634 43C2 4C 6B 44			jmp sg_end_input_logic
   635
   636
   637 				;----------------------------------------
   638 43C5			sg_check_level_key
   639 43C5 C9 3E			cmp #62		; "S"
   640 43C7 D0 48			bne sg_check_paddle_key
   641
   642 				; change starting level
   643 43C9 A6 D8			ldx m_selectedLevelIndex
   644
   645 43CB A5 D6			lda m_difficultyIndex
   646 43CD C9 03			cmp #3	; "extra" game mode
   647 43CF B0 20			bcs sg_find_extra_level_loop
   648
   649 43D1			sg_find_level_loop
   650 43D1 E8				inx
   651 43D2 E0 1C			cpx #MAX_LEVEL_NUM
   652 43D4 D0 02			bne sg_set_level
   653 43D6 A2 00			ldx #0
   654 43D8			sg_set_level
   655 43D8 86 D8			stx m_selectedLevelIndex
   656
   657 43DA BD 7E 99			lda TabLevelUnlocked,x
   658 43DD 10 F2			bpl sg_find_level_loop
   659
   660 43DF 8A				txa
   661 43E0 0A				asl
   662 43E1 AA				tax
   663 43E2 BD 31 99			lda TabLevelName,x
   664 43E5 8D 45 A1			sta DL2_options_line+BYTES_LINE*3+23
   665 43E8 BD 32 99			lda TabLevelName+1,x
   666 43EB 8D 46 A1			sta DL2_options_line+BYTES_LINE*3+24
   667
   668 43EE 4C 6B 44			jmp sg_end_input_logic
   669
   670
   671 43F1			sg_find_extra_level_loop
   672 43F1 E8				inx
   673 43F2 E0 1B			cpx #MAX_LEVEL_NUM_EXTRA
   674 43F4 D0 02			bne sg_set_extra_level
   675 43F6 A2 00			ldx #0
   676 43F8			sg_set_extra_level
   677 43F8 86 D8			stx m_selectedLevelIndex
   678
   679 43FA BD E9 99			lda TabLevelUnlockedExtra,x
   680 43FD 10 F2			bpl sg_find_extra_level_loop
   681
   682 43FF 8A				txa
   683 4400 0A				asl
   684 4401 AA				tax
   685 4402 BD 9A 99			lda TabLevelNameExtra,x
   686 4405 8D 45 A1			sta DL2_options_line+BYTES_LINE*3+23
   687 4408 BD 9B 99			lda TabLevelNameExtra+1,x
   688 440B 8D 46 A1			sta DL2_options_line+BYTES_LINE*3+24
   689
   690 440E 4C 6B 44			jmp sg_end_input_logic
   691
   692
   693 				;----------------------------------------
   694 4411			sg_check_paddle_key
   695 4411 C9 0A			cmp #10		; "P"
   696 4413 D0 3C			bne sg_check_return_key
   697
   698 				; change paddle angle factor
   699 4415 A6 DA			ldx m_selectedPaddleAngleIndex
   700 4417 E8				inx
   701 4418 E0 04			cpx #4
   702 441A D0 02			bne sg_set_paddle_angle
   703 441C A2 00			ldx #0
   704 441E			sg_set_paddle_angle
   705 441E 86 DA			stx m_selectedPaddleAngleIndex
   706
   707 4420 F0 14			beq sg_set_paddle_angle_text
   708 4422 E0 01			cpx #1
   709 4424 F0 09			beq sg_set_paddle_angle_2
   710 4426 E0 02			cpx #2
   711 4428 F0 0A			beq sg_set_paddle_angle_3
   712
   713 442A			sg_set_paddle_angle_4
   714 442A A2 0C			ldx #[4*3]
   715 442C 4C 36 44			jmp sg_set_paddle_angle_text
   716
   717 442F			sg_set_paddle_angle_2
   718 442F A2 04			ldx #4
   719 4431 4C 36 44			jmp sg_set_paddle_angle_text
   720
   721 4434			sg_set_paddle_angle_3
   722 4434 A2 08			ldx #[4*2]
   723
   724 4436			sg_set_paddle_angle_text
   725 = 0000				?rowNum = 0
   726 					.rept 4
   727 						LDA TEXT_PADDLE_ANGLE1+?ROWNUM,X
   728 						STA DL2_OPTIONS_LINE+BYTES_LINE*4+21+?ROWNUM
   729 						?ROWNUM ++
   730 					.endr
Source: REPT
   727 4436 BD 06 A2				LDA TEXT_PADDLE_ANGLE1+?ROWNUM,X
   727 4439 8D 63 A1				STA DL2_OPTIONS_LINE+BYTES_LINE*4+21+?ROWNUM
   727 = 0001					?ROWNUM ++
   727 443C BD 07 A2				LDA TEXT_PADDLE_ANGLE1+?ROWNUM,X
   727 443F 8D 64 A1				STA DL2_OPTIONS_LINE+BYTES_LINE*4+21+?ROWNUM
   727 = 0002					?ROWNUM ++
   727 4442 BD 08 A2				LDA TEXT_PADDLE_ANGLE1+?ROWNUM,X
   727 4445 8D 65 A1				STA DL2_OPTIONS_LINE+BYTES_LINE*4+21+?ROWNUM
   727 = 0003					?ROWNUM ++
   727 4448 BD 09 A2				LDA TEXT_PADDLE_ANGLE1+?ROWNUM,X
   727 444B 8D 66 A1				STA DL2_OPTIONS_LINE+BYTES_LINE*4+21+?ROWNUM
   727 = 0004					?ROWNUM ++
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
   731
   732 444E 4C 6B 44			jmp sg_end_input_logic
   733
   734
   735 				;----------------------------------------
   736 				; check for a "just pressed" of the return key, to start the game
   737 4451			sg_check_return_key
   738 4451 C9 0C			cmp #12			; "return" key
   739 					;beq sg_start_game
   740 4453 F0 25			beq sg_start_fade_out
   741
   742
   743 				;----------------------------------------
   744 				; check for a "just pressed" of the trigger, to start the game
   745 4455			sg_check_trigger_pressed
   746 4455			TRIGGER_address1
   747 4455 AD 10 D0			lda TRIG0
   748 4458 25 DB			and m_triggerTypeMask
   749 445A F0 07			beq sg_trigger_pressed
   750
   751 445C A9 00			lda #0
   752 445E 85 B6			sta m_newTriggerPressedFlag
   753
   754 4460 4C 6B 44			jmp sg_end_input_logic
   755
   756
   757 4463			sg_trigger_pressed
   758 4463 A9 80			lda #128
   759 4465 85 B6			sta m_newTriggerPressedFlag
   760
   761 4467 A5 B7			lda m_oldTriggerPressedFlag
   762 					;beq sg_start_game			; trigger just pressed
   763 4469 F0 0F			beq sg_start_fade_out
   764
   765
   766 				;----------------------------------------
   767 446B			sg_end_input_logic
   768 				; at the end of the step, save old values for the next frame
   769 446B A5 B2			lda m_newKeyPressedFlag
   770 446D 85 B3			sta m_oldKeyPressedFlag
   771
   772 446F A5 B4			lda m_newKeyPressedValue
   773 4471 85 B5			sta m_oldKeyPressedValue
   774
   775 4473 A5 B6			lda m_newTriggerPressedFlag
   776 4475 85 B7			sta m_oldTriggerPressedFlag
   777
   778 4477 4C 44 41			jmp sg_loop
   779
   780
   781 				;----------------------------------------
   782 447A			sg_start_fade_out
   783 447A A9 10			lda #$10		; this uses only the high 4 bits
   784 447C 8D 05 39			sta RMTGLOBALVOLUMEFADE
   785
   786 447F A9 1C			lda #MUSIC_FADEOUT_VCOUNT_STEPS
   787 4481 85 BA			sta m_musicFadeOutCounter
   788
   789 4483 4C 44 41			jmp sg_loop
   790
   791
   792 				;----------------------------------------
   793 4486			sg_start_game
   794 					;jsr InitAll
   795
   796 4486				VcountWait 128
Macro: VCOUNTWAIT [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 4486 A9 80			      lda #128
     6 4488 CD 0B D4		VWait1	 cmp VCOUNT
     7 448B D0 FB			      bne VWait1
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
   797
   798 448D A9 00			lda #0
   799 448F 8D 00 D4			sta DMACTL
   800
   801 4492 8D 0E D4			sta NMIEN
   802
   803 4495 8D 0D D0			sta GRAFP0
   804 4498 8D 0E D0			sta GRAFP1
   805 449B 8D 0F D0			sta GRAFP2
   806 449E 8D 10 D0			sta GRAFP3
   807 44A1 8D 11 D0			sta GRAFM
   808
   809 				; stop RMT menu music
   810 44A4 20 09 38			jsr RASTERMUSICTRACKER+9
   811
   812 44A7 4C 3D 46			jmp InitGame
   813
   814
   815 				;--------------------------------------------------------------------------------
   816
   817 44AA			InitAll
   818
   819 44AA				VcountWait 128
Macro: VCOUNTWAIT [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 44AA A9 80			      lda #128
     6 44AC CD 0B D4		VWait1	 cmp VCOUNT
     7 44AF D0 FB			      bne VWait1
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
   820
   821 				; disable interruptions, clear graphics and sound
   822 44B1				ClearSystem
Macro: CLEARSYSTEM [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 44B1 18				      clc
     6 44B2 D8				      cld
     8 44B3 78				      sei
    10 44B4 A9 00			      lda #0
    11 44B6 8D 0E D2			      sta IRQEN	; clear interrupts and screen
    12 44B9 8D 0E D4			      sta NMIEN
    14 44BC 8D 00 D4			      sta DMACTL
    15 44BF 8D 1A D0			      sta COLBK
    17 44C2 8D 1D D0			      sta GRACTL	; clear P/M
    18 44C5 8D 0D D0			      sta GRAFP0
    19 44C8 8D 0E D0			      sta GRAFP1
    20 44CB 8D 0F D0			      sta GRAFP2
    21 44CE 8D 10 D0			      sta GRAFP3
    22 44D1 8D 11 D0			      sta GRAFM
    24 44D4 8D 00 D0			      sta HPOSP0
    25 44D7 8D 01 D0			      sta HPOSP1
    26 44DA 8D 02 D0			      sta HPOSP2
    27 44DD 8D 03 D0			      sta HPOSP3
    28 44E0 8D 04 D0			      sta HPOSM0
    29 44E3 8D 05 D0			      sta HPOSM1
    30 44E6 8D 06 D0			      sta HPOSM2
    31 44E9 8D 07 D0			      sta HPOSM3
    33 44EC 8D 1B D0			      sta PRIOR	; clear GTIA also
    35 44EF 8D 08 D2			      sta AUDCTL	; clear sound
    36 44F2 8D 01 D2			      sta AUDC1
    37 44F5 8D 03 D2			      sta AUDC2
    38 44F8 8D 05 D2			      sta AUDC3
    39 44FB 8D 07 D2			      sta AUDC4
    41 44FE A9 03			      lda #3
    42 4500 8D 0F D2			      sta SKCTL
Source: D:\!Delphi\mads\examples\games\pad\pad_title.asm
   823
   824
   825 				; clear P/M area
   826 4503 A9 00			lda #0
   827 4505 AA				tax
   828
   829 4506			ia_clear_pm_area
   830 4506 9D 00 A3			sta m0_adr,x
   831 4509 9D 00 A4			sta p0_adr,x
   832 450C 9D 00 A5			sta p1_adr,x
   833 450F 9D 00 A6			sta p2_adr,x
   834 4512 9D 00 A7			sta p3_adr,x
   835 4515 E8				inx
   836 4516 D0 EE			bne ia_clear_pm_area
   837
   838
   839 				; clear vars area in page 0 (200 bytes)
   840 4518 AA				tax
   841
   842 4519			ia_clear_page0_area
   843 4519 95 00			sta Vars_address,x
   844 451B E8				inx
   845 451C E0 D2			cpx #Static_vars_address
   846 451E D0 F9			bne ia_clear_page0_area
   847
   848 4520 60				rts
   766
   767
   768 				;================================================================================
   769
   770 4521			SetNormalPadInfo
   771 4521 A9 01			lda #1		; P/M 3 double size
   772 4523 85 83			sta m_padSizeP3
   773
   774 4525 A9 58			lda #MAX_PAD_POSX
   775 4527 85 7C			sta m_maxPadPosX
   776 4529 A9 59			lda #[MAX_PAD_POSX+1]
   777 452B 85 7D			sta m_maxPadPosXPlusOne
   778
   779 452D A9 14			lda #[PAD_SIZEX+BALL_SIZEX+1]
   780 452F 85 7E			sta m_padCollisionSizeX
   781 4531 4A				lsr
   782 4532 85 7F			sta m_padCollisionHalfSizeX
   783
   784 4534 A9 08			lda #[PAD_SIZEX/2]
   785 4536 85 80			sta m_padHalfSizeX
   786
   787
   788 4538 A2 00			ldx #0
   789
   790 453A			SNPI_loop1
   791 				; 	lda TabNormalPadShape,x
   792 				; 	sta TabCurrentPadShape,x
   793 453A BD EC 92			lda TabNormalPadColor,x
   794 453D 9D E6 92			sta TabCurrentPadColor,x
   795
   796 4540 E8				inx
   797 4541 E0 06			cpx #PAD_SIZEY
   798 4543 D0 F5			bne SNPI_loop1
   799
   800
   801 4545 A2 00			ldx #0
   802
   803 4547			SNPI_loop2
   804 4547 BD 1A 93			lda TabNormalPadAngleIndex,x
   805 454A 9D FE 92			sta TabCurrentPadAngleIndex,x
   806
   807 454D E8				inx
   808 454E E0 14			cpx #[PAD_SIZEX+BALL_SIZEX+1]
   809 4550 D0 F5			bne SNPI_loop2
   810
   811
   812 4552 A2 00			ldx #0
   813 4554 A0 C8			ldy #PAD_POSY1
   814
   815 4556			SNPI_loop3
   816 				;	lda TabCurrentPadShape,x
   817 4556 BD D4 92			lda TabNormalPadShape,x
   818 4559 99 1C A7			sta p3_adr+PM_OFFSET_Y,y
   819 455C E8				inx
   820 455D C8				iny
   821 455E E0 06			cpx #PAD_SIZEY
   822 4560 D0 F4			bne SNPI_loop3
   823
   824
   825 4562 60				rts
   826
   827
   828 				;-------------------------------
   829 4563			SetSmallPadInfo
   830 4563 A9 01			lda #1		; P/M 3 double size
   831 4565 85 83			sta m_padSizeP3
   832
   833 4567 A9 60			lda #MAX_PAD_SMALL_POSX
   834 4569 85 7C			sta m_maxPadPosX
   835 456B A9 61			lda #[MAX_PAD_SMALL_POSX+1]
   836 456D 85 7D			sta m_maxPadPosXPlusOne
   837
   838 456F A9 0C			lda #[PAD_SMALL_SIZEX+BALL_SIZEX+1]
   839 4571 85 7E			sta m_padCollisionSizeX
   840 4573 4A				lsr
   841 4574 85 7F			sta m_padCollisionHalfSizeX
   842
   843 4576 A9 04			lda #[PAD_SMALL_SIZEX/2]
   844 4578 85 80			sta m_padHalfSizeX
   845
   846
   847 457A A2 00			ldx #0
   848
   849 457C			SSPI_loop1
   850 				; 	lda TabSmallPadShape,x
   851 				; 	sta TabCurrentPadShape,x
   852 457C BD F2 92			lda TabSmallPadColor,x
   853 457F 9D E6 92			sta TabCurrentPadColor,x
   854
   855 4582 E8				inx
   856 4583 E0 06			cpx #PAD_SIZEY
   857 4585 D0 F5			bne SSPI_loop1
   858
   859
   860 4587 A2 00			ldx #0
   861
   862 4589			SSPI_loop2
   863 4589 BD 2E 93			lda TabSmallPadAngleIndex,x
   864 458C 9D FE 92			sta TabCurrentPadAngleIndex,x
   865
   866 458F E8				inx
   867 4590 E0 0C			cpx #[PAD_SMALL_SIZEX+BALL_SIZEX+1]
   868 4592 D0 F5			bne SSPI_loop2
   869
   870
   871 4594 A2 00			ldx #0
   872 4596 A0 C8			ldy #PAD_POSY1
   873
   874 4598			SSPI_loop3
   875 				;	lda TabCurrentPadShape,x
   876 4598 BD DA 92			lda TabSmallPadShape,x
   877 459B 99 1C A7			sta p3_adr+PM_OFFSET_Y,y
   878 459E E8				inx
   879 459F C8				iny
   880 45A0 E0 06			cpx #PAD_SIZEY
   881 45A2 D0 F4			bne SSPI_loop3
   882
   883
   884 45A4 60				rts
   885
   886
   887 				;-------------------------------
   888 45A5			SetLargePadInfo
   889 45A5 A9 03			lda #3		; P/M 3 quad size
   890 45A7 85 83			sta m_padSizeP3
   891
   892 45A9 A9 50			lda #MAX_PAD_LARGE_POSX
   893 45AB 85 7C			sta m_maxPadPosX
   894 45AD A9 51			lda #[MAX_PAD_LARGE_POSX+1]
   895 45AF 85 7D			sta m_maxPadPosXPlusOne
   896
   897 45B1 A9 1C			lda #[PAD_LARGE_SIZEX+BALL_SIZEX+1]
   898 45B3 85 7E			sta m_padCollisionSizeX
   899 45B5 4A				lsr
   900 45B6 85 7F			sta m_padCollisionHalfSizeX
   901
   902 45B8 A9 0C			lda #[PAD_LARGE_SIZEX/2]
   903 45BA 85 80			sta m_padHalfSizeX
   904
   905
   906 45BC A2 00			ldx #0
   907
   908 45BE			SLPI_loop1
   909 				; 	lda TabLargePadShape,x
   910 				; 	sta TabCurrentPadShape,x
   911 45BE BD F8 92			lda TabLargePadColor,x
   912 45C1 9D E6 92			sta TabCurrentPadColor,x
   913
   914 45C4 E8				inx
   915 45C5 E0 06			cpx #PAD_SIZEY
   916 45C7 D0 F5			bne SLPI_loop1
   917
   918
   919 45C9 A2 00			ldx #0
   920
   921 45CB			SLPI_loop2
   922 45CB BD 3A 93			lda TabLargePadAngleIndex,x
   923 45CE 9D FE 92			sta TabCurrentPadAngleIndex,x
   924
   925 45D1 E8				inx
   926 45D2 E0 1C			cpx #[PAD_LARGE_SIZEX+BALL_SIZEX+1]
   927 45D4 D0 F5			bne SLPI_loop2
   928
   929
   930 45D6 A2 00			ldx #0
   931 45D8 A0 C8			ldy #PAD_POSY1
   932
   933 45DA			SLPI_loop3
   934 				;	lda TabCurrentPadShape,x
   935 45DA BD E0 92			lda TabLargePadShape,x
   936 45DD 99 1C A7			sta p3_adr+PM_OFFSET_Y,y
   937 45E0 E8				inx
   938 45E1 C8				iny
   939 45E2 E0 06			cpx #PAD_SIZEY
   940 45E4 D0 F4			bne SLPI_loop3
   941
   942
   943 45E6 60				rts
   944
   945
   946 				;================================================================================
   947
   948 45E7			PlayStartLevelSong
   949 45E7 A9 04			lda #RMT_SONG_SPEED
   950 45E9 85 A6			sta m_rmtSongSpeedCounter
   951
   952 				; init RMT vcount update system
   953 45EB AD 0B D4			lda VCOUNT
   954 45EE 85 B8			sta m_currentVcountLineRMT
   955
   956 45F0			psls_loop
   957 				; update RMT vcount update system
   958 45F0 A5 B8			lda m_currentVcountLineRMT
   959 45F2 18				clc
   960 45F3 69 27			adc #RMT_UPDATE_VCOUNT_LINES
   961 45F5 C9 9C			cmp #[MAX_VCOUNT_VALUE+1]
   962 45F7 90 02			bcc psls_vcount_normal
   963
   964 45F9			psls_vcount_overflow
   965 45F9 E9 9C			sbc #[MAX_VCOUNT_VALUE+1]
   966
   967 45FB			psls_vcount_normal
   968 45FB 85 B9			sta m_nextVcountLineRMT		; set next target value
   969
   970
   971 				; wait until reached or surpassed target vcount value
   972 45FD C5 B8			cmp m_currentVcountLineRMT
   973 45FF 90 0E			bcc psls_next_vcount_lower
   974
   975 4601			psls_next_vcount_bigger
   976 4601 AD 0B D4			lda VCOUNT
   977 4604 C5 B8			cmp m_currentVcountLineRMT
   978 4606 90 15			bcc psls_play_music_frame
   979 4608 C5 B9			cmp m_nextVcountLineRMT
   980 460A B0 11			bcs psls_play_music_frame
   981
   982 460C 4C 01 46			jmp psls_next_vcount_bigger
   983
   984
   985 460F			psls_next_vcount_lower
   986 460F AD 0B D4			lda VCOUNT
   987 4612 C5 B8			cmp m_currentVcountLineRMT
   988 4614 B0 F9			bcs psls_next_vcount_lower
   989 4616 C5 B9			cmp m_nextVcountLineRMT
   990 4618 B0 03			bcs psls_play_music_frame
   991
   992 461A 4C 0F 46			jmp psls_next_vcount_lower
   993
   994
   995 461D			psls_play_music_frame
   996 				; play RMT music
   997 461D 20 03 38			jsr RASTERMUSICTRACKER+3		; play one frame
   998
   999 				; update catched ball (more than necessary)
  1000 4620 A5 08			lda pad_xpos
  1001 4622 18				clc
  1002 4623 65 74			adc m_catchedBallPadOffset
  1003 4625 85 1D			sta ball_xpos_1
  1004 4627 85 2F			sta ball_rxpos
  1005
  1006 4629 A5 B9			lda m_nextVcountLineRMT
  1007 462B 85 B8			sta m_currentVcountLineRMT
  1008
  1009 462D C6 A6			dec m_rmtSongSpeedCounter
  1010 462F D0 BF			bne psls_loop
  1011
  1012 4631 A9 04			lda #RMT_SONG_SPEED
  1013 4633 85 A6			sta m_rmtSongSpeedCounter
  1014
  1015 4635 C6 A5			dec m_waitForSongEndCounter
  1016 4637 D0 B7			bne psls_loop
  1017
  1018 					; stop RMT menu music
  1019 4639 20 09 38			jsr RASTERMUSICTRACKER+9
  1020
  1021 463C 60				rts
  1022
  1023
  1024 				;================================================================================
  1025
  1026 463D			InitGame
  1027 463D AE 00 D3			ldx PORTA
  1028
  1029 4640			IG_nibbleTable
  1030 4640 BD 00 8E			lda TabGetLowNibble,x
  1031 					;lda TabGetHighNibble,x
  1032
  1033 4643 85 03			sta old_port
  1034
  1035 4645 A9 0E			lda #BALL_COLOR
  1036 4647 8D 12 D0			sta COLPM0
  1037
  1038 				; 	lda #BALL_BACKG_COLOR1
  1039 				; 	sta m_ballBackgroundColor
  1040 				; 	sta m_ballAntialiasColor
  1041 				; 	sta COLPM1
  1042
  1043 464A A9 94			lda #$94
  1044 464C 8D 16 D0			sta COLPF0
  1045
  1046 464F A9 08			lda #$08
  1047 4651 8D 17 D0			sta COLPF1
  1048
  1049 4654 A9 0C			lda #$0C
  1050 4656 8D 18 D0			sta COLPF2
  1051
  1052 4659 A9 0E			lda #$0E
  1053 465B 8D 19 D0			sta COLPF3
  1054
  1055 465E A9 00			lda #0
  1056 4660 8D 1A D0			sta COLBK
  1057
  1058 				; init pad position and graphics
  1059 4663 20 21 45			jsr SetNormalPadInfo
  1060
  1061 4666 A9 32			lda #PAD_START_POSITION
  1062 4668 85 08			sta pad_xpos
  1063 466A 18			    	clc
  1064 466B 69 4C			adc #PM_OFFSET_X
  1065 466D 85 88			sta m_padHPOSP3
  1066
  1067 				; 	ldx #0
  1068 				; 	ldy #PAD_POSY1
  1069 				; ipd	lda TabCurrentPadShape,x
  1070 				; 	sta p3_adr+PM_OFFSET_Y,y
  1071 				; 	inx
  1072 				; 	iny
  1073 				; 	cpx #PAD_SIZEY
  1074 				; 	bne ipd
  1075
  1076 466F A9 00			lda #0
  1077 4671 85 43			sta dli_index
  1078 4673 85 47			sta m_soundFlag
  1079 4675 85 48			sta m_soundSize
  1080 4677 85 49			sta m_soundIndex
  1081 4679 85 4A			sta m_soundPriority
  1082
  1083 467B 85 59			sta bonus_flag
  1084 467D 85 62			sta m_bonusType
  1085 467F 85 63			sta m_lastBonusType
  1086
  1087 4681 85 4B			sta vbi_anim_ctd
  1088 4683 85 4E			sta vbi_gold_ctd
  1089
  1090 				; 	lda #ABORT_BONUS_NUM	; don't give a bonus for the first hits to bricks
  1091 				; 	sta m_firstBonusDelayCounter
  1092
  1093 4685 A9 19			lda #VBI_COUNTER_FRAMES
  1094 4687 85 4D			sta vbi_jif_ctd
  1095
  1096 4689 A9 00			lda #0
  1097 468B 85 35			sta old_ball_rypos
  1098 468D 85 32			sta ball_rypos
  1099 468F A9 B1			lda #[[256-BALL_SIZEX]-PM_OFFSET_X]
  1100 4691 85 2F			sta ball_rxpos
  1101
  1102 				.if .def	USE_ENEMY_CODE
  1103 4693 A9 00			lda #0
  1104 4695 85 8E			sta m_enemy1OldPosY
  1105 				.endif
  1106
  1107 4697 A5 D8			lda m_selectedLevelIndex
  1108 4699 85 52			sta m_levelIndex
  1109
  1110 469B A9 00			lda #0
  1111 469D 85 84			sta m_playerScore
  1112 469F 85 85			sta m_playerScore+1
  1113 46A1 85 86			sta m_playerScore+2
  1114 46A3 20 41 67			jsr DisplayScore
  1115
  1116 46A6 A9 03			lda #STARTING_BALLS
  1117 46A8 85 57			sta m_numberOfBallsLeft
  1118
  1119 				; clear ball hud at the start of the game
  1120 46AA 20 FC 66			jsr ClearAllBallsInHud
  1121
  1122 46AD A9 00			lda #0
  1123 46AF 85 58			sta m_ballNumHud
  1124 46B1 20 C9 66			jsr IncreaseBallsInHud
  1125 46B4 20 C9 66			jsr IncreaseBallsInHud
  1126 46B7 20 C9 66			jsr IncreaseBallsInHud
  1127
  1128 					;jsr DisplayLives
  1129
  1130
  1131 46BA				SetDisplayListAddress DL1_address
Macro: SETDISPLAYLISTADDRESS [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 46BA A9 00			      lda #<DL1_ADDRESS
     6 46BC 8D 02 D4			      sta DLISTL
     7 46BF A9 A0			      lda #>DL1_ADDRESS
     8 46C1 8D 03 D4			      sta DLISTL+1
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  1132
  1133 46C4 A9 B1			lda #<DLI1_address
  1134 46C6 8D FA FF			sta NMIH_VECTOR		;VDSLST
  1135 46C9 A9 65			lda #>DLI1_address
  1136 46CB 8D FB FF			sta NMIH_VECTOR+1		;VDSLST+1
  1137
  1138 46CE A9 00			lda #0
  1139 46D0 8D 08 D0			sta SIZEP0
  1140 46D3 A9 00			lda #0
  1141 46D5 8D 09 D0			sta SIZEP1
  1142 46D8 A9 00			lda #0
  1143 46DA 8D 0A D0			sta SIZEP2
  1144 					;lda #1
  1145 					;sta SIZEP3
  1146 46DD A9 01			lda #%00000001
  1147 46DF 8D 0C D0			sta SIZEM
  1148
  1149 46E2				SetPMBaseAddress PM_zone_address
Macro: SETPMBASEADDRESS [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 46E2 A9 A0			      lda #>PM_ZONE_ADDRESS
     6 46E4 8D 07 D4			      sta PMBASE
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  1150
  1151 46E7 A9 11			lda #[PRV_FIFTH_PLAYER | PRV_PM_PRIORITY_1]
  1152 46E9 8D 1B D0			sta PRIOR
  1153
  1154 				; 	lda #<VBI_address
  1155 				; 	sta VVBLKI
  1156 				; 	lda #>VBI_address
  1157 				; 	sta VVBLKI+1
  1158
  1159 46EC				SetFontAddress Font1_address
Macro: SETFONTADDRESS [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 46EC A9 B4			      lda #>FONT1_ADDRESS
     6 46EE 8D 09 D4			      sta CHBASE
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  1160
  1161 				; ial lda VCOUNT
  1162 				; 	bne ial
  1163 				;
  1164 				; 	lda #[DV_DMA_ON | DV_PLAYERS_ON | DV_MISSILES_ON | DV_PM_ONE_LINE | DV_NARROW_PF]
  1165 				; 	sta DMACTL
  1166 				; 	lda #%10000000		; only DLI's on
  1167 				; 	sta NMIEN
  1168
  1169 46F1 A9 FF			lda #255
  1170 46F3 85 A2			sta m_startGameFlag
  1171
  1172
  1173 				;--------------------------------------------------------------------------------
  1174
  1175 46F5			InitLevel
  1176 46F5 A9 14			lda #GS_LEVEL_PLAY		; GS_LEVEL_START
  1177 46F7 85 A3			sta m_gameState
  1178
  1179 				; wait some frames before starting the global highlight effect
  1180 46F9 A9 14			lda #FRAMES_TIMER_UNIT*4
  1181 46FB 85 B0			sta m_startLevelHighlightTimer
  1182 46FD A9 00			lda #0
  1183 46FF 85 B1			sta m_startLevelHighlightStep
  1184
  1185 4701 A9 00			lda #0
  1186 4703 85 4C			sta anim_num
  1187 4705 85 4F			sta gold_init
  1188 4707 85 50			sta gold_num
  1189
  1190 4709 85 64			sta m_extraPlayerBonusFlag
  1191
  1192 470B 85 71			sta m_ballLostThisLevelFlag
  1193
  1194
  1195 				; init animations table
  1196 470D A2 00			ldx #0
  1197 470F 9D 90 93		cat	sta tab_anim_lsb,x
  1198 4712 E8				inx
  1199 4713 E0 20			cpx #MAX_ACTIVE_HIGHLIGHT_ANIMS*4		; 4 tables
  1200 4715 D0 F8			bne cat
  1201
  1202
  1203 				;init gold brick memory table
  1204 4717 A2 00			ldx #0
  1205 4719 9D B0 93		cgt	sta TabRestoreBrick_lsb,x
  1206 471C E8				inx
  1207 471D E0 60			cpx #MAX_ACTIVE_RESTORE_BRICKS*4		; 4 tables
  1208 471F D0 F8			bne cgt
  1209
  1210
  1211 				; reset pad position
  1212 4721 A9 32			lda #PAD_START_POSITION
  1213 4723 85 08			sta pad_xpos
  1214 4725 18			    clc
  1215 4726 69 4C			adc #PM_OFFSET_X
  1216 4728 85 88			sta m_padHPOSP3
  1217
  1218
  1219 				; force the redraw of the "holes" to exit a level
  1220 472A 20 35 5A			jsr ForceCloseSideHoles
  1221
  1222 472D A9 00			lda #0
  1223 472F 85 A8			sta m_animateExitsTimer
  1224 4731 85 A9			sta m_exitsAnimationIndex
  1225
  1226
  1227 				; init background for empty level (?)
  1228 4733 A9 43			lda #<[DL1_data_address+BYTES_LINE*2+LEFT_BRICK_OFFSET]
  1229 4735 85 3B			sta ptr_1
  1230 4737 A9 A8			lda #>[DL1_data_address+BYTES_LINE*2+LEFT_BRICK_OFFSET]
  1231 4739 85 3C			sta ptr_1+1
  1232 473B A9 00			lda #0
  1233 473D 85 3F			sta ctd_1
  1234 473F 85 40			sta ctd_2
  1235
  1236 4741 A5 40		bk1	lda ctd_2
  1237 4743 29 03			and #3
  1238 4745 0A				asl
  1239 4746 85 41			sta temp_1
  1240 4748 A5 3F			lda ctd_1
  1241 474A 29 01			and #1
  1242 474C 05 41			ora temp_1
  1243 474E AA				tax
  1244 474F BD 6A 93			lda TabBackgroundCharDef,x
  1245 4752 85 41			sta temp_1
  1246 4754 18				clc
  1247 4755 69 01			adc #1
  1248 4757 85 42			sta temp_2
  1249
  1250 				; add shadow for the left row of the play area
  1251 4759 A6 3F			ldx ctd_1
  1252 475B D0 06			bne bk2
  1253 475D A5 41			lda temp_1
  1254 475F 09 10			ora #%10000     ; shadow bit
  1255 4761 85 41			sta temp_1
  1256
  1257 				; add shadow for the top line of the play area
  1258 4763 A4 40		bk2	ldy ctd_2
  1259 4765 D0 0C			bne bk3
  1260 4767 A5 41			lda temp_1
  1261 4769 09 10			ora #%10000     ; shadow bit
  1262 476B 85 41			sta temp_1
  1263 476D A5 42			lda temp_2
  1264 476F 09 10			ora #%10000     ; shadow bit
  1265 4771 85 42			sta temp_2
  1266
  1267 4773 8A			bk3	txa
  1268 4774 0A				asl		; *2
  1269 4775 A8				tay
  1270 4776 A5 41			lda temp_1
  1271 4778 91 3B			sta (ptr_1),y
  1272 477A C8				iny
  1273 477B A5 42			lda temp_2
  1274 477D 91 3B			sta (ptr_1),y
  1275
  1276 477F E8				inx
  1277 4780 E0 0D			cpx #[GAME_AREA_SIZEX/BRICK_SIZEX]
  1278 4782 D0 0F			bne bk5
  1279 4784 A2 00			ldx #0
  1280 4786 E6 40			inc ctd_2
  1281 4788 A5 3B			lda ptr_1
  1282 478A 18				clc
  1283 478B 69 20			adc #BYTES_LINE
  1284 478D 90 02			bcc bk4
  1285 478F E6 3C			inc ptr_1+1
  1286 4791 85 3B		bk4	sta ptr_1
  1287 4793 86 3F		bk5	stx ctd_1
  1288
  1289 4795 A5 40			lda ctd_2
  1290 4797 C9 1A			cmp #[GAME_AREA_SIZEY/BRICK_SIZEY]
  1291 4799 D0 A6			bne bk1
  1292
  1293
  1294 				; init bricks for this level
  1295 479B A6 52			ldx m_levelIndex
  1296
  1297 479D A5 D6			lda m_difficultyIndex
  1298 479F C9 03			cmp #3	; "extra" game mode
  1299 47A1 B0 0D			bcs IL_extra_level_address
  1300
  1301 47A3 BD 88 69			lda TabLevelAddress_LSB,x
  1302 47A6 85 3B			sta ptr_1
  1303 47A8 BD A4 69			lda TabLevelAddress_MSB,x
  1304 47AB 85 3C			sta ptr_1+1
  1305
  1306 47AD 4C BA 47			jmp IL_end_level_address
  1307
  1308 47B0			IL_extra_level_address
  1309 47B0 BD C0 69			lda TabLevelExtraAddress_LSB,x
  1310 47B3 85 3B			sta ptr_1
  1311 47B5 BD DB 69			lda TabLevelExtraAddress_MSB,x
  1312 47B8 85 3C			sta ptr_1+1
  1313
  1314 47BA			IL_end_level_address
  1315
  1316
  1317 				; copy bricks definition to "current level table"
  1318 47BA A0 00			ldy #0
  1319 47BC B1 3B		il1	lda (ptr_1),y
  1320 47BE 99 66 68			sta TabLevel,y
  1321 47C1 C8				iny
  1322 47C2 C0 EA			cpy #[NUM_BRICKS_X*NUM_BRICKS_Y]
  1323 47C4 D0 F6			bne il1
  1324
  1325 				; update pointer, because we are going to go over 256 bytes
  1326 47C6 A5 3B			lda ptr_1
  1327 47C8 18				clc
  1328 47C9 69 EA			adc #[NUM_BRICKS_X*NUM_BRICKS_Y]
  1329 47CB 90 02			bcc il1b
  1330 47CD E6 3C			inc ptr_1+1
  1331 47CF 85 3B		il1b	sta ptr_1
  1332
  1333 47D1 A0 00			ldy #0
  1334
  1335 				; copy color table for white bricks
  1336 47D3 A2 00			ldx #0
  1337 47D5 B1 3B		il2	lda (ptr_1),y
  1338 47D7 9D 50 69			sta TabDLI_COLPF2,x
  1339 47DA C8				iny
  1340 47DB E8				inx
  1341 47DC E0 14			cpx #[2+NUM_BRICKS_Y]		; 2+ ==> first 2 border lines
  1342 47DE D0 F5			bne il2
  1343
  1344 				; copy color table for grey bricks
  1345 47E0 A2 00			ldx #0
  1346 47E2 B1 3B		il2b	lda (ptr_1),y
  1347 47E4 9D 6C 69			sta TabDLI_COLPF1,x
  1348 47E7 C8				iny
  1349 47E8 E8				inx
  1350 47E9 E0 14			cpx #[2+NUM_BRICKS_Y]		; 2+ ==> first 2 border lines
  1351 47EB D0 F5			bne il2b
  1352
  1353 				; init background index
  1354 47ED B1 3B			lda (ptr_1),y
  1355 47EF 85 55			sta m_backgroundIndex
  1356
  1357 				; init background color
  1358 47F1 C8				iny
  1359 47F2 B1 3B			lda (ptr_1),y
  1360 47F4 85 56			sta m_backgroundColor
  1361 47F6 8D 16 D0			sta COLPF0
  1362
  1363 				; use background color to set the default antialias color for the ball
  1364 47F9 29 F0			and #%11110000		; get the color part
  1365 47FB 09 08			ora #$08			; set a fixed lum
  1366 47FD 85 78			sta m_ballBackgroundColor
  1367 47FF 85 77			sta m_ballAntialiasColor
  1368 4801 8D 13 D0			sta COLPM1
  1369
  1370 				; init number of bricks to complete the level
  1371 4804 C8				iny
  1372 4805 B1 3B			lda (ptr_1),y
  1373 4807 85 54			sta brick_lev_num
  1374
  1375
  1376 				; init font 1 with the correct background data (copy 32 chars, 256 bytes)
  1377 4809 A9 B8			lda #>Font_background_address
  1378 480B 18				clc
  1379 480C 65 55			adc m_backgroundIndex
  1380 480E 85 3C			sta ptr_1+1
  1381
  1382 4810 A0 00			ldy #0
  1383 4812 84 3B			sty ptr_1
  1384 4814			IL_background_loop
  1385 4814 B1 3B			lda (ptr_1),y
  1386 4816 99 00 B4			sta Font1_address,y
  1387 4819 C8				iny
  1388 481A D0 F8			bne IL_background_loop
  1389
  1390
  1391 				; init screen with all the bricks in this level and the shadows
  1392 				; (bricks start at line 2 of the screen, shadows at line 3)
  1393 481C A9 00			lda #0
  1394 481E 85 3F			sta ctd_1
  1395 4820 A9 43			lda #<[DL1_data_address+BYTES_LINE*2+LEFT_BRICK_OFFSET] ; pointer for the brick
  1396 4822 85 3B			sta ptr_1
  1397 4824 A9 A8			lda #>[DL1_data_address+BYTES_LINE*2+LEFT_BRICK_OFFSET]
  1398 4826 85 3C			sta ptr_1+1
  1399 4828 A9 64			lda #<[DL1_data_address+BYTES_LINE*3+LEFT_BRICK_OFFSET+1] ; pointer for the shadow
  1400 482A 85 3D			sta ptr_2
  1401 482C A9 A8			lda #>[DL1_data_address+BYTES_LINE*3+LEFT_BRICK_OFFSET+1]
  1402 482E 85 3E			sta ptr_2+1
  1403
  1404 4830 A0 00			ldy #0
  1405 4832 A6 3F		il3	ldx ctd_1
  1406 4834 BD 66 68			lda TabLevel,x
  1407 4837 4A				lsr
  1408 4838 4A				lsr
  1409 4839 4A				lsr
  1410 483A 4A				lsr
  1411 483B D0 04			bne il4
  1412 483D C8				iny
  1413 483E 4C 5D 48			jmp il5
  1414
  1415 4841 AA			il4	tax
  1416 4842 BD 72 93			lda TabLeftBrickCharDef,x
  1417 4845 91 3B			sta (ptr_1),y
  1418 4847 B1 3D			lda (ptr_2),y		; put the shadow inclusive if it's going to be overwritten
  1419 4849 09 10			ora #%10000		; shadow bit
  1420 484B 91 3D			sta (ptr_2),y
  1421
  1422 484D C8				iny				; every brick has a left and a right char
  1423
  1424 484E BD 81 93			lda TabRightBrickCharDef,x
  1425 4851 91 3B			sta (ptr_1),y
  1426 4853 C0 19			cpy #NUM_BRICKS_X*2-1	; check if it's the right border brick
  1427 4855 F0 06			beq il5
  1428 4857 B1 3D			lda (ptr_2),y		; put the shadow inclusive if is going to be overwritten
  1429 4859 09 10			ora #%10000		; shadow bit
  1430 485B 91 3D			sta (ptr_2),y
  1431
  1432 485D C8			il5	iny
  1433
  1434 485E E6 3F			inc ctd_1
  1435 4860 C0 1A			cpy #NUM_BRICKS_X*2		; check if we completed the line of bricks
  1436 4862 D0 CE			bne il3
  1437
  1438 4864 A0 00			ldy #0
  1439
  1440 4866 A5 3B			lda ptr_1
  1441 4868 18				clc
  1442 4869 69 20			adc #BYTES_LINE
  1443 486B 90 02			bcc il6
  1444 486D E6 3C			inc ptr_1+1
  1445 486F 85 3B		il6	sta ptr_1
  1446
  1447 4871 A5 3D			lda ptr_2
  1448 4873 18				clc
  1449 4874 69 20			adc #BYTES_LINE
  1450 4876 90 02			bcc il7
  1451 4878 E6 3E			inc ptr_2+1
  1452 487A 85 3D		il7	sta ptr_2
  1453
  1454 487C A6 3F			ldx ctd_1
  1455 487E E0 EA			cpx #[NUM_BRICKS_X*NUM_BRICKS_Y]
  1456 4880 D0 B0			bne il3
  1457
  1458
  1459 				; init rmt player for the intro
  1460 4882 A9 00			lda #0
  1461 4884 8D 05 39			sta RMTGLOBALVOLUMEFADE
  1462
  1463 4887 A2 00			ldx #<RMT_song_address		; low byte of RMT module to X reg
  1464 4889 A0 28			ldy #>RMT_song_address		; hi byte of RMT module to Y reg
  1465 488B A9 0A			lda #10						; starting song line 0-255 to A reg
  1466 488D 20 00 38			jsr RASTERMUSICTRACKER		; Init
  1467
  1468 4890 A9 7D			lda #START_GAME_SOUND_TIME
  1469 4892 85 A5			sta m_waitForSongEndCounter
  1470
  1471 				; clear all sound effect info? (and the hardware sound registers?)
  1472 					// lda #0
  1473 					// sta m_soundFlag
  1474 					// sta m_soundSize
  1475 					// sta m_soundIndex
  1476 					// sta m_soundPriority
  1477
  1478
  1479 				;--------------------------------------------------------------------------------
  1480
  1481 4894			InitBall
  1482
  1483 				.if .def SHOW_TIMING_AREAS
  1484 					lda #0
  1485 					sta m_mainAreaColor
  1486 					sta COLBK
  1487 				.endif
  1488
  1489 4894 A9 01			lda #1
  1490 4896 85 79			sta m_numberOfBallsInPlay
  1491
  1492 				; 	lda #2
  1493 				; 	sta ball_xdir
  1494 				; 	lda #2
  1495 				; 	sta ball_ydir
  1496 				;
  1497 				; 	lda #0
  1498 				; 	sta ball_xstep_2
  1499 				; 	sta ball_ystep_2
  1500 				;
  1501 				; ; starting speed of the ball
  1502 				; .if .def PAL_VERSION
  1503 				; 	lda #48
  1504 				; 	sta ball_xstep_1
  1505 				; 	lda #96
  1506 				; 	sta ball_ystep_1
  1507 				; .else
  1508 				; 	lda #40
  1509 				; 	sta ball_xstep_1
  1510 				; 	lda #80
  1511 				; 	sta ball_ystep_1
  1512 				; .endif
  1513
  1514 4898 A9 00			lda #0
  1515 489A 85 20			sta ball_xpos_2
  1516 489C 85 23			sta ball_xpos_3
  1517 489E 85 29			sta ball_ypos_2
  1518 48A0 85 2C			sta ball_ypos_3
  1519
  1520 48A2 85 7B			sta m_ballHitTopBorderFlag
  1521 					;sta m_ballHitsCounter
  1522 48A4 85 72			sta m_ballSpeedUpTimer
  1523
  1524 48A6 A5 DC			lda m_startingBallSpeed
  1525 48A8 85 70			sta m_currentBallSpeed
  1526
  1527 				; restore ball antialiasing color
  1528 48AA A5 78			lda m_ballBackgroundColor
  1529 48AC 85 77			sta m_ballAntialiasColor
  1530 48AE 8D 13 D0			sta COLPM1
  1531
  1532
  1533 				; start ball at position (5,18) approx, in brick coordinates
  1534 				; but now, put it outside the screen, until the player press the button
  1535 				; 	lda #[[256-BALL_SIZEX]-PM_OFFSET_X]
  1536 				; 	sta ball_xpos_1
  1537 				; 	sta ball_rxpos
  1538 				; 	lda #BRICK_SIZEY*BOTTOM_BRICK_NUM+1
  1539 				; 	sta ball_ypos_1
  1540 				; 	sta ball_rypos
  1541
  1542
  1543 				.if .def USE_ENEMY_CODE
  1544 				; init enemies
  1545 48B1 A9 04			lda #ENEMY_STATE_WAIT_RESPAWN
  1546 48B3 85 98			sta m_enemy1State
  1547
  1548 48B5 A9 C8			lda #<[4*FRAMES_ONE_SECOND]		; time for the first enemy to appear after puting the ball in play
  1549 48B7 85 99			sta m_enemy1StateTimer
  1550 48B9 A9 00			lda #>[4*FRAMES_ONE_SECOND]
  1551 48BB 85 9A			sta m_enemy1StateTimer+1
  1552
  1553 48BD A4 8E			ldy m_enemy1OldPosY
  1554 					;jsr EraseEnemy1		; move this to other part of the code or clear the P/M after losing a ball? (ClearCurrentLevel, EndGame ..)
  1555 48BF 20 61 5C			jsr EraseExplosion1		; use this just to be sure (the area erased is bigger)
  1556 				.endif
  1557
  1558
  1559 				; init mouse read logic
  1560 				; 	lda #0
  1561 				; 	sta old_mov
  1562 48C2 A9 03			lda #MOUSE_READS_TO_ACCELERATE
  1563 48C4 85 6A			sta m_mouseAccelCounter
  1564 48C6 A9 02			lda #MIN_MOUSE_STEP
  1565 48C8 85 6B			sta m_mouseStep
  1566
  1567 48CA A9 00			lda #0
  1568 48CC 85 6C			sta m_mouseAccelMemoryCounter
  1569
  1570 48CE 85 6D			sta m_oldMouseReadDirection
  1571
  1572 					;sta m_padFrameDirection
  1573 48D0 85 6E			sta m_padFrameDeltaStep
  1574
  1575
  1576 				; reset active bonus
  1577 48D2 20 E4 59			jsr ClearBonusExpandEffect
  1578 48D5 20 FE 59			jsr ClearBonusReduceEffect
  1579 48D8 20 18 5A			jsr ClearBonusMegaEffect
  1580 					;jsr ClearBonusDisruptEffect
  1581 48DB 20 2D 5A			jsr ClearBonusBreakEffect
  1582 48DE 20 5E 5A			jsr ClearBonusCatchEffect
  1583
  1584
  1585 				; check to see if we come from the presentation screen
  1586 48E1 24 A2			bit m_startGameFlag
  1587 48E3 10 1A			bpl ib_launch_ball
  1588
  1589 48E5 A9 00			lda #0
  1590 48E7 85 A2			sta m_startGameFlag
  1591
  1592 				; this need to be >= 124 (the VBI signal line), is this a bug in emulation? (don't think so..)
  1593 48E9				VcountWait 128
Macro: VCOUNTWAIT [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 48E9 A9 80			      lda #128
     6 48EB CD 0B D4		VWait1	 cmp VCOUNT
     7 48EE D0 FB			      bne VWait1
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  1594
  1595 48F0 A9 03			lda #3
  1596 48F2 8D 1D D0			sta GRACTL
  1597
  1598 48F5 A9 80			lda #%10000000		; only DLI's on
  1599 48F7 8D 0E D4			sta NMIEN
  1600
  1601 48FA A9 3D			lda #[DV_DMA_ON | DV_PLAYERS_ON | DV_MISSILES_ON | DV_PM_ONE_LINE | DV_NARROW_PF]
  1602 48FC 8D 00 D4			sta DMACTL
  1603
  1604
  1605 48FF			ib_launch_ball
  1606 48FF A5 A5			lda m_waitForSongEndCounter
  1607 4901 F0 07			beq ib_launch_normal_time
  1608
  1609 4903 A9 05			lda #[FRAMES_TIMER_UNIT*1]		// if we play the intro song, no need to wait that much
  1610 4905 85 AA			sta m_startGameWaitTimer
  1611 4907 4C 0E 49			jmp ib_start_delay
  1612
  1613 490A			ib_launch_normal_time
  1614 490A A9 28			lda #[FRAMES_TIMER_UNIT*8]
  1615 490C 85 AA			sta m_startGameWaitTimer
  1616
  1617 490E			ib_start_delay
  1618 490E A5 AA			lda m_startGameWaitTimer
  1619 4910 D0 FC			bne ib_start_delay
  1620
  1621
  1622 4912				VcountSync 32
Macro: VCOUNTSYNC [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 4912 8D 0A D4			      sta WSYNC
     7 4915 A9 20			      lda #32
     8 4917 CD 0B D4		VSync1	 cmp VCOUNT
     9 491A D0 FB			      bne VSync1
    11 491C A9 21			      lda #32+1
    12 491E CD 0B D4		VSync2	 cmp VCOUNT
    13 4921 D0 FB			      bne VSync2
    15 4923 8D 0A D4			      sta WSYNC
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  1623
  1624 4926 20 E3 66			jsr DecreaseBallsInHud
  1625
  1626
  1627 				; start with the ball catched, set direction, step and position
  1628 4929 A9 07			lda #[PAD_SIZEX/2-1]	; middle pixel (the right one) of the normal pad
  1629 492B 85 74			sta m_catchedBallPadOffset
  1630
  1631 492D A9 02			lda #2				; going to the right
  1632 492F 85 17			sta ball_xdir
  1633 4931 A9 01			lda #1				; going up
  1634 4933 85 1A			sta ball_ydir
  1635
  1636 4935 AD 5A 93			lda tab_pad_xstep1+BALL_START_ANGLE_INDEX
  1637 4938 85 0B			sta ball_xstep_1
  1638 493A AD 5F 93			lda tab_pad_xstep2+BALL_START_ANGLE_INDEX
  1639 493D 85 0E			sta ball_xstep_2
  1640
  1641 493F AD 64 93			lda tab_pad_ystep1+BALL_START_ANGLE_INDEX
  1642 4942 85 11			sta ball_ystep_1
  1643 4944 AD 69 93			lda tab_pad_ystep2+BALL_START_ANGLE_INDEX
  1644 4947 85 14			sta ball_ystep_2
  1645
  1646 4949 A9 C2			lda #PAD_BALL_POSY1
  1647 494B 85 26			sta ball_ypos_1
  1648 494D 85 32			sta ball_rypos
  1649 494F 20 6B 5A			jsr UpdateSpriteBall1
  1650
  1651 4952 A5 08			lda pad_xpos
  1652 4954 18				clc
  1653 4955 65 74			adc m_catchedBallPadOffset
  1654 4957 85 1D			sta ball_xpos_1
  1655 4959 85 2F			sta ball_rxpos
  1656
  1657
  1658 495B A9 80			lda #128
  1659 495D 85 A4			sta m_startGameBallCatchedFlag
  1660
  1661 495F A5 A5			lda m_waitForSongEndCounter
  1662 4961 F0 03			beq ib_launch_ball_loop
  1663 4963 20 E7 45			jsr PlayStartLevelSong
  1664
  1665
  1666 				; wait here to launch the ball (by trigger or the space bar)
  1667 4966			ib_launch_ball_loop
  1668
  1669 4966				VcountWait 32
Macro: VCOUNTWAIT [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 4966 A9 20			      lda #32
     6 4968 CD 0B D4		VWait1	 cmp VCOUNT
     7 496B D0 FB			      bne VWait1
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  1670
  1671 					// lda m_waitForSongEndCounter		// only if we were updating this in the VBI
  1672 					// bne ib_launch_ball_loop
  1673
  1674 496D 24 AD			bit m_pauseModeFlag
  1675 496F 30 F5			bmi ib_launch_ball_loop
  1676
  1677
  1678 				; update catched ball
  1679 4971 A5 08			lda pad_xpos
  1680 4973 18				clc
  1681 4974 65 74			adc m_catchedBallPadOffset
  1682 4976 85 1D			sta ball_xpos_1
  1683 4978 85 2F			sta ball_rxpos
  1684
  1685
  1686 497A			TRIGGER_address3
  1687 497A AD 10 D0			lda TRIG0
  1688 497D 25 DB			and m_triggerTypeMask
  1689 497F F0 13			beq ib_launch_ball_release
  1690
  1691 4981 AD 0F D2			lda SKCTL
  1692 4984 29 04			and #4			; a key pressed ?
  1693 4986 D0 DE			bne ib_launch_ball_loop
  1694
  1695 4988 AD 09 D2			lda KBCODE
  1696 498B 29 3F			and #%00111111		; bit7 -> control, bit6 -> shift
  1697 498D C9 0C			cmp #12			; "return" key
  1698 498F F0 03			beq ib_launch_ball_key_release
  1699
  1700 4991 4C 66 49			jmp ib_launch_ball_loop
  1701
  1702
  1703 4994			ib_launch_ball_release
  1704 				; 	lda TRIG0
  1705 				; 	beq ib_launch_ball_release
  1706 				; 	jmp ib_ball_launched
  1707
  1708 4994			ib_launch_ball_key_release
  1709 				; 	lda SKCTL
  1710 				; 	and #4			; a key pressed ?
  1711 				; 	bne ib_launch_ball_key_release
  1712
  1713
  1714 4994			ib_ball_launched
  1715 				;	jsr DecreaseBallsInHud
  1716
  1717 4994 A9 00			lda #0
  1718 4996 85 A4			sta m_startGameBallCatchedFlag
  1719
  1720
  1721 				; show ball at correct X position now
  1722 				; 	lda #BRICK_SIZEX*5+1
  1723 				; 	sta ball_xpos_1
  1724 				; 	sta ball_rxpos
  1725
  1726
  1727 				; start ball speed up timer
  1728 4998 A5 DF			lda m_ballSpeedUpHalfSeconds
  1729 499A 85 72			sta m_ballSpeedUpTimer
  1730
  1731
  1732 				;================================================================================
  1733
  1734 499C			GameLoop
  1735
  1736 				.if .def SHOW_TIMING_AREAS
  1737 					lda #0
  1738 					sta m_mainAreaColor
  1739 					sta COLBK
  1740 				.endif
  1741
  1742 499C				VcountWait 16
Macro: VCOUNTWAIT [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 499C A9 10			      lda #16
     6 499E CD 0B D4		VWait1	 cmp VCOUNT
     7 49A1 D0 FB			      bne VWait1
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  1743
  1744 				.if .def SHOW_TIMING_AREAS
  1745 					lda #$52
  1746 					sta m_mainAreaColor
  1747 					sta COLBK
  1748 				.endif
  1749
  1750
  1751 49A3 24 AD			bit m_pauseModeFlag
  1752 49A5 30 F5			bmi GameLoop
  1753
  1754
  1755 				;-------------------------------
  1756 				; check game state
  1757
  1758 49A7 A5 A3			lda m_gameState
  1759 49A9 C9 14			cmp #GS_LEVEL_PLAY
  1760 49AB F0 2D			beq GL_playing_state
  1761
  1762 				; do also GS_LEVEL_START with capture bonus behavior?
  1763
  1764 49AD C9 1E			cmp #GS_LEVEL_WIN
  1765 49AF D0 29			bne GL_playing_state
  1766
  1767
  1768 				;-------------------------------
  1769 				; do events after winning the level
  1770
  1771 49B1 20 C2 53			jsr AnimateBrickHighlight
  1772
  1773
  1774 49B4 20 C6 56			jsr CheckRestoreBrickList
  1775
  1776
  1777 49B7			GLLW_check_side_exit
  1778 49B7 A5 A7			lda m_openSidesWaitTimer
  1779 49B9 D0 E1			bne GameLoop
  1780
  1781 49BB 24 0A			bit m_padAtLeftLimitFlag
  1782 49BD 30 09			bmi GLLW_exit_left
  1783 49BF 24 09			bit m_padAtRightLimitFlag
  1784 49C1 10 D9			bpl GameLoop
  1785
  1786
  1787 49C3 A9 00			lda #0			; go to the "right" level
  1788 49C5 4C CA 49			jmp GLLW_exit_update
  1789
  1790 49C8			GLLW_exit_left
  1791 49C8 A9 80			lda #128			; go to the "left" level
  1792
  1793 49CA			GLLW_exit_update
  1794 49CA 85 53			sta m_nextLevelIsLeft
  1795
  1796
  1797 				; check effect of the "break" bonus
  1798 49CC 24 67			bit m_bonusBreakIsActive
  1799 49CE 10 07			bpl GLLW_exit
  1800
  1801 				; add $10000 to the score
  1802 49D0 A0 10			ldy #$10			; high byte of the score in BCD
  1803 49D2 A2 00			ldx #$00			; low byte of the score in BCD
  1804 49D4 20 15 67			jsr AddScore
  1805
  1806
  1807 49D7			GLLW_exit
  1808 49D7 4C CA 4A			jmp GoToNextLevel
  1809
  1810
  1811 				;-------------------------------
  1812
  1813 49DA			GL_playing_state
  1814
  1815 49DA 24 75			bit m_ballCatchedByPadFlag
  1816 49DC 10 1B			bpl GL_check_difficulty
  1817
  1818 				; check input to drop the ball(s)
  1819 49DE			TRIGGER_address4
  1820 49DE AD 10 D0			lda TRIG0
  1821 49E1 25 DB			and m_triggerTypeMask
  1822 49E3 F0 10			beq GL_drop_ball
  1823
  1824 49E5 AD 0F D2			lda SKCTL
  1825 49E8 29 04			and #4			; a key pressed ?
  1826 49EA D0 0D			bne GL_check_difficulty
  1827
  1828 49EC AD 09 D2			lda KBCODE
  1829 49EF 29 3F			and #%00111111		; bit7 -> control, bit6 -> shift
  1830 49F1 C9 0C			cmp #12			; "return" key
  1831 49F3 D0 04			bne GL_check_difficulty
  1832
  1833 49F5			GL_drop_ball
  1834 49F5 A9 00			lda #0
  1835 49F7 85 75			sta m_ballCatchedByPadFlag
  1836
  1837
  1838 49F9			GL_check_difficulty
  1839 49F9 A5 D6			lda m_difficultyIndex
  1840 49FB D0 07			bne GL_ps_not_easy_difficulty
  1841
  1842 				; use minimun speed if we are playing in "easy" mode
  1843 49FD A9 02			lda #MIN_BALL_SPEED
  1844 49FF 85 6F			sta m_ballSpeedCounter
  1845 4A01 4C 08 4A			jmp MoveAllBallsLoop
  1846
  1847 4A04			GL_ps_not_easy_difficulty
  1848 4A04 A5 70			lda m_currentBallSpeed
  1849 4A06 85 6F			sta m_ballSpeedCounter
  1850
  1851
  1852 				;-------------------------------
  1853
  1854 				; This is the current main loop to move all the balls, all active balls are moved one step in X and Y
  1855 				; inside the loop "MoveBallLoop" (updating "m_currentBallIndex" every time) and then the group is moved
  1856 				; again according to the value in m_ballSpeedCounter (the current max speed normal value is 6, and in
  1857 				; arcade is 7) in the external loop "MoveAllBallsLoop" (also the max step (X,Y) is ($56.EC, $AD.D8) in
  1858 				; NTSC, and ($68.4E, $D0.9D) in pal).
  1859
  1860 				; With this we can assume that cannot be more than 2 collisions in the vertical axis in the same frame
  1861 				; (and maybe only one in the horizontal axis), but we should really try to optimize the general case
  1862 				; where the balls don't cross any limit anyway (if we want to add more balls, like 5 or 6 max).
  1863
  1864 4A08			MoveAllBallsLoop
  1865 4A08 A9 00			lda #0
  1866 4A0A 85 7A			sta m_currentBallIndex
  1867
  1868 4A0C 85 38			sta m_ballLostFlag
  1869 4A0E 85 39			sta m_ballLostFlag+1
  1870 4A10 85 3A			sta m_ballLostFlag+2
  1871
  1872
  1873 4A12			MoveBallLoop
  1874
  1875 				.if .def SHOW_TIMING_AREAS
  1876 					lda m_currentBallIndex
  1877 					asl
  1878 					adc #4
  1879 					sta m_mainAreaColor
  1880 					sta COLBK
  1881 				.endif
  1882
  1883 				; init ball data for multi ball case
  1884
  1885
  1886 				; after this we always return to "UpdateRealCoords", at least we lose the level
  1887 4A12 4C 92 4E			jmp UpdateBallPosition
  1888
  1889
  1890 				;-------------------------------
  1891
  1892 				; remember the new pixel position for the next step
  1893 4A15			UpdateRealCoords
  1894 4A15 A6 7A			ldx m_currentBallIndex
  1895 4A17 B5 1D			lda ball_xpos_1,x
  1896 4A19 95 2F			sta ball_rxpos,x
  1897 4A1B B5 26			lda ball_ypos_1,x
  1898 4A1D 95 32			sta ball_rypos,x
  1899
  1900
  1901 					;inc m_ballStepsInFrame
  1902
  1903
  1904 				; save ball data for multi ball case
  1905
  1906
  1907 				; loop over all active balls
  1908 4A1F E6 7A			inc m_currentBallIndex
  1909 4A21 A5 7A			lda m_currentBallIndex
  1910 4A23 C5 79			cmp m_numberOfBallsInPlay
  1911 4A25 D0 EB			bne MoveBallLoop
  1912
  1913
  1914 				.if .def SHOW_TIMING_AREAS
  1915 					lda #$52
  1916 					sta m_mainAreaColor
  1917 					sta COLBK
  1918 				.endif
  1919
  1920
  1921 				;-------------------------------
  1922
  1923 				; check here all the cases for when we lose balls
  1924 4A27 20 86 4C			jsr CheckBallsLost
  1925
  1926 4A2A A5 79			lda m_numberOfBallsInPlay
  1927 4A2C F0 3D			beq LostPlayer
  1928
  1929
  1930 				;-------------------------------
  1931
  1932 				; iterate the balls movement, according to the current speed
  1933 4A2E C6 6F			dec m_ballSpeedCounter
  1934 4A30 D0 D6			bne MoveAllBallsLoop
  1935
  1936
  1937 				;-------------------------------
  1938
  1939 4A32 A5 62			lda m_bonusType
  1940 4A34 10 03			bpl GL_animate_highlight
  1941
  1942 4A36 20 06 58			jsr StartBonusAction
  1943
  1944
  1945 				;-------------------------------
  1946
  1947 4A39			GL_animate_highlight
  1948
  1949 4A39 20 C2 53			jsr AnimateBrickHighlight
  1950
  1951
  1952 				;-------------------------------
  1953
  1954 4A3C 20 C6 56			jsr CheckRestoreBrickList
  1955
  1956
  1957 				;-------------------------------
  1958
  1959 				; if the number of current bricks is low or equal than the number of extra balls for the player, then we open the exits
  1960 				; - still need to check for no bricks to clear the level!
  1961 				; - don't give the break bonus this way! (maybe use another flag like m_exitIsOpenFlag)
  1962 4A3F			GL_check_balls_exit_rule
  1963 					/*bit m_bonusBreakIsActive
  1964 					bmi GL_forced_break_exit
  1965
  1966 					lda m_numberOfBallsLeft
  1967 					cmp brick_lev_num
  1968 					bcc GL_check_end_level
  1969
  1970 					lda #0
  1971 					sta m_padAtRightLimitFlag
  1972 					sta m_padAtLeftLimitFlag
  1973
  1974 					lda #128
  1975 					sta m_bonusBreakIsActive
  1976
  1977 					jsr ForceOpenSideHoles
  1978
  1979 					jmp GL_forced_break_exit*/
  1979
  1980
  1981
  1982 4A3F			GL_check_end_level
  1983 4A3F A5 54			lda brick_lev_num
  1984 4A41 D0 03			bne GL_check_break_exit
  1985
  1986 				; 	lda #128			; go to the "left" level
  1987 				; 	sta m_nextLevelIsLeft
  1988
  1989 4A43 4C 8F 4A			jmp NextLevelStart
  1990
  1991
  1992 4A46			GL_check_break_exit
  1993 				; check effect of the "break" bonus
  1994 4A46 24 67			bit m_bonusBreakIsActive
  1995 4A48 10 1E			bpl GL_check_left_key
  1996
  1997 4A4A			GL_forced_break_exit
  1998 4A4A 24 0A			bit m_padAtLeftLimitFlag
  1999 4A4C 30 09			bmi GL_break_exit_left
  2000 4A4E 24 09			bit m_padAtRightLimitFlag
  2001 4A50 10 16			bpl GL_check_left_key
  2002
  2003 4A52 A9 00			lda #0			; go to the "right" level
  2004 4A54 4C 59 4A			jmp GL_break_exit_update
  2005
  2006 4A57			GL_break_exit_left
  2007 4A57 A9 80			lda #128			; go to the "left" level
  2008
  2009 4A59			GL_break_exit_update
  2010 4A59 85 53			sta m_nextLevelIsLeft
  2011
  2012 				; 	lda pad_xpos
  2013 				; 	cmp m_maxPadPosXPlusOne
  2014 				; 	bcc GL_check_shift_key
  2015
  2016 				; add $10000 to the score
  2017 4A5B A0 10			ldy #$10			; high byte of the score in BCD
  2018 4A5D A2 00			ldx #$00			; low byte of the score in BCD
  2019 4A5F 20 15 67			jsr AddScore
  2020
  2021 4A62 20 9D 4A			jsr ClearCurrentLevel
  2022 4A65 4C CA 4A			jmp GoToNextLevel
  2023
  2024
  2025 				; hack to pass a level using the SHIFT key (go left) or another key (go right)
  2026 4A68			GL_check_left_key
  2027
  2028 				.if .def SKIP_LEVEL_HACK
  2029 					lda SKCTL
  2030 					and #4			; any key pressed?
  2031 					bne GL_end_check_keys
  2032
  2033 					lda KBCODE
  2034 					and #%00111111		; bit7 -> control, bit6 -> shift
  2035 					cmp #6			; left arrow key
  2036 					bne GL_check_right_key
  2037
  2038 					lda #128			; go to the "left" level
  2039 					sta m_nextLevelIsLeft
  2040
  2041 					jsr ClearCurrentLevel
  2042 					jmp GoToNextLevel
  2043
  2044
  2045 				GL_check_right_key
  2046 					cmp #7			; right arrow key
  2047 					bne GL_end_check_keys
  2048
  2049 					lda #0			; go to the "right" level
  2050 					sta m_nextLevelIsLeft
  2051
  2052 					jsr ClearCurrentLevel
  2053 					jmp GoToNextLevel
  2054 				.endif
  2055
  2056 4A68			GL_end_check_keys
  2057
  2058
  2059 				;-------------------------------
  2060
  2061 4A68 4C 9C 49			jmp GameLoop
  2062
  2063
  2064 				;================================================================================
  2065
  2066 4A6B			LostPlayer
  2067 4A6B A5 59			lda bonus_flag
  2068 4A6D F0 03			beq LP_no_bonus
  2069
  2070 4A6F 20 C0 59			jsr ClearBonus
  2071
  2072 4A72			LP_no_bonus
  2073 4A72 A9 00			lda #0
  2074 4A74 85 62			sta m_bonusType
  2075
  2076 4A76 A9 B1			lda #[[256-BALL_SIZEX]-PM_OFFSET_X]
  2077 4A78 85 2F			sta ball_rxpos
  2078
  2079 4A7A C6 57			dec m_numberOfBallsLeft
  2080 4A7C D0 03			bne LP_next_ball
  2081
  2082 4A7E 4C 15 4B			jmp EndGame
  2083
  2084 4A81			LP_next_ball
  2085 					;jsr DisplayLives
  2086
  2087 4A81 20 2E 57			jsr DrawRestoreBrickList
  2088
  2089 4A84 A9 80			lda #128
  2090 4A86 85 71			sta m_ballLostThisLevelFlag
  2091
  2092 				// add code for the "ball lost" state here	and also start the pad destruction animation
  2093 				// (that should be updated in the VBI)
  2094 4A88 A9 09			lda #9
  2095 4A8A 85 47			sta m_soundFlag
  2096
  2097
  2098 4A8C 4C 94 48			jmp InitBall
  2099
  2100
  2101 				;--------------------------------------------------------------------------------
  2102
  2103 4A8F			NextLevelStart
  2104 4A8F A9 1E			lda #GS_LEVEL_WIN
  2105 4A91 85 A3			sta m_gameState
  2106
  2107
  2108 4A93 20 9D 4A			jsr ClearCurrentLevel
  2109
  2110
  2111 				; set a timer to open both sides holes in the VBI code
  2112 4A96 A9 23			lda #[FRAMES_TIMER_UNIT*7]
  2113 4A98 85 A7			sta m_openSidesWaitTimer
  2114
  2115
  2116 4A9A 4C 9C 49			jmp GameLoop
  2117
  2118
  2119 				;--------------------------------------------------------------------------------
  2120
  2121 4A9D			ClearCurrentLevel
  2122
  2123 				; clear falling bonus
  2124 4A9D			CCL_check_bonus_active
  2125 4A9D A5 59			lda bonus_flag
  2126 4A9F F0 03			beq CCL_no_bonus_active
  2127
  2128 4AA1 20 C0 59			jsr ClearBonus
  2129
  2130 4AA4			CCL_no_bonus_active
  2131 4AA4 A9 00			lda #0
  2132 4AA6 85 62			sta m_bonusType
  2133
  2134
  2135 				; clear balls
  2136 4AA8 A9 B1			lda #[[256-BALL_SIZEX]-PM_OFFSET_X]
  2137 4AAA 85 2F			sta ball_rxpos		; multiball code change
  2138
  2139 				; check if we ended the level with more than one active ball
  2140 4AAC A5 79			lda m_numberOfBallsInPlay
  2141 4AAE C9 02			cmp #2
  2142 4AB0 90 14			bcc CCL_no_multiball
  2143
  2144 4AB2 A9 B1			lda #[[256-BALL_SIZEX]-PM_OFFSET_X]
  2145 4AB4 85 30			sta ball_rxpos+1
  2146 4AB6 85 31			sta ball_rxpos+2
  2147
  2148 4AB8 A4 36			ldy old_ball_rypos+1
  2149 4ABA 20 4B 5B			jsr EraseBall2
  2150 4ABD A4 37			ldy old_ball_rypos+2
  2151 4ABF 20 85 5B			jsr EraseBall3
  2152
  2153 4AC2 A9 01			lda #1		; trick the VBI to not draw them again in this frame
  2154 4AC4 85 79			sta m_numberOfBallsInPlay
  2155 4AC6			CCL_no_multiball
  2156
  2157
  2158 4AC6 20 C9 66			jsr IncreaseBallsInHud
  2159
  2160
  2161 4AC9 60				rts
  2162
  2163
  2164 				;--------------------------------------------------------------------------------
  2165
  2166 4ACA			GoToNextLevel
  2167
  2168 				; add $5000 to the score if we passed the level without losing a ball
  2169 4ACA 24 71			bit m_ballLostThisLevelFlag
  2170 4ACC 30 0B			bmi GTNL_end_perfect_bonus
  2171
  2172 4ACE A5 54			lda brick_lev_num		; check also that there are no bricks left
  2173 4AD0 D0 07			bne GTNL_end_perfect_bonus
  2174
  2175 4AD2 A0 05			ldy #$05			; high byte of the score in BCD
  2176 4AD4 A2 00			ldx #$00			; low byte of the score in BCD
  2177 4AD6 20 15 67			jsr AddScore
  2178
  2179 4AD9			GTNL_end_perfect_bonus
  2180
  2181
  2182 4AD9 A5 D6			lda m_difficultyIndex
  2183 4ADB C9 03			cmp #3	; "extra" game mode
  2184 4ADD 90 17			bcc GTNL_game_mode_tree
  2185
  2186
  2187 				; "game mode extra" logic
  2188 4ADF			GTNL_game_mode_extra
  2189 4ADF A6 52			ldx m_levelIndex
  2190
  2191 				; unlock the completed level
  2192 4AE1 A9 80			lda #128
  2193 4AE3 9D E9 99			sta TabLevelUnlockedExtra,x
  2194
  2195
  2196 				; check if there are no more levels
  2197 4AE6 E0 19			cpx #LAST_LEVEL_GROUP_INDEX_EXTRA
  2198 4AE8 B0 23			bcs GTNL_end_game
  2199
  2200 4AEA BD D0 99			lda TabLevelLeftExitExtra,x
  2201 4AED AA				tax
  2202
  2203 4AEE 24 53			bit m_nextLevelIsLeft
  2204 4AF0 30 1E			bmi GTNL_set_next_level
  2205
  2206 4AF2 E8				inx		; the "right" level is always the "left" level plus one
  2207
  2208 4AF3 4C 10 4B			jmp GTNL_set_next_level
  2209
  2210
  2211 				; "game mode tree" logic
  2212 4AF6			GTNL_game_mode_tree
  2213 4AF6 A6 52			ldx m_levelIndex
  2214
  2215 				; unlock the completed level
  2216 4AF8 A9 80			lda #128
  2217 4AFA 9D 7E 99			sta TabLevelUnlocked,x
  2218
  2219
  2220 				; check if there are no more levels
  2221 4AFD E0 15			cpx #LAST_LEVEL_GROUP_INDEX
  2222 4AFF B0 0C			bcs GTNL_end_game
  2223
  2224 4B01 BD 69 99			lda TabLevelLeftExit,x
  2225 4B04 AA				tax
  2226
  2227 4B05 24 53			bit m_nextLevelIsLeft
  2228 4B07 30 07			bmi GTNL_set_next_level
  2229
  2230 4B09 E8				inx		; the "right" level is always the "left" level plus one
  2231
  2232 4B0A 4C 10 4B			jmp GTNL_set_next_level
  2233
  2234
  2235 				; end the game (or restart from first level)
  2236 4B0D			GTNL_end_game
  2237 					;ldx #0			; restart from first level
  2238 4B0D 4C 15 4B			jmp EndGame
  2239
  2240
  2241 4B10			GTNL_set_next_level
  2242 4B10 86 52			stx m_levelIndex
  2243
  2244 4B12 4C F5 46			jmp InitLevel
  2245
  2246
  2247 				;--------------------------------------------------------------------------------
  2248
  2249 4B15			EndGame
  2250 4B15 A4 35			ldy old_ball_rypos
  2251 4B17 20 11 5B			jsr EraseBall1
  2252 4B1A 20 4B 5B			jsr EraseBall2
  2253
  2254
  2255 				; don't update the score if we are playing in "easy" mode
  2256 				; 	lda m_difficultyIndex
  2257 				; 	beq EG_end_high_score
  2258
  2259
  2260 4B1D 20 BB 67			jsr DisplayLastScore
  2261
  2262 				; update session high score
  2263 4B20 A5 D4			lda m_sessionHighScore+2
  2264 4B22 C5 86			cmp m_playerScore+2
  2265 4B24 90 10			bcc EG_new_high_score
  2266 4B26 D0 20			bne EG_end_high_score
  2267
  2268 4B28 A5 D3			lda m_sessionHighScore+1
  2269 4B2A C5 85			cmp m_playerScore+1
  2270 4B2C 90 08			bcc EG_new_high_score
  2271 4B2E D0 18			bne EG_end_high_score
  2272
  2273 4B30 A5 D2			lda m_sessionHighScore
  2274 4B32 C5 84			cmp m_playerScore
  2275 4B34 B0 12			bcs EG_end_high_score
  2276
  2277 4B36			EG_new_high_score
  2278 4B36 A5 84			lda m_playerScore
  2279 4B38 85 D2			sta m_sessionHighScore
  2280 4B3A A5 85			lda m_playerScore+1
  2281 4B3C 85 D3			sta m_sessionHighScore+1
  2282 4B3E A5 86			lda m_playerScore+2
  2283 4B40 85 D4			sta m_sessionHighScore+2
  2284
  2285 4B42 20 56 67			jsr DisplaySessionScore
  2286
  2287 4B45 20 97 67			jsr DisplayHighScoreLevel
  2288
  2289 4B48			EG_end_high_score
  2290
  2291 4B48 20 4E 4B			jsr SaveGameTypeHighScore
  2292
  2293
  2294 4B4B 4C AF 40			jmp StartGame
  2295
  2296
  2297 				;================================================================================
  2298 4B4E			SaveGameTypeHighScore
  2299 4B4E A5 D6			lda m_difficultyIndex
  2300 4B50 C9 01			cmp #1
  2301 4B52 F0 2C			beq SGTHS_casual
  2302 4B54 C9 02			cmp #2
  2303 4B56 F0 4C			beq SGTHS_arcade
  2304 4B58 C9 03			cmp #3
  2305 4B5A F0 6C			beq SGTHS_extra
  2306
  2307 4B5C			SGTHS_easy
  2308 4B5C A2 00			ldx #0
  2309
  2310 4B5E			SGTHS_easy_loop
  2311 4B5E BD 6E A0			lda DL2_score_line,x
  2312 4B61 9D 16 A2			sta Tab_score_line_easy,x
  2313
  2314 4B64 E8				inx
  2315 4B65 E0 20			cpx #BYTES_LINE
  2316 4B67 D0 F5			bne SGTHS_easy_loop
  2317
  2318 4B69 A5 D2			lda m_sessionHighScore
  2319 4B6B 8D 96 A2			sta TabHighScoreEasy
  2320 4B6E A5 D3			lda m_sessionHighScore+1
  2321 4B70 8D 97 A2			sta TabHighScoreEasy+1
  2322 4B73 A5 D4			lda m_sessionHighScore+2
  2323 4B75 8D 98 A2			sta TabHighScoreEasy+2
  2324
  2325 4B78 A5 D5			lda m_sessionHighLevel
  2326 4B7A 8D 99 A2			sta TabHighLevelEasy
  2327
  2328 4B7D 4C E9 4B			jmp SGTHS_exit
  2329
  2330
  2331 4B80			SGTHS_casual
  2332 4B80 A2 00			ldx #0
  2333
  2334 4B82			SGTHS_casual_loop
  2335 4B82 BD 6E A0			lda DL2_score_line,x
  2336 4B85 9D 36 A2			sta Tab_score_line_casual,x
  2337
  2338 4B88 E8				inx
  2339 4B89 E0 20			cpx #BYTES_LINE
  2340 4B8B D0 F5			bne SGTHS_casual_loop
  2341
  2342 4B8D A5 D2			lda m_sessionHighScore
  2343 4B8F 8D 9A A2			sta TabHighScoreCasual
  2344 4B92 A5 D3			lda m_sessionHighScore+1
  2345 4B94 8D 9B A2			sta TabHighScoreCasual+1
  2346 4B97 A5 D4			lda m_sessionHighScore+2
  2347 4B99 8D 9C A2			sta TabHighScoreCasual+2
  2348
  2349 4B9C A5 D5			lda m_sessionHighLevel
  2350 4B9E 8D 9D A2			sta TabHighLevelCasual
  2351
  2352 4BA1 4C E9 4B			jmp SGTHS_exit
  2353
  2354
  2355 4BA4			SGTHS_arcade
  2356 4BA4 A2 00			ldx #0
  2357
  2358 4BA6			SGTHS_arcade_loop
  2359 4BA6 BD 6E A0			lda DL2_score_line,x
  2360 4BA9 9D 56 A2			sta Tab_score_line_arcade,x
  2361
  2362 4BAC E8				inx
  2363 4BAD E0 20			cpx #BYTES_LINE
  2364 4BAF D0 F5			bne SGTHS_arcade_loop
  2365
  2366 4BB1 A5 D2			lda m_sessionHighScore
  2367 4BB3 8D 9E A2			sta TabHighScoreArcade
  2368 4BB6 A5 D3			lda m_sessionHighScore+1
  2369 4BB8 8D 9F A2			sta TabHighScoreArcade+1
  2370 4BBB A5 D4			lda m_sessionHighScore+2
  2371 4BBD 8D A0 A2			sta TabHighScoreArcade+2
  2372
  2373 4BC0 A5 D5			lda m_sessionHighLevel
  2374 4BC2 8D A1 A2			sta TabHighLevelArcade
  2375
  2376 4BC5 4C E9 4B			jmp SGTHS_exit
  2377
  2378
  2379 4BC8			SGTHS_extra
  2380 4BC8 A2 00			ldx #0
  2381
  2382 4BCA			SGTHS_extra_loop
  2383 4BCA BD 6E A0			lda DL2_score_line,x
  2384 4BCD 9D 76 A2			sta Tab_score_line_extra,x
  2385
  2386 4BD0 E8				inx
  2387 4BD1 E0 20			cpx #BYTES_LINE
  2388 4BD3 D0 F5			bne SGTHS_extra_loop
  2389
  2390 4BD5 A5 D2			lda m_sessionHighScore
  2391 4BD7 8D A2 A2			sta TabHighScoreExtra
  2392 4BDA A5 D3			lda m_sessionHighScore+1
  2393 4BDC 8D A3 A2			sta TabHighScoreExtra+1
  2394 4BDF A5 D4			lda m_sessionHighScore+2
  2395 4BE1 8D A4 A2			sta TabHighScoreExtra+2
  2396
  2397 4BE4 A5 D5			lda m_sessionHighLevel
  2398 4BE6 8D A5 A2			sta TabHighLevelExtra
  2399
  2400
  2401 4BE9			SGTHS_exit
  2402 4BE9 60				rts
  2403
  2404
  2405 4BEA			RestoreGameTypeHighScore
  2406 4BEA A5 D6			lda m_difficultyIndex
  2407 4BEC C9 01			cmp #1
  2408 4BEE F0 2C			beq RGTHS_casual
  2409 4BF0 C9 02			cmp #2
  2410 4BF2 F0 4C			beq RGTHS_arcade
  2411 4BF4 C9 03			cmp #3
  2412 4BF6 F0 6C			beq RGTHS_extra
  2413
  2414 4BF8			RGTHS_easy
  2415 4BF8 A2 00			ldx #0
  2416
  2417 4BFA			RGTHS_easy_loop
  2418 4BFA BD 16 A2			lda Tab_score_line_easy,x
  2419 4BFD 9D 6E A0			sta DL2_score_line,x
  2420
  2421 4C00 E8				inx
  2422 4C01 E0 20			cpx #BYTES_LINE
  2423 4C03 D0 F5			bne RGTHS_easy_loop
  2424
  2425 4C05 AD 96 A2			lda TabHighScoreEasy
  2426 4C08 85 D2			sta m_sessionHighScore
  2427 4C0A AD 97 A2			lda TabHighScoreEasy+1
  2428 4C0D 85 D3			sta m_sessionHighScore+1
  2429 4C0F AD 98 A2			lda TabHighScoreEasy+2
  2430 4C12 85 D4			sta m_sessionHighScore+2
  2431
  2432 4C14 AD 99 A2			lda TabHighLevelEasy
  2433 4C17 85 D5			sta m_sessionHighLevel
  2434
  2435 4C19 4C 85 4C			jmp RGTHS_exit
  2436
  2437
  2438 4C1C			RGTHS_casual
  2439 4C1C A2 00			ldx #0
  2440
  2441 4C1E			RGTHS_casual_loop
  2442 4C1E BD 36 A2			lda Tab_score_line_casual,x
  2443 4C21 9D 6E A0			sta DL2_score_line,x
  2444
  2445 4C24 E8				inx
  2446 4C25 E0 20			cpx #BYTES_LINE
  2447 4C27 D0 F5			bne RGTHS_casual_loop
  2448
  2449 4C29 AD 9A A2			lda TabHighScoreCasual
  2450 4C2C 85 D2			sta m_sessionHighScore
  2451 4C2E AD 9B A2			lda TabHighScoreCasual+1
  2452 4C31 85 D3			sta m_sessionHighScore+1
  2453 4C33 AD 9C A2			lda TabHighScoreCasual+2
  2454 4C36 85 D4			sta m_sessionHighScore+2
  2455
  2456 4C38 AD 9D A2			lda TabHighLevelCasual
  2457 4C3B 85 D5			sta m_sessionHighLevel
  2458
  2459 4C3D 4C 85 4C			jmp RGTHS_exit
  2460
  2461
  2462 4C40			RGTHS_arcade
  2463 4C40 A2 00			ldx #0
  2464
  2465 4C42			RGTHS_arcade_loop
  2466 4C42 BD 56 A2			lda Tab_score_line_arcade,x
  2467 4C45 9D 6E A0			sta DL2_score_line,x
  2468
  2469 4C48 E8				inx
  2470 4C49 E0 20			cpx #BYTES_LINE
  2471 4C4B D0 F5			bne RGTHS_arcade_loop
  2472
  2473 4C4D AD 9E A2			lda TabHighScoreArcade
  2474 4C50 85 D2			sta m_sessionHighScore
  2475 4C52 AD 9F A2			lda TabHighScoreArcade+1
  2476 4C55 85 D3			sta m_sessionHighScore+1
  2477 4C57 AD A0 A2			lda TabHighScoreArcade+2
  2478 4C5A 85 D4			sta m_sessionHighScore+2
  2479
  2480 4C5C AD A1 A2			lda TabHighLevelArcade
  2481 4C5F 85 D5			sta m_sessionHighLevel
  2482
  2483 4C61 4C 85 4C			jmp RGTHS_exit
  2484
  2485
  2486 4C64			RGTHS_extra
  2487 4C64 A2 00			ldx #0
  2488
  2489 4C66			RGTHS_extra_loop
  2490 4C66 BD 76 A2			lda Tab_score_line_extra,x
  2491 4C69 9D 6E A0			sta DL2_score_line,x
  2492
  2493 4C6C E8				inx
  2494 4C6D E0 20			cpx #BYTES_LINE
  2495 4C6F D0 F5			bne RGTHS_extra_loop
  2496
  2497 4C71 AD A2 A2			lda TabHighScoreExtra
  2498 4C74 85 D2			sta m_sessionHighScore
  2499 4C76 AD A3 A2			lda TabHighScoreExtra+1
  2500 4C79 85 D3			sta m_sessionHighScore+1
  2501 4C7B AD A4 A2			lda TabHighScoreExtra+2
  2502 4C7E 85 D4			sta m_sessionHighScore+2
  2503
  2504 4C80 AD A5 A2			lda TabHighLevelExtra
  2505 4C83 85 D5			sta m_sessionHighLevel
  2506
  2507
  2508 4C85			RGTHS_exit
  2509 4C85 60				rts
  2510
  2511
  2512 				;================================================================================
  2513
  2514 4C86			CheckBallsLost
  2515
  2516 				; first erase the PM and move it out the screen for every ball lost
  2517 4C86 24 3A			bit m_ballLostFlag+2
  2518 4C88 10 09			bpl CBL_check_erase_ball2
  2519
  2520 4C8A A4 37			ldy old_ball_rypos+2
  2521 4C8C 20 85 5B			jsr EraseBall3
  2522
  2523 4C8F A9 B1			lda #[[256-BALL_SIZEX]-PM_OFFSET_X]
  2524 4C91 85 31			sta ball_rxpos+2
  2525
  2526 4C93			CBL_check_erase_ball2
  2527 4C93 24 39			bit m_ballLostFlag+1
  2528 4C95 10 09			bpl CBL_check_erase_ball1
  2529
  2530 4C97 A4 36			ldy old_ball_rypos+1
  2531 4C99 20 4B 5B			jsr EraseBall2
  2532
  2533 4C9C A9 B1			lda #[[256-BALL_SIZEX]-PM_OFFSET_X]
  2534 4C9E 85 30			sta ball_rxpos+1
  2535
  2536 4CA0			CBL_check_erase_ball1
  2537 4CA0 24 38			bit m_ballLostFlag
  2538 4CA2 10 09			bpl CBL_update_ball_info
  2539
  2540 4CA4 A4 35			ldy old_ball_rypos
  2541 4CA6 20 11 5B			jsr EraseBall1
  2542
  2543 4CA9 A9 B1			lda #[[256-BALL_SIZEX]-PM_OFFSET_X]
  2544 4CAB 85 2F			sta ball_rxpos
  2545
  2546
  2547 				;-------------------------------
  2548 				; now update the number of balls in play and move the active ball info around,
  2549 				; so the "alive" balls are always at the start of the list
  2550 4CAD			CBL_update_ball_info
  2551 4CAD A5 79			lda m_numberOfBallsInPlay
  2552 4CAF C9 03			cmp #3
  2553 4CB1 D0 1E			bne CBL_check_for_two
  2554
  2555 				; playing with 3 balls
  2556 4CB3 24 3A			bit m_ballLostFlag+2
  2557 4CB5 10 02			bpl CBL_3balls_check_second
  2558 4CB7 C6 79			dec m_numberOfBallsInPlay
  2559
  2560 4CB9			CBL_3balls_check_second
  2561 4CB9 24 39			bit m_ballLostFlag+1
  2562 4CBB 10 05			bpl CBL_3balls_check_first
  2563 4CBD 20 3A 4D			jsr MoveThirdBallInfo
  2564 4CC0 C6 79			dec m_numberOfBallsInPlay
  2565
  2566 4CC2			CBL_3balls_check_first
  2567 4CC2 24 38			bit m_ballLostFlag
  2568 4CC4 10 1E			bpl CBL_check_antialias
  2569 4CC6 20 F9 4C			jsr MoveSecondBallInfo
  2570 4CC9 20 3A 4D			jsr MoveThirdBallInfo
  2571 4CCC C6 79			dec m_numberOfBallsInPlay
  2572
  2573 4CCE 4C E4 4C			jmp CBL_check_antialias
  2574
  2575
  2576 				;-------------------------------
  2577
  2578 4CD1			CBL_check_for_two
  2579 4CD1 C9 02			cmp #2
  2580 4CD3 D0 1D			bne CBL_check_for_one
  2581
  2582 4CD5			CBL_playing_with_two
  2583 				; playing with 2 balls
  2584 4CD5 24 39			bit m_ballLostFlag+1
  2585 4CD7 10 02			bpl CBL_2balls_check_first
  2586 4CD9 C6 79			dec m_numberOfBallsInPlay
  2587
  2588 4CDB			CBL_2balls_check_first
  2589 4CDB 24 38			bit m_ballLostFlag
  2590 4CDD 10 05			bpl CBL_check_antialias
  2591 4CDF 20 F9 4C			jsr MoveSecondBallInfo
  2592 4CE2 C6 79			dec m_numberOfBallsInPlay
  2593
  2594 4CE4			CBL_check_antialias
  2595 4CE4 A5 79			lda m_numberOfBallsInPlay
  2596 4CE6 C9 01			cmp #1
  2597 4CE8 D0 0E			bne CBL_end
  2598
  2599 				; restore one ball antialiasing color
  2600 4CEA A5 77			lda m_ballAntialiasColor
  2601 4CEC 8D 13 D0			sta COLPM1
  2602
  2603 4CEF 4C F8 4C			jmp CBL_end
  2604
  2605
  2606 				;-------------------------------
  2607
  2608 4CF2			CBL_check_for_one
  2609 				; playing with 1 ball
  2610 4CF2 24 38			bit m_ballLostFlag
  2611 4CF4 10 02			bpl CBL_end
  2612
  2613 				; lost the last ball
  2614 4CF6 C6 79			dec m_numberOfBallsInPlay
  2615
  2616
  2617 4CF8			CBL_end
  2618 4CF8 60				rts
  2619
  2620
  2621 				;================================================================================
  2622
  2623 4CF9			MoveSecondBallInfo
  2624 4CF9 A5 0C			lda ball_xstep_1+1
  2625 4CFB 85 0B			sta ball_xstep_1
  2626 4CFD A5 0F			lda ball_xstep_2+1
  2627 4CFF 85 0E			sta ball_xstep_2
  2628 4D01 A5 12			lda ball_ystep_1+1
  2629 4D03 85 11			sta ball_ystep_1
  2630 4D05 A5 15			lda ball_ystep_2+1
  2631 4D07 85 14			sta ball_ystep_2
  2632
  2633 4D09 A5 18			lda ball_xdir+1
  2634 4D0B 85 17			sta ball_xdir
  2635 4D0D A5 1B			lda ball_ydir+1
  2636 4D0F 85 1A			sta ball_ydir
  2637
  2638 4D11 A5 1E			lda ball_xpos_1+1
  2639 4D13 85 1D			sta ball_xpos_1
  2640 4D15 A5 21			lda ball_xpos_2+1
  2641 4D17 85 20			sta ball_xpos_2
  2642 4D19 A5 24			lda ball_xpos_3+1
  2643 4D1B 85 23			sta ball_xpos_3
  2644
  2645 4D1D A5 27			lda ball_ypos_1+1
  2646 4D1F 85 26			sta ball_ypos_1
  2647 4D21 A5 2A			lda ball_ypos_2+1
  2648 4D23 85 29			sta ball_ypos_2
  2649 4D25 A5 2D			lda ball_ypos_3+1
  2650 4D27 85 2C			sta ball_ypos_3
  2651
  2652 4D29 A5 30			lda ball_rxpos+1
  2653 4D2B 85 2F			sta ball_rxpos
  2654 4D2D A5 33			lda ball_rypos+1
  2655 4D2F 85 32			sta ball_rypos
  2656 4D31 A5 36			lda old_ball_rypos+1
  2657 4D33 85 35			sta old_ball_rypos
  2658
  2659
  2660 4D35 A4 36			ldy old_ball_rypos+1
  2661 4D37 4C 4B 5B			jmp EraseBall2
  2662
  2663 					;rts
  2664
  2665
  2666 4D3A			MoveThirdBallInfo
  2667 4D3A A5 0D			lda ball_xstep_1+2
  2668 4D3C 85 0C			sta ball_xstep_1+1
  2669 4D3E A5 10			lda ball_xstep_2+2
  2670 4D40 85 0F			sta ball_xstep_2+1
  2671 4D42 A5 13			lda ball_ystep_1+2
  2672 4D44 85 12			sta ball_ystep_1+1
  2673 4D46 A5 16			lda ball_ystep_2+2
  2674 4D48 85 15			sta ball_ystep_2+1
  2675
  2676 4D4A A5 19			lda ball_xdir+2
  2677 4D4C 85 18			sta ball_xdir+1
  2678 4D4E A5 1C			lda ball_ydir+2
  2679 4D50 85 1B			sta ball_ydir+1
  2680
  2681 4D52 A5 1F			lda ball_xpos_1+2
  2682 4D54 85 1E			sta ball_xpos_1+1
  2683 4D56 A5 22			lda ball_xpos_2+2
  2684 4D58 85 21			sta ball_xpos_2+1
  2685 4D5A A5 25			lda ball_xpos_3+2
  2686 4D5C 85 24			sta ball_xpos_3+1
  2687
  2688 4D5E A5 28			lda ball_ypos_1+2
  2689 4D60 85 27			sta ball_ypos_1+1
  2690 4D62 A5 2B			lda ball_ypos_2+2
  2691 4D64 85 2A			sta ball_ypos_2+1
  2692 4D66 A5 2E			lda ball_ypos_3+2
  2693 4D68 85 2D			sta ball_ypos_3+1
  2694
  2695 4D6A A5 31			lda ball_rxpos+2
  2696 4D6C 85 30			sta ball_rxpos+1
  2697 4D6E A5 34			lda ball_rypos+2
  2698 4D70 85 33			sta ball_rypos+1
  2699 4D72 A5 37			lda old_ball_rypos+2
  2700 4D74 85 36			sta old_ball_rypos+1
  2701
  2702
  2703 4D76 A4 37			ldy old_ball_rypos+2
  2704 4D78 4C 85 5B			jmp EraseBall3
  2705
  2706 					;rts
  2707
  2708
  2709 4D7B			CopyFirstBallInfo
  2710 4D7B A5 0B			lda ball_xstep_1
  2711 4D7D 85 0C			sta ball_xstep_1+1
  2712 4D7F 85 0D			sta ball_xstep_1+2
  2713 4D81 A5 0E			lda ball_xstep_2
  2714 4D83 85 0F			sta ball_xstep_2+1
  2715 4D85 85 10			sta ball_xstep_2+2
  2716 4D87 A5 11			lda ball_ystep_1
  2717 4D89 85 12			sta ball_ystep_1+1
  2718 4D8B 85 13			sta ball_ystep_1+2
  2719 4D8D A5 14			lda ball_ystep_2
  2720 4D8F 85 15			sta ball_ystep_2+1
  2721 4D91 85 16			sta ball_ystep_2+2
  2722
  2723 4D93 A5 17			lda ball_xdir
  2724 4D95 85 18			sta ball_xdir+1
  2725 4D97 85 19			sta ball_xdir+2
  2726 4D99 A5 1A			lda ball_ydir
  2727 4D9B 85 1B			sta ball_ydir+1
  2728 4D9D 85 1C			sta ball_ydir+2
  2729
  2730 4D9F A5 1D			lda ball_xpos_1
  2731 4DA1 85 1E			sta ball_xpos_1+1
  2732 4DA3 85 1F			sta ball_xpos_1+2
  2733 4DA5 A5 20			lda ball_xpos_2
  2734 4DA7 85 21			sta ball_xpos_2+1
  2735 4DA9 85 22			sta ball_xpos_2+2
  2736 4DAB A5 23			lda ball_xpos_3
  2737 4DAD 85 24			sta ball_xpos_3+1
  2738 4DAF 85 25			sta ball_xpos_3+2
  2739
  2740 4DB1 A5 26			lda ball_ypos_1
  2741 4DB3 85 27			sta ball_ypos_1+1
  2742 4DB5 85 28			sta ball_ypos_1+2
  2743 4DB7 A5 29			lda ball_ypos_2
  2744 4DB9 85 2A			sta ball_ypos_2+1
  2745 4DBB 85 2B			sta ball_ypos_2+2
  2746 4DBD A5 2C			lda ball_ypos_3
  2747 4DBF 85 2D			sta ball_ypos_3+1
  2748 4DC1 85 2E			sta ball_ypos_3+2
  2749
  2750 4DC3 A5 2F			lda ball_rxpos
  2751 4DC5 85 30			sta ball_rxpos+1
  2752 4DC7 85 31			sta ball_rxpos+2
  2753 4DC9 A5 32			lda ball_rypos
  2754 4DCB 85 33			sta ball_rypos+1
  2755 4DCD 85 34			sta ball_rypos+2
  2756 4DCF A5 35			lda old_ball_rypos
  2757 4DD1 85 36			sta old_ball_rypos+1
  2758 4DD3 85 37			sta old_ball_rypos+2
  2759
  2760 4DD5 60				rts
  2761
  2762
  2763 				;================================================================================
  2764
  2765 				; this is used to set the direction of the new balls when using a multi ball powerup
  2766 4DD6			SetDirectionForNewBalls
  2767 				; 	lda ball_xstep_1
  2768 				; 	sec
  2769 				; 	sbc #16
  2770 				; 	sta ball_xstep_1+1
  2771 				;
  2772 				; 	lda ball_xstep_1
  2773 				; 	clc
  2774 				; 	adc #16
  2775 				; 	sta ball_xstep_1+2
  2776
  2777 					/*lda ball_xstep_1
  2778 					cmp tab_pad_xstep1
  2779 					bne SDFNB_check_second_step
  2780
  2781 					lda tab_pad_xstep1+1		; set X step for ball 2
  2782 					sta ball_xstep_1+1
  2783 					lda tab_pad_xstep2+1
  2784 					sta ball_xstep_2+1
  2785 					lda tab_pad_ystep1+1		; set Y step for ball 2
  2786 					sta ball_ystep_1+1
  2787 					lda tab_pad_ystep2+1
  2788 					sta ball_ystep_2+1
  2789
  2790 					lda tab_pad_xstep1+2		; set X step for ball 3
  2791 					sta ball_xstep_1+2
  2792 					lda tab_pad_xstep2+2
  2793 					sta ball_xstep_2+2
  2794 					lda tab_pad_ystep1+2		; set Y step for ball 3
  2795 					sta ball_ystep_1+2
  2796 					lda tab_pad_ystep2+2
  2797 					sta ball_ystep_2+2
  2798
  2799 					jmp SDFNB_end_check_step
  2800
  2801 				SDFNB_check_second_step
  2802 					cmp tab_pad_xstep1+1
  2803 					bne SDFNB_is_third_step
  2804
  2805 					lda tab_pad_xstep1			; set X step for ball 2
  2806 					sta ball_xstep_1+1
  2807 					lda tab_pad_xstep2
  2808 					sta ball_xstep_2+1
  2809 					lda tab_pad_ystep1			; set Y step for ball 2
  2810 					sta ball_ystep_1+1
  2811 					lda tab_pad_ystep2
  2812 					sta ball_ystep_2+1
  2813
  2814 					lda tab_pad_xstep1+2		; set X step for ball 3
  2815 					sta ball_xstep_1+2
  2816 					lda tab_pad_xstep2+2
  2817 					sta ball_xstep_2+2
  2818 					lda tab_pad_ystep1+2		; set Y step for ball 3
  2819 					sta ball_ystep_1+2
  2820 					lda tab_pad_ystep2+2
  2821 					sta ball_ystep_2+2
  2822
  2823 					jmp SDFNB_end_check_step
  2824
  2825 				SDFNB_is_third_step
  2826 					lda tab_pad_xstep1			; set X step for ball 2
  2827 					sta ball_xstep_1+1
  2828 					lda tab_pad_xstep2
  2829 					sta ball_xstep_2+1
  2830 					lda tab_pad_ystep1			; set Y step for ball 2
  2831 					sta ball_ystep_1+1
  2832 					lda tab_pad_ystep2
  2833 					sta ball_ystep_2+1
  2834
  2835 					lda tab_pad_xstep1+1		; set X step for ball 3
  2836 					sta ball_xstep_1+2
  2837 					lda tab_pad_xstep2+1
  2838 					sta ball_xstep_2+2
  2839 					lda tab_pad_ystep1+1		; set Y step for ball 3
  2840 					sta ball_ystep_1+2
  2841 					lda tab_pad_ystep2+1
  2842 					sta ball_ystep_2+2
  2843
  2844 				SDFNB_end_check_step
  2845 					rts*/
  2845
  2846
  2847 				; use 20 degrees for the first
  2848 4DD6 AD 56 93			lda tab_pad_xstep1+0
  2849 4DD9 85 0B			sta ball_xstep_1
  2850 4DDB AD 5B 93			lda tab_pad_xstep2+0
  2851 4DDE 85 0E			sta ball_xstep_2
  2852
  2853 4DE0 AD 60 93			lda tab_pad_ystep1+0
  2854 4DE3 85 11			sta ball_ystep_1
  2855 4DE5 AD 65 93			lda tab_pad_ystep2+0
  2856 4DE8 85 14			sta ball_ystep_2
  2857
  2858 				; use 45 degrees for the second
  2859 4DEA AD 58 93			lda tab_pad_xstep1+2
  2860 4DED 85 0C			sta ball_xstep_1+1
  2861 4DEF AD 5D 93			lda tab_pad_xstep2+2
  2862 4DF2 85 0F			sta ball_xstep_2+1
  2863
  2864 4DF4 AD 62 93			lda tab_pad_ystep1+2
  2865 4DF7 85 12			sta ball_ystep_1+1
  2866 4DF9 AD 67 93			lda tab_pad_ystep2+2
  2867 4DFC 85 15			sta ball_ystep_2+1
  2868
  2869 				; use 70 degrees for the third
  2870 4DFE AD 5A 93			lda tab_pad_xstep1+4
  2871 4E01 85 0D			sta ball_xstep_1+2
  2872 4E03 AD 5F 93			lda tab_pad_xstep2+4
  2873 4E06 85 10			sta ball_xstep_2+2
  2874
  2875 4E08 AD 64 93			lda tab_pad_ystep1+4
  2876 4E0B 85 13			sta ball_ystep_1+2
  2877 4E0D AD 69 93			lda tab_pad_ystep2+4
  2878 4E10 85 16			sta ball_ystep_2+2
  2879
  2880 4E12 60				rts
  2881
  2882
  2883 				;================================================================================
  2884
  2885 				; this is used to change the first ball angle, after too many hits without hitting the paddle (to avoid a possible loop)
  2886 4E13			ChangeFirstBallDirection
  2887 4E13 A5 0B			lda ball_xstep_1
  2888 4E15 CD 56 93			cmp tab_pad_xstep1
  2889 4E18 D0 15			bne CFBD_check_second_step
  2890
  2891 				; if 20 use 45 degrees..
  2892 4E1A AD 58 93			lda tab_pad_xstep1+2
  2893 4E1D 85 0B			sta ball_xstep_1
  2894 4E1F AD 5D 93			lda tab_pad_xstep2+2
  2895 4E22 85 0E			sta ball_xstep_2
  2896
  2897 4E24 AD 62 93			lda tab_pad_ystep1+2
  2898 4E27 85 11			sta ball_ystep_1
  2899 4E29 AD 67 93			lda tab_pad_ystep2+2
  2900 4E2C 85 14			sta ball_ystep_2
  2901
  2902 4E2E 60				rts
  2903
  2904
  2905 4E2F			CFBD_check_second_step
  2906 4E2F CD 58 93			cmp tab_pad_xstep1+2
  2907 4E32 D0 15			bne CFBD_check_third_step
  2908
  2909 				; if 45 use 70 degrees..
  2910 4E34 AD 5A 93			lda tab_pad_xstep1+4
  2911 4E37 85 0B			sta ball_xstep_1
  2912 4E39 AD 5F 93			lda tab_pad_xstep2+4
  2913 4E3C 85 0E			sta ball_xstep_2
  2914
  2915 4E3E AD 64 93			lda tab_pad_ystep1+4
  2916 4E41 85 11			sta ball_ystep_1
  2917 4E43 AD 69 93			lda tab_pad_ystep2+4
  2918 4E46 85 14			sta ball_ystep_2
  2919
  2920 4E48 60				rts
  2921
  2922
  2923 4E49			CFBD_check_third_step
  2924 4E49 CD 5A 93			cmp tab_pad_xstep1+4
  2925 4E4C D0 15			bne CFBD_check_forth_step
  2926
  2927 				; if 70 use 32.5 degrees..
  2928 4E4E AD 57 93			lda tab_pad_xstep1+1
  2929 4E51 85 0B			sta ball_xstep_1
  2930 4E53 AD 5C 93			lda tab_pad_xstep2+1
  2931 4E56 85 0E			sta ball_xstep_2
  2932
  2933 4E58 AD 61 93			lda tab_pad_ystep1+1
  2934 4E5B 85 11			sta ball_ystep_1
  2935 4E5D AD 66 93			lda tab_pad_ystep2+1
  2936 4E60 85 14			sta ball_ystep_2
  2937
  2938 4E62 60				rts
  2939
  2940
  2941 4E63			CFBD_check_forth_step
  2942 4E63 CD 57 93			cmp tab_pad_xstep1+1
  2943 4E66 D0 15			bne CFBD_is_fifth_step
  2944
  2945 				; if 32.5 use 57.5 degrees..
  2946 4E68 AD 59 93			lda tab_pad_xstep1+3
  2947 4E6B 85 0B			sta ball_xstep_1
  2948 4E6D AD 5E 93			lda tab_pad_xstep2+3
  2949 4E70 85 0E			sta ball_xstep_2
  2950
  2951 4E72 AD 63 93			lda tab_pad_ystep1+3
  2952 4E75 85 11			sta ball_ystep_1
  2953 4E77 AD 68 93			lda tab_pad_ystep2+3
  2954 4E7A 85 14			sta ball_ystep_2
  2955
  2956 4E7C 60				rts
  2957
  2958
  2959 4E7D			CFBD_is_fifth_step
  2960 				; if 57.5 use 20 degrees..
  2961 4E7D AD 56 93			lda tab_pad_xstep1+0
  2962 4E80 85 0B			sta ball_xstep_1
  2963 4E82 AD 5B 93			lda tab_pad_xstep2+0
  2964 4E85 85 0E			sta ball_xstep_2
  2965
  2966 4E87 AD 60 93			lda tab_pad_ystep1+0
  2967 4E8A 85 11			sta ball_ystep_1
  2968 4E8C AD 65 93			lda tab_pad_ystep2+0
  2969 4E8F 85 14			sta ball_ystep_2
  2970
  2971 4E91 60				rts
  2972
  2973
  2974 				;================================================================================
  2975
  2976 4E92				icl "pad_ball.asm"
Source: D:\!Delphi\mads\examples\games\pad\pad_ball.asm
     1
     2 4E92			UpdateBallPosition
     3
     4 				; the register X must have the current ball index
     5 4E92 A6 7A			ldx m_currentBallIndex
     6
     7
     8 				; first check if the ball is catched by the paddle
     9 4E94 24 75			bit m_ballCatchedByPadFlag		; OPTIMIZE: this check should be done only once per frame
    10 4E96 10 0A			bpl hmv
    11
    12 4E98 A5 08			lda pad_xpos
    13 4E9A 18				clc
    14 4E9B 65 74			adc m_catchedBallPadOffset
    15 4E9D 95 1D			sta ball_xpos_1,x
    16
    17 4E9F 4C C7 4F			jmp md_exit
    18
    19
    20 				;--------------------------------------------------------------
    21 				; check horizontal movement of the ball
    22
    23 4EA2 B5 17		hmv	lda ball_xdir,x				; OPTIMIZE:  should be 0 or 128, bmi/bpl check instead (there is no "0" case right now)
    24 4EA4 C9 01		clf	cmp #1			; move left
    25 4EA6 D0 3F			bne crg
    26
    27 				; update position of the ball (step below one pixel)
    28 4EA8			move_left
    29 4EA8 B5 23			lda ball_xpos_3,x				; OPTIMIZE: probably there is no need for the xpos_3, xstep_2
    30 4EAA 38				sec
    31 4EAB F5 0E			sbc ball_xstep_2,x
    32 4EAD 95 23			sta ball_xpos_3,x
    33 4EAF B5 20			lda ball_xpos_2,x
    34 4EB1 F5 0B			sbc ball_xstep_1,x
    35 4EB3 B0 02			bcs ml1
    36 4EB5 D6 1D			dec ball_xpos_1,x
    37 4EB7 95 20		ml1	sta ball_xpos_2,x
    38
    39 				; check left border collision first
    40 4EB9 B5 1D			lda ball_xpos_1,x				; OPTIMIZE?: normally only need this check once per frame (enemies can change that!), do this check #3
    41 4EBB C9 FF			cmp #MIN_BALL_POSX-1
    42 4EBD D0 06			bne ml2
    43
    44 4EBF 20 47 50			jsr DoHitLeft					; OPTIMIZE: inside..
    45 4EC2 4C E4 4E			jmp ml_exit
    46
    47
    48 				; check bottom limit of the bricks zone (zone without bricks, could do the same for the top zone).. OPTIMIZE: do these checks #2!
    49 4EC5 B5 26		ml2	lda ball_ypos_1,x
    50 4EC7 C9 90			cmp #BRICK_SIZEY*BOTTOM_BRICK_NUM
    51 4EC9 B0 19			bcs ml_exit
    52
    53 				; check if we are touching the right limit of a brick.. OPTIMIZE: do this check #4!
    54 4ECB B5 1D			lda ball_xpos_1,x
    55 4ECD 29 07			and #%111			; x offset (0 to 7)
    56 4ECF C9 07			cmp #BRICK_SIZEX-1	; offset bx = 7 (ball width pixels in offsets: 7 0 1)
    57 4ED1 D0 11			bne ml_exit
    58
    59 				; check if we crossed the limit in this step
    60 4ED3 B5 1D			lda ball_xpos_1,x				; OPTIMIZE: do this check #1! (this check is not equal when moving right)
    61 4ED5 D5 2F			cmp ball_rxpos,x	; old x pos (the pos before adding the step)
    62 4ED7 F0 0B			beq ml_exit		; "deja vu" (we were already at this pixel, so we didn't cross any border)
    63
    64 4ED9 20 9F 50			jsr ChangePosToChar				; OPTMIZE: do "inline"
    65
    66 4EDC 20 B0 50			jsr CheckTopBottomBricks
    67 4EDF F0 03			beq ml_exit		; there was no collision
    68
    69 4EE1 20 47 50			jsr DoHitLeft
    70
    71 4EE4			ml_exit
    72 4EE4 4C 29 4F			jmp vmv
    73
    74
    75 				;-------------------------------
    76 4EE7 C9 02		crg	cmp #2			; move right
    77 4EE9 D0 3E			bne mr_exit
    78
    79 				; update position of the ball (step below one pixel)
    80 4EEB			move_right
    81 4EEB B5 23			lda ball_xpos_3,x
    82 4EED 18				clc
    83 4EEE 75 0E			adc ball_xstep_2,x
    84 4EF0 95 23			sta ball_xpos_3,x
    85 4EF2 B5 20			lda ball_xpos_2,x
    86 4EF4 75 0B			adc ball_xstep_1,x
    87 4EF6 90 02			bcc mr1
    88 4EF8 F6 1D			inc ball_xpos_1,x
    89 4EFA 95 20		mr1	sta ball_xpos_2,x
    90
    91 				; check right border collision first
    92 4EFC B5 1D			lda ball_xpos_1,x
    93 4EFE C9 66			cmp #MAX_BALL_POSX+1
    94 4F00 D0 06			bne mr2
    95
    96 4F02 20 5D 50			jsr DoHitRight
    97 4F05 4C 29 4F			jmp mr_exit
    98
    99
   100 				; check bottom limit of the bricks zone
   101 4F08 B5 26		mr2	lda ball_ypos_1,x
   102 4F0A C9 90			cmp #BRICK_SIZEY*BOTTOM_BRICK_NUM
   103 4F0C B0 1B			bcs mr_exit
   104
   105 				; check if we are touching the left limit of a brick
   106 4F0E B5 1D			lda ball_xpos_1,x
   107 4F10 29 07			and #%111			; x offset (0 to 7)
   108 4F12 C9 06			cmp #[BRICK_SIZEX-BALL_SIZEX]+1	; offset bx = 6 (ball in: 6 7 0)
   109 4F14 D0 13			bne mr_exit
   110
   111 				; check if we crossed the limit in this step
   112 4F16 B5 1D			lda ball_xpos_1,x				; FIX this, when the old pos offset was 0, then we always cross a limit!
   113 4F18 D5 2F			cmp ball_rxpos,x	; old x pos (the pos before adding the step)
   114 4F1A F0 0D			beq mr_exit		; "deja vu" (we were already at this pixel)
   115
   116 4F1C 20 9F 50			jsr ChangePosToChar
   117
   118 4F1F E6 44			inc brick_xchar
   119
   120 4F21 20 B0 50			jsr CheckTopBottomBricks
   121 4F24 F0 03			beq mr_exit
   122 4F26 20 5D 50			jsr DoHitRight
   123
   124 4F29			mr_exit
   125
   126
   127 				;--------------------------------------------------------------
   128
   129 				; check vertical movement of the ball
   130 4F29 A6 7A		vmv	ldx m_currentBallIndex
   131
   132 4F2B B5 1A			lda ball_ydir,x
   133 4F2D C9 01		cup	cmp #1			; move up
   134 4F2F D0 4D			bne cdw
   135
   136 				; update position of the ball (step below one pixel)
   137 4F31			move_up
   138 4F31 B5 2C			lda ball_ypos_3,x
   139 4F33 38				sec
   140 4F34 F5 14			sbc ball_ystep_2,x
   141 4F36 95 2C			sta ball_ypos_3,x
   142 4F38 B5 29			lda ball_ypos_2,x
   143 4F3A F5 11			sbc ball_ystep_1,x
   144 4F3C B0 02			bcs mu1
   145 4F3E D6 26			dec ball_ypos_1,x
   146 4F40 95 29		mu1	sta ball_ypos_2,x
   147
   148 				; check top border collision first
   149 4F42 B5 26			lda ball_ypos_1,x
   150 4F44 C9 FF			cmp #MIN_BALL_POSY-1
   151 4F46 D0 14			bne mu2
   152
   153 4F48 20 73 50			jsr DoHitUp
   154
   155 				; update speed if is the first time that the ball hit the top border..
   156 				; 	bit m_ballHitTopBorderFlag
   157 				; 	bmi mu_exit
   158 				; 	lda #128
   159 				; 	sta m_ballHitTopBorderFlag
   160 				; 	lda m_topBorderBallSpeed
   161 				; 	sta m_currentBallSpeed
   162
   163 				; ..or set a min speed after hitting the top border always
   164 4F4B A5 70			lda m_currentBallSpeed
   165 4F4D C5 DD			cmp m_topBorderBallSpeed
   166 4F4F B0 2A			bcs mu_exit
   167
   168 4F51 A5 DD			lda m_topBorderBallSpeed
   169 4F53 85 70			sta m_currentBallSpeed
   170
   171 					;lda #0
   172 					;sta m_ballHitsCounter		; reset speedup counter
   173 4F55 A5 DF			lda m_ballSpeedUpHalfSeconds
   174 4F57 85 72			sta m_ballSpeedUpTimer		; reset speedup timer
   175
   176 4F59 4C 7B 4F			jmp mu_exit
   177
   178
   179 				; check bottom limit of the bricks zone
   180 4F5C B5 26		mu2	lda ball_ypos_1,x
   181 4F5E C9 90			cmp #BRICK_SIZEY*BOTTOM_BRICK_NUM
   182 4F60 B0 19			bcs mu_exit
   183
   184 				; check if we are touching the bottom limit of a brick
   185 4F62 B5 26			lda ball_ypos_1,x
   186 4F64 29 07			and #%111			; y offset (0 to 7)
   187 4F66 C9 07			cmp #BRICK_SIZEY-1	; offset by = 7 (ball in: 7 0 1 2 3 4)
   188 4F68 D0 11			bne mu_exit
   189
   190 4F6A B5 26			lda ball_ypos_1,x
   191 4F6C D5 32			cmp ball_rypos,x	; old y pos (the pos before adding the step)
   192 4F6E F0 0B			beq mu_exit		; "deja vu" (we were already at this pixel)
   193
   194 4F70 20 9F 50			jsr ChangePosToChar
   195
   196 4F73 20 24 51			jsr CheckLeftRightBricks
   197 4F76 F0 03			beq mu_exit
   198 4F78 20 73 50			jsr DoHitUp
   199
   200 4F7B			mu_exit
   201 4F7B 4C 15 4A			jmp UpdateRealCoords
   202
   203
   204 				;-------------------------------
   205
   206 4F7E C9 02		cdw	cmp #2			; move down
   207 4F80 D0 45			bne md_exit
   208
   209 				; update position of the ball (step below one pixel)
   210 4F82			move_down
   211 4F82 B5 2C			lda ball_ypos_3,x
   212 4F84 18				clc
   213 4F85 75 14			adc ball_ystep_2,x
   214 4F87 95 2C			sta ball_ypos_3,x
   215 4F89 B5 29			lda ball_ypos_2,x
   216 4F8B 75 11			adc ball_ystep_1,x
   217 4F8D 90 02			bcc md1
   218 4F8F F6 26			inc ball_ypos_1,x
   219 4F91 95 29		md1	sta ball_ypos_2,x
   220
   221 				; check bottom limit of the bricks zone (-1)
   222 4F93 B5 26			lda ball_ypos_1,x
   223 4F95 C9 88			cmp #BRICK_SIZEY*[BOTTOM_BRICK_NUM-1]
   224 4F97 B0 1E			bcs md2
   225
   226 				; check if we are touching the top limit of a brick
   227 4F99 B5 26			lda ball_ypos_1,x
   228 4F9B 29 07			and #%111			; y offset (0 to 7)
   229 4F9D C9 03			cmp #[BRICK_SIZEY-BALL_SIZEY]+1	; offset by = 3 (ball in: 3 4 5 6 7 0)
   230 4F9F D0 26			bne md_exit
   231
   232 4FA1 B5 26			lda ball_ypos_1,x
   233 4FA3 D5 32			cmp ball_rypos,x	; old y pos (the pos before adding the step)
   234 4FA5 F0 20			beq md_exit		; "deja vu" (we were already at this pixel)
   235
   236 4FA7 20 9F 50			jsr ChangePosToChar
   237
   238 4FAA E6 45			inc brick_ychar
   239
   240 4FAC 20 24 51			jsr CheckLeftRightBricks
   241 4FAF F0 16			beq md_exit
   242 4FB1 20 89 50			jsr DoHitDown
   243
   244 4FB4 4C C7 4F			jmp md_exit
   245
   246
   247 				; check lost ball condition, at the bottom of the screen
   248 4FB7 B5 26		md2	lda ball_ypos_1,x
   249 4FB9 C9 CC			cmp #MAX_BALL_POSY
   250 4FBB 90 07			bcc md3
   251
   252 				; HACK to never lost a ball
   253 				; 	lda #1
   254 				; 	sta ball_ydir,x
   255
   256 4FBD A9 80			lda #128
   257 4FBF 95 38			sta m_ballLostFlag,x
   258
   259 4FC1 4C 15 4A			jmp UpdateRealCoords
   260
   261
   262 				; check hit paddle condition, at the bottom of the screen
   263 4FC4 20 CA 4F		md3	jsr CheckPadCollision
   264
   265
   266 4FC7			md_exit
   267 4FC7 4C 15 4A			jmp UpdateRealCoords
   268
   269
   270 				;================================================================================
   271
   272 				; the register X must have the current ball index
   273
   274 4FCA			CheckPadCollision
   275 4FCA A6 7A			ldx m_currentBallIndex
   276
   277 4FCC B5 26			lda ball_ypos_1,x
   278 4FCE C9 C2			cmp #PAD_BALL_POSY1
   279 4FD0 90 74			bcc CPC_exit
   280 4FD2 C9 C9			cmp #PAD_BALL_POSY2+1
   281 4FD4 B0 70			bcs CPC_exit
   282
   283 4FD6 B5 1D			lda ball_xpos_1,x
   284 4FD8 18				clc
   285 4FD9 69 03			adc #BALL_SIZEX
   286
   287 4FDB 38				sec
   288 4FDC E5 08			sbc pad_xpos
   289
   290 4FDE C5 7E			cmp m_padCollisionSizeX			;#[PAD_SIZEX+BALL_SIZEX+1]
   291 4FE0 B0 64			bcs CPC_exit
   292
   293 				; there is a collision
   294 4FE2 A8				tay
   295
   296 4FE3 85 74			sta m_catchedBallPadOffset		; just in case we need it..
   297
   298 					;lda tab_pad_xdir,y
   299
   300 				; this "half size" method works for a ball with an odd number of pixels in X (width)
   301 				; (also, the paddle should have and even number of pixels in X)
   302 4FE5 A9 01			lda #1			; left(1) direction
   303 4FE7 C4 7F			cpy m_padCollisionHalfSizeX		;#[[BALL_SIZEX+PAD_SIZEX+1]/2]
   304 4FE9 90 02			bcc CPC_left_side_collision
   305 4FEB A9 02			lda #2			; right(2) direction
   306
   307 4FED			CPC_left_side_collision
   308 4FED 95 17			sta ball_xdir,x
   309
   310 4FEF B9 FE 92			lda TabCurrentPadAngleIndex,y
   311 4FF2 A8				tay
   312
   313 4FF3 B9 56 93			lda tab_pad_xstep1,y
   314 4FF6 95 0B			sta ball_xstep_1,x
   315 4FF8 B9 5B 93			lda tab_pad_xstep2,y
   316 4FFB 95 0E			sta ball_xstep_2,x
   317
   318 4FFD B9 60 93			lda tab_pad_ystep1,y
   319 5000 95 11			sta ball_ystep_1,x
   320 5002 B9 65 93			lda tab_pad_ystep2,y
   321 5005 95 14			sta ball_ystep_2,x
   322
   323 5007 A9 01			lda #1				; always up(1) direction
   324 5009 95 1A			sta ball_ydir,x
   325
   326 500B A9 01			lda #1
   327 500D 85 47			sta m_soundFlag
   328
   329
   330 					;jsr UpdateBallHits
   331
   332 500F A9 00			lda #0
   333 5011 85 73			sta m_ballHardHitsCounter
   334
   335
   336 5013 24 66			bit m_bonusCatchIsActive
   337 5015 10 2F			bpl CPC_exit
   338
   339 				; catch bonus is active, trap the ball in the correct position
   340 5017 A9 80			lda #128
   341 5019 85 75			sta m_ballCatchedByPadFlag
   342
   343 501B A9 3C			lda #[FRAMES_TIMER_UNIT*12]
   344 501D 85 76			sta m_ballCatchedByPadTimer
   345
   346 501F A5 74			lda m_catchedBallPadOffset
   347 5021 38				sec
   348 5022 E9 03			sbc #BALL_SIZEX
   349
   350 5024 B0 05			bcs CPC_check_catch_right_limit
   351
   352 5026 A9 00			lda #0
   353 5028 4C 31 50			jmp CPC_reset_catch_ball_pos
   354
   355 502B			CPC_check_catch_right_limit
   356 				; this works only for a normal size pad right now!
   357 502B C9 0E			cmp #[[PAD_SIZEX-BALL_SIZEX]+1]	; m_padCollisionSizeX-BALL_SIZEX+1
   358 502D 90 02			bcc CPC_reset_catch_ball_pos
   359
   360 502F A9 0D			lda #[PAD_SIZEX-BALL_SIZEX]
   361
   362 5031			CPC_reset_catch_ball_pos
   363 5031 85 74			sta m_catchedBallPadOffset
   364
   365 5033 18				clc
   366 5034 65 08			adc pad_xpos
   367 5036 95 1D			sta ball_xpos_1,x
   368
   369 5038 A9 C2			lda #PAD_BALL_POSY1
   370 503A 95 26			sta ball_ypos_1,x
   371
   372 503C A9 00			lda #0
   373 503E 95 20			sta ball_xpos_2,x
   374 5040 95 23			sta ball_xpos_3,x
   375 5042 95 29			sta ball_ypos_2,x
   376 5044 95 2C			sta ball_ypos_3,x
   377
   378
   379 5046			CPC_exit
   380 5046 60				rts
   381
   382
   383 				;================================================================================
   384
   385 				; UpdateBallHits
   386 				; 	lda m_currentBallIndex
   387 				; 	bne UBH_exit
   388 				;
   389 				; ; use this counter to update the speed of the ball
   390 				; 	inc m_ballHitsCounter
   391 				;
   392 				; 	lda m_ballHitsCounter
   393 				; 	cmp #BALL_HITS_TO_SPEEDUP
   394 				; 	bne UBH_exit
   395 				; 	lda #0
   396 				; 	sta m_ballHitsCounter
   397 				;
   398 				; ; 	lda m_currentBallSpeed
   399 				; ; 	cmp m_maxBallSpeed
   400 				; ; 	beq UBH_exit
   401 				; ; 	inc m_currentBallSpeed
   402 				;
   403 				; 	lda m_currentBallSpeed
   404 				; 	clc
   405 				; 	adc #BALL_HITS_SPEEDUP_STEP
   406 				; 	cmp m_maxBallSpeed
   407 				; 	;beq UBH_update_ball_speed
   408 				; 	bcc UBH_update_ball_speed
   409 				;
   410 				; 	lda m_maxBallSpeed
   411 				;
   412 				; UBH_update_ball_speed
   413 				; 	sta m_currentBallSpeed
   414 				;
   415 				; UBH_exit
   416 				; 	rts
   417
   418
   419 				;================================================================================
   420
   421 				; for all the DoHit* methods, the register X must have the current ball index
   422
   423 5047			DoHitLeft
   424 5047 A6 7A			ldx m_currentBallIndex			; OPTIMIZE: should come with the correct value?
   425
   426 5049 A9 02			lda #2		; now go right
   427 504B 95 17			sta ball_xdir,x
   428
   429 504D F6 1D			inc ball_xpos_1,x
   430
   431 504F A9 00			lda #0
   432 5051 38				sec
   433 5052 F5 23			sbc ball_xpos_3,x
   434 5054 95 23			sta ball_xpos_3,x				; OPTIMIZE: probably don't need that much precision
   435 5056 A9 00			lda #0
   436 5058 F5 20			sbc ball_xpos_2,x
   437 505A 95 20			sta ball_xpos_2,x
   438
   439 					;jsr UpdateBallHits
   440
   441 505C 60				rts
   442
   443
   444 				;-------------------------------
   445
   446 505D			DoHitRight
   447 505D A6 7A			ldx m_currentBallIndex
   448
   449 505F A9 01			lda #1		; now go left
   450 5061 95 17			sta ball_xdir,x
   451
   452 5063 D6 1D			dec ball_xpos_1,x
   453
   454 5065 A9 FE			lda #254
   455 5067 38				sec
   456 5068 F5 23			sbc ball_xpos_3,x
   457 506A 95 23			sta ball_xpos_3,x
   458 506C A9 FF			lda #255
   459 506E F5 20			sbc ball_xpos_2,x
   460 5070 95 20			sta ball_xpos_2,x
   461
   462 					;jsr UpdateBallHits
   463
   464 5072 60				rts
   465
   466
   467 				;-------------------------------
   468
   469 5073			DoHitUp
   470 5073 A6 7A			ldx m_currentBallIndex
   471
   472 5075 A9 02			lda #2		; now go down
   473 5077 95 1A			sta ball_ydir,x
   474
   475 5079 F6 26			inc ball_ypos_1,x
   476
   477 507B A9 00			lda #0
   478 507D 38				sec
   479 507E F5 2C			sbc ball_ypos_3,x
   480 5080 95 2C			sta ball_ypos_3,x
   481 5082 A9 00			lda #0
   482 5084 F5 29			sbc ball_ypos_2,x
   483 5086 95 29			sta ball_ypos_2,x
   484
   485 					;jsr UpdateBallHits
   486
   487 5088 60				rts
   488
   489
   490 				;-------------------------------
   491
   492 5089			DoHitDown
   493 5089 A6 7A			ldx m_currentBallIndex
   494
   495 508B A9 01			lda #1		; now go up
   496 508D 95 1A			sta ball_ydir,x
   497
   498 508F D6 26			dec ball_ypos_1,x
   499
   500 5091 A9 FE			lda #254
   501 5093 38				sec
   502 5094 F5 2C			sbc ball_ypos_3,x
   503 5096 95 2C			sta ball_ypos_3,x
   504 5098 A9 FF			lda #255
   505 509A F5 29			sbc ball_ypos_2,x
   506 509C 95 29			sta ball_ypos_2,x
   507
   508 					;jsr UpdateBallHits
   509
   510 509E 60				rts
   511
   512
   513 				;================================================================================
   514
   515 				; the register X must have the current ball index
   516
   517 509F			ChangePosToChar				; OPTIMIZE: doesn't need to be a subroutine
   518 509F A6 7A			ldx m_currentBallIndex		; OPTIMIZE: should have the correct value already
   519
   520 50A1 B5 1D			lda ball_xpos_1,x
   521 50A3 4A				lsr						; OPTIMIZE: could use a table: ldy ball_xpos_1,x ; lda TabDivBy8,y
   522 50A4 4A				lsr
   523 50A5 4A				lsr
   524 50A6 85 44			sta brick_xchar
   525
   526 50A8 B5 26			lda ball_ypos_1,x
   527 50AA 4A				lsr
   528 50AB 4A				lsr
   529 50AC 4A				lsr
   530 50AD 85 45			sta brick_ychar
   531
   532 50AF 60				rts
   533
   534
   535 				;================================================================================
   536
   537 				; check top and bottom bricks in a side collision
   538 50B0			CheckTopBottomBricks
   539 50B0 A6 45			ldx brick_ychar
   540 50B2 BD 92 92			lda TabMulBricksInX,x
   541 50B5 18				clc
   542 50B6 65 44			adc brick_xchar
   543 50B8 AA				tax		; put top brick index in register x
   544
   545 50B9 86 46			stx m_tempBrickIndex
   546
   547 				; check if there is only one possible brick to hit
   548 50BB A5 45			lda brick_ychar
   549 50BD C9 11			cmp #BOTTOM_BRICK_NUM-1		; max line
   550 50BF F0 26			beq ch2
   551
   552 				; check both bricks for a collision (top and bottom)
   553 				; first check where the middle of the ball is, to give priority to that brick
   554 50C1 A4 7A			ldy m_currentBallIndex
   555 50C3 B9 26 00			lda ball_ypos_1,y
   556
   557 50C6 29 07			and #%111			; Y offset (0 to 7)
   558 				;ch1	cmp #6			; ball Y in (6 7 0 1 2), size Y = 5
   559 50C8 C9 05		ch1	cmp #5			; ball Y in (5 6 7 0 1 2), size Y = 6
   560 50CA 90 28			bcc ch3			; a < threshold
   561
   562 				; give priority to the bottom brick
   563 50CC BD 73 68			lda TabLevel+NUM_BRICKS_X,x
   564 50CF 29 0F			and #%1111		; brick mask
   565 50D1 F0 14			beq ch2
   566
   567 50D3 A8				tay	; add NUM_BRICKS_X to index in x
   568 50D4 8A				txa
   569 50D5 18				clc
   570 50D6 69 0D			adc #NUM_BRICKS_X
   571 50D8 AA				tax
   572 50D9 98				tya
   573 50DA E6 45			inc brick_ychar
   574 50DC 20 86 51			jsr HitBrick		; hit bottom brick
   575
   576 50DF 24 69			bit m_bonusMegaIsActive
   577 50E1 10 38			bpl ch_hit_exit	; check both bricks when this powerup is active! .. OPTIMIZE: do a special subroutine for this powerup (or check always all near bricks)
   578
   579 50E3 A6 46			ldx m_tempBrickIndex
   580 50E5 C6 45			dec brick_ychar
   581 					;jmp ch_hit_exit
   582
   583 				; now check the top brick
   584 50E7 BD 66 68		ch2	lda TabLevel,x
   585 50EA 29 0F			and #%1111		; brick mask
   586 50EC F0 35			beq ch_clr_exit
   587
   588 50EE 20 86 51			jsr HitBrick		; hit top brick
   589 50F1 4C 1B 51			jmp ch_hit_exit
   590
   591
   592 				; give priority to the top brick, but first check the case where the
   593 				; ball is totally inside the top brick (cannot touch the bottom brick)
   594 50F4 C9 03		ch3	cmp #[BRICK_SIZEY-BALL_SIZEY]+1	; ball Y in (2 3 4 5 6 7) or lower
   595 50F6 90 EF			bcc ch2			; a < threshold
   596
   597 50F8 BD 66 68			lda TabLevel,x
   598 50FB 29 0F			and #%1111		; brick mask
   599 50FD F0 09			beq ch4
   600
   601 50FF 20 86 51			jsr HitBrick		; hit top brick
   602
   603 5102 24 69			bit m_bonusMegaIsActive
   604 5104 10 15			bpl ch_hit_exit	; check both bricks when this powerup is active!
   605
   606 5106 A6 46			ldx m_tempBrickIndex
   607 					;jmp ch_hit_exit
   608
   609 				; now check the bottom brick
   610 5108 BD 73 68		ch4	lda TabLevel+NUM_BRICKS_X,x
   611 510B 29 0F			and #%1111		; brick mask
   612 510D F0 14			beq ch_clr_exit
   613
   614 510F A8				tay	; add NUM_BRICKS_X to index in x
   615 5110 8A				txa
   616 5111 18				clc
   617 5112 69 0D			adc #NUM_BRICKS_X
   618 5114 AA				tax
   619 5115 98				tya
   620 5116 E6 45			inc brick_ychar
   621 5118 20 86 51			jsr HitBrick		; hit bottom brick
   622
   623
   624 511B			ch_hit_exit
   625 511B A9 00			lda #0
   626 511D 24 69			bit m_bonusMegaIsActive
   627 511F 30 02			bmi ch_clr_exit	; don't do the hit reaction if the mega bonus is active
   628
   629 5121 A9 01			lda #1	; there was a collision (exit with 0 in the other case)
   630
   631 5123			ch_clr_exit
   632 5123 60				rts
   633
   634
   635 				;================================================================================
   636
   637 				; check left and right bricks in a vertical collision
   638 5124			CheckLeftRightBricks
   639 5124 A6 45			ldx brick_ychar
   640 5126 BD 92 92			lda TabMulBricksInX,x
   641 5129 18				clc
   642 512A 65 44			adc brick_xchar
   643 512C AA				tax		; put left brick index in register x
   644
   645 512D 86 46			stx m_tempBrickIndex
   646
   647 				; check both bricks for a collision (left and right)
   648 				; first check where the middle of the ball is, to give priority to that brick
   649 512F A4 7A			ldy m_currentBallIndex
   650 5131 B9 1D 00			lda ball_xpos_1,y
   651
   652 5134 29 07			and #%111			; X offset (0 to 7)
   653 5136 C9 07		cv1	cmp #7			; ball X in: (7 0 1), size X = 3
   654 5138 D0 22			bne cv3			; only case where we can give priority to the right brick!
   655
   656 				; ..well, in reality there are also the cases greater than 6.5 and below "8" (7.999..)
   657 				; where the middle point of the ball in X, is between the offset 0 and 0.5
   658 				; (but visually speaking, probably is going to look "better" the way it is right now)
   659
   660 				; give priority to the right brick
   661 513A BD 67 68			lda TabLevel+1,x
   662 513D 29 0F			and #%1111		; brick mask
   663 513F F0 0E			beq cv2
   664
   665 5141 E8				inx
   666 5142 E6 44			inc brick_xchar
   667 5144 20 86 51			jsr HitBrick		; hit right brick
   668
   669 5147 24 69			bit m_bonusMegaIsActive
   670 5149 10 32			bpl cv_hit_exit	; check both bricks when this powerup is active!
   671
   672 514B A6 46			ldx m_tempBrickIndex
   673 514D C6 44			dec brick_xchar
   674 					;jmp cv_hit_exit
   675
   676 				; now check the left brick
   677 514F BD 66 68		cv2	lda TabLevel,x
   678 5152 29 0F			and #%1111		; brick mask
   679 5154 F0 2F			beq cv_clr_exit
   680
   681 5156 20 86 51			jsr HitBrick		; hit left brick
   682 5159 4C 7D 51			jmp cv_hit_exit
   683
   684 				; give priority to the left brick, but first check the case where the
   685 				; ball is totally inside the left brick (cannot touch the right brick)
   686 515C C9 06		cv3	cmp #[BRICK_SIZEX-BALL_SIZEX]+1	; ball X in: (5 6 7) or lower
   687 515E D0 EF			bne cv2
   688
   689 5160 BD 66 68			lda TabLevel,x
   690 5163 29 0F			and #%1111		; brick mask
   691 5165 F0 09			beq cv4
   692
   693 5167 20 86 51			jsr HitBrick		; hit left brick
   694
   695 516A 24 69			bit m_bonusMegaIsActive
   696 516C 10 0F			bpl cv_hit_exit	; check both bricks when this powerup is active!
   697
   698 516E A6 46			ldx m_tempBrickIndex
   699 					;jmp cv_hit_exit
   700
   701 				; now check the right brick
   702 5170 BD 67 68		cv4	lda TabLevel+1,x
   703 5173 29 0F			and #%1111		; brick mask
   704 5175 F0 0E			beq cv_clr_exit
   705
   706 5177 E8				inx
   707 5178 E6 44			inc brick_xchar
   708 517A 20 86 51			jsr HitBrick		; hit right brick
   709
   710
   711 517D			cv_hit_exit
   712 517D A9 00			lda #0
   713 517F 24 69			bit m_bonusMegaIsActive
   714 5181 30 02			bmi cv_clr_exit	; don't do the hit reaction if the mega bonus is active
   715
   716 5183 A9 01			lda #1	; there was a collision (exit with 0 in the other case)
   717
   718 5185			cv_clr_exit
   719 5185 60				rts
   720
  2977
  2978
  2979 				;================================================================================
  2980
  2981 5186				icl "pad_bricks.asm"
Source: D:\!Delphi\mads\examples\games\pad\pad_bricks.asm
     1
     2 				; register A: have the brick type mask [0..15]
     3 				; register X: have the brick index [0..MAX_BRICK_NUM-1]
     4 				; trash all registers at exit
     5
     6 5186			HitBrick
     7 5186 C9 0F			cmp #15			; "cross" (unbreakable brick)
     8 5188 D0 35			bne HB_check_easy_brick
     9
    10
    11 				; the mega ball bonus effect destroy every type of brick (give score for this?)
    12 518A 24 69			bit m_bonusMegaIsActive
    13 518C 10 0E			bpl HB_unbreakable_logic
    14
    15 518E 20 9B 52			jsr EraseBrick
    16
    17 5191 A9 00			lda #0
    18 5193 85 73			sta m_ballHardHitsCounter
    19
    20 5195 A9 02			lda #2
    21 5197 85 47			sta m_soundFlag
    22 5199 4C 9A 52			jmp HB_exit
    23
    24
    25 519C			HB_unbreakable_logic
    26 519C 20 0C 53			jsr InitBrickHighlightAnim
    27
    28 				; update hard hits counter
    29 519F A5 79			lda m_numberOfBallsInPlay
    30 51A1 C9 01			cmp #1					; update with only one ball in play
    31 51A3 D0 13			bne HB_unbreakable_sound
    32 51A5 A5 7A			lda m_currentBallIndex		; just to be sure that this is ball one..
    33 51A7 D0 0F			bne HB_unbreakable_sound
    34
    35 				; 	lda m_ballHardHitsCounter
    36 				; 	cmp #MAX_BALL_HARD_HITS
    37 				; 	bcs HB_unbreakable_sound
    38
    39 51A9 E6 73			inc m_ballHardHitsCounter
    40 51AB A5 73			lda m_ballHardHitsCounter
    41 51AD C9 32			cmp #MAX_BALL_HARD_HITS
    42 51AF 90 07			bcc HB_unbreakable_sound
    43
    44 				; change ball direction or set a flag to change it
    45 51B1 20 13 4E			jsr ChangeFirstBallDirection
    46
    47 51B4 A9 00			lda #0
    48 51B6 85 73			sta m_ballHardHitsCounter
    49
    50
    51 51B8			HB_unbreakable_sound
    52 51B8 A9 04			lda #4
    53 51BA 85 47			sta m_soundFlag
    54 51BC 4C 9A 52			jmp HB_exit
    55
    56
    57 				;-------------------------------
    58
    59 51BF			HB_check_easy_brick
    60 51BF C9 01			cmp #1			; "easy" (one hit brick)
    61 51C1 D0 1D			bne HB_check_restore_brick
    62
    63 51C3 20 9B 52			jsr EraseBrick
    64
    65 51C6 C6 54			dec brick_lev_num
    66
    67 51C8 A0 00			ldy #$00		; high byte of the score in BCD
    68 51CA A2 08			ldx #$08		; low byte of the score in BCD
    69
    70 51CC 24 68			bit m_bonusReduceIsActive	; give double the score for some actions
    71 51CE 10 02			bpl HB_easy_score
    72 51D0 A2 16			ldx #$16
    73 51D2			HB_easy_score
    74
    75 51D2 20 15 67			jsr AddScore
    76
    77 51D5 A9 00			lda #0
    78 51D7 85 73			sta m_ballHardHitsCounter
    79
    80 51D9 A9 02			lda #2
    81 51DB 85 47			sta m_soundFlag
    82 51DD 4C 9A 52			jmp HB_exit
    83
    84
    85 				;-------------------------------
    86
    87 51E0			HB_check_restore_brick
    88 51E0 C9 02			cmp #2			; "gold", "restore" brick (come back after some seconds)
    89 51E2 D0 13			bne HB_check_bonus_brick
    90
    91 51E4 86 51			stx gold_index
    92 51E6 20 9B 52			jsr EraseBrick
    93 51E9 20 95 56			jsr HitRestoreBrick
    94
    95 51EC A9 00			lda #0
    96 51EE 85 73			sta m_ballHardHitsCounter
    97
    98 51F0 A9 05			lda #5
    99 51F2 85 47			sta m_soundFlag
   100 51F4 4C 9A 52			jmp HB_exit
   101
   102
   103 				;-------------------------------
   104
   105 51F7			HB_check_bonus_brick
   106 51F7 C9 03			cmp #3			; "easy+bonus" (drop a bonus)
   107 51F9 D0 2E			bne HB_check_hard_brick
   108
   109 51FB 20 9B 52			jsr EraseBrick
   110
   111 51FE C6 54			dec brick_lev_num
   112
   113 5200 A0 00			ldy #$00			; high byte of the score in BCD
   114 5202 A2 08			ldx #$08			; low byte of the score in BCD
   115
   116 5204 24 68			bit m_bonusReduceIsActive	; give double the score for some actions
   117 5206 10 02			bpl HB_bonus_score
   118 5208 A2 16			ldx #$16
   119 520A			HB_bonus_score
   120
   121 520A 20 15 67			jsr AddScore
   122
   123 520D A9 00			lda #0
   124 520F 85 73			sta m_ballHardHitsCounter
   125
   126 				; abort the first "ABORT_BONUS_NUM" bonuses (behavior or bug from arkanoid 1)
   127 				; 	lda m_firstBonusDelayCounter
   128 				; 	beq HB_check_active_bonus
   129 				; 	dec m_firstBonusDelayCounter
   130 				; 	jmp HB_bonus_brick_sound
   131
   132 				; don't try to create a bonus if there is another one still falling
   133 5211			HB_check_active_bonus
   134 5211 A5 59			lda bonus_flag
   135 5213 D0 0D			bne HB_bonus_brick_sound
   136 5215 A5 62			lda m_bonusType
   137 5217 30 09			bmi HB_bonus_brick_sound
   138
   139 				; don't try to create a bonus if there is more than one ball in play
   140 5219 A5 79			lda m_numberOfBallsInPlay
   141 521B C9 02			cmp #2
   142 521D B0 03			bcs HB_bonus_brick_sound
   143
   144 521F 20 5A 57			jsr CreateRandomBonus
   145
   146
   147 5222			HB_bonus_brick_sound
   148 5222 A9 02			lda #2
   149 5224 85 47			sta m_soundFlag
   150 5226 4C 9A 52			jmp HB_exit
   151
   152
   153 				;-------------------------------
   154
   155 5229			HB_check_hard_brick
   156 5229 C9 09			cmp #9			; bricks that need a number of hits
   157 522B 90 6D			bcc HB_exit		; (9 --> 14: from 1 to 6 hits)
   158
   159
   160 				; the mega ball bonus effect destroy every type of brick
   161 522D 24 69			bit m_bonusMegaIsActive
   162 522F 30 27			bmi HB_clear_hard_brick
   163
   164
   165 5231 DE 66 68			dec TabLevel,x		; "hard"
   166 5234 BD 66 68			lda TabLevel,x
   167 5237 29 0F			and #15
   168 5239 C9 08			cmp #8
   169 523B F0 1B			beq HB_clear_hard_brick
   170
   171 523D 20 0C 53			jsr InitBrickHighlightAnim
   172
   173 5240 A0 00			ldy #$00		; high byte of the score in BCD
   174 5242 A2 05			ldx #$05		; low byte of the score in BCD
   175
   176 5244 24 68			bit m_bonusReduceIsActive	; give double the score for some actions
   177 5246 10 02			bpl HB_hard_hit_score
   178 5248 A2 10			ldx #$10
   179 524A			HB_hard_hit_score
   180
   181 524A 20 15 67			jsr AddScore
   182
   183 524D A9 00			lda #0
   184 524F 85 73			sta m_ballHardHitsCounter
   185
   186 5251 A9 03			lda #3
   187 5253 85 47			sta m_soundFlag
   188
   189 5255 4C 9A 52			jmp HB_exit
   190
   191
   192 5258			HB_clear_hard_brick
   193 5258 20 9B 52			jsr EraseBrick		; last hit for the hard brick
   194
   195 525B C6 54			dec brick_lev_num
   196
   197 525D A0 00			ldy #$00		; high byte of the score in BCD
   198 525F A2 05			ldx #$05		; low byte of the score in BCD
   199
   200 5261 24 68			bit m_bonusReduceIsActive	; give double the score for some actions
   201 5263 10 02			bpl HB_hard_clear_score
   202 5265 A2 10			ldx #$10
   203 5267			HB_hard_clear_score
   204
   205 5267 20 15 67			jsr AddScore
   206
   207 526A A9 00			lda #0
   208 526C 85 73			sta m_ballHardHitsCounter
   209
   210 526E A9 02			lda #2
   211 5270 85 47			sta m_soundFlag
   212
   213
   214 				; check if there is a highlight animation active
   215 5272 A2 00			ldx #0
   216
   217 				; after the call to "EraseBrick" (that calls "GetBrickPointer"), we know that
   218 				; "ptr_1, ptr_1+1" have a pointer to the char of the hard brick, in the screen
   219 5274			HB_check_highlight_loop
   220 5274 BD 90 93			lda tab_anim_lsb,x
   221 5277 C5 3B			cmp ptr_1
   222 5279 D0 1A			bne HB_next_anim_entry
   223 527B BD 98 93			lda tab_anim_msb,x
   224 527E C5 3C			cmp ptr_1+1
   225 5280 D0 13			bne HB_next_anim_entry
   226
   227 				; clear this entry in the tables of the highlight animation
   228 5282 A9 00			lda #0
   229 5284 9D 90 93			sta tab_anim_lsb,x
   230 5287 9D 98 93			sta tab_anim_msb,x
   231 528A 9D A0 93			sta tab_anim_ctd,x
   232 528D 9D A8 93			sta tab_anim_end,x
   233 5290 C6 4C			dec anim_num
   234 5292 4C 9A 52			jmp HB_exit
   235
   236 5295			HB_next_anim_entry
   237 5295 E8				inx
   238 5296 E0 08			cpx #MAX_ACTIVE_HIGHLIGHT_ANIMS
   239 5298 D0 DA			bne HB_check_highlight_loop
   240
   241
   242 				;-------------------------------
   243
   244 529A			HB_exit
   245 529A 60				rts
   246
   247
   248 				;================================================================================
   249
   250 				; register X: have the brick index [0..MAX_BRICK_NUM-1]
   251 				; trash registers A and Y at exit
   252
   253 529B			EraseBrick
   254 529B A9 00			lda #0
   255 529D 9D 66 68			sta TabLevel,x
   256
   257 				; now update the background and the shadows
   258 52A0 20 3C 57			jsr GetBrickPointer
   259
   260 52A3 A5 45			lda brick_ychar
   261 52A5 29 03			and #%11
   262 52A7 0A				asl
   263 52A8 85 41			sta temp_1
   264 52AA A5 44			lda brick_xchar
   265 52AC 29 01			and #%01
   266 52AE 05 41			ora temp_1
   267 52B0 A8				tay
   268
   269 52B1 B9 6A 93			lda TabBackgroundCharDef,y
   270 52B4 85 41			sta temp_1			; background char 1
   271 52B6 18				clc
   272 52B7 69 01			adc #1
   273 52B9 85 42			sta temp_2			; background char 2
   274
   275 				; check special cases
   276 52BB A5 44			lda brick_xchar		; left column always in shadow
   277 52BD F0 0B			beq EB_set_shadow_left_char
   278 52BF A5 45			lda brick_ychar		; top line always in shadow
   279 52C1 F0 07			beq EB_set_shadow_left_char
   280
   281 				; check top left brick
   282 52C3 BD 58 68			lda TabLevel-[NUM_BRICKS_X+1],x
   283 52C6 29 0F			and #%1111			; brick mask
   284 52C8 F0 06			beq EB_check_top_line
   285
   286 52CA			EB_set_shadow_left_char
   287 52CA A5 41			lda temp_1
   288 52CC 09 10			ora #%10000			; set shadow bit
   289 52CE 85 41			sta temp_1
   290
   291 				; check special case
   292 52D0			EB_check_top_line
   293 52D0 A5 45			lda brick_ychar		; top line always in shadow
   294 52D2 F0 07			beq EB_set_shadow_right_char
   295
   296 				; check top brick
   297 52D4 BD 59 68			lda TabLevel-NUM_BRICKS_X,x
   298 52D7 29 0F			and #%1111			; brick mask
   299 52D9 F0 06			beq EB_restore_background
   300
   301 52DB			EB_set_shadow_right_char
   302 52DB A5 42			lda temp_2
   303 52DD 09 10			ora #%10000			; set shadow bit
   304 52DF 85 42			sta temp_2
   305
   306 52E1			EB_restore_background
   307 52E1 A0 00			ldy #0				; restore background
   308 52E3 A5 41			lda temp_1
   309 52E5 91 3B			sta (ptr_1),y
   310 52E7 C8				iny
   311 52E8 A5 42			lda temp_2
   312 52EA 91 3B			sta (ptr_1),y
   313
   314 52EC A0 21			ldy #BYTES_LINE+1
   315 52EE B1 3B			lda (ptr_1),y
   316 52F0 29 7F			and #%01111111
   317 52F2 C9 20			cmp #32				; last char of the background + shadows
   318 52F4 B0 06			bcs EB_second_char		; a >= 32
   319 52F6 B1 3B			lda (ptr_1),y
   320 52F8 29 EF			and #%11101111			; clear shadow bit (only for background)
   321 52FA 91 3B			sta (ptr_1),y
   322
   323 52FC			EB_second_char
   324 52FC C8				iny
   325 52FD B1 3B			lda (ptr_1),y
   326 52FF 29 7F			and #%01111111
   327 5301 C9 20			cmp #32				; last char of the background + shadows
   328 5303 B0 06			bcs EB_exit			; a >= 32
   329 5305 B1 3B			lda (ptr_1),y
   330 5307 29 EF			and #%11101111			; clear shadow bit (only for background)
   331 5309 91 3B			sta (ptr_1),y
   332
   333 530B			EB_exit
   334 530B 60				rts
   335
   336
   337 				;-------------------------------
   338
   339 				;DrawBrick
   340
   341
   342 					;rts
   343
   344
   345 				;================================================================================
   346
   347 530C			InitBrickHighlightAnim
   348 530C 20 3C 57		    jsr GetBrickPointer
   349
   350 530F A2 00		    ldx #0			; hit before?
   351 5311 BD 90 93		ba1 lda tab_anim_lsb,x
   352 5314 C5 3B		    cmp ptr_1
   353 5316 D0 2F		    bne ba2
   354 5318 BD 98 93		    lda tab_anim_msb,x
   355 531B C5 3C		    cmp ptr_1+1
   356 531D D0 28		    bne ba2
   357
   358 531F A9 04		    lda #HIGHLIGHT_ANIM_FRAMES
   359 5321 38			    sec
   360 5322 FD A0 93		    sbc tab_anim_ctd,x
   361 5325 0A			    asl		; *2
   362 5326 85 41		    sta temp_1
   363
   364 5328 A5 4B		    lda vbi_anim_ctd
   365 532A 18			    clc
   366 532B 69 02		    adc #HIGHLIGHT_ANIM_TIME
   367 532D 9D A8 93		    sta tab_anim_end,x
   368 5330 A9 04		    lda #HIGHLIGHT_ANIM_FRAMES
   369 5332 9D A0 93		    sta tab_anim_ctd,x
   370 5335 A0 00		    ldy #0
   371 5337 B1 3B		    lda (ptr_1),y
   372 5339 38			    sec
   373 533A E5 41		    sbc temp_1
   374 533C 91 3B		    sta (ptr_1),y
   375 533E C8			    iny
   376 533F 18			    clc
   377 5340 69 01		    adc #1
   378 5342 91 3B		    sta (ptr_1),y
   379
   380 5344 4C C1 53		    jmp eba
   381
   382 5347 E8			ba2 inx
   383 5348 E0 08		    cpx #MAX_ACTIVE_HIGHLIGHT_ANIMS
   384 534A D0 C5		    bne ba1
   385
   386 534C A5 4C		    lda anim_num		; one empty?
   387 534E C9 08		    cmp #MAX_ACTIVE_HIGHLIGHT_ANIMS
   388 5350 D0 3F		    bne ba5
   389
   390 5352 A9 00		    lda #0			; find lower
   391 5354 85 41		    sta temp_1
   392 5356 A2 01		    ldx #1
   393 5358 AD A0 93		    lda tab_anim_ctd
   394 535B DD A0 93		ba3 cmp tab_anim_ctd,x
   395 535E 90 05		    bcc ba4			; a < m
   396 5360 BD A0 93		    lda tab_anim_ctd,x
   397 5363 86 41		    stx temp_1
   398 5365 E8			ba4 inx
   399 5366 E0 08		    cpx #MAX_ACTIVE_HIGHLIGHT_ANIMS
   400 5368 D0 F1		    bne ba3
   401 536A A6 41		    ldx temp_1
   402
   403 536C BD 90 93		    lda tab_anim_lsb,x
   404 536F 85 3D		    sta ptr_2
   405 5371 BD 98 93		    lda tab_anim_msb,x
   406 5374 85 3E		    sta ptr_2+1
   407 5376 A9 05		    lda #HIGHLIGHT_ANIM_FRAMES+1
   408 5378 38			    sec
   409 5379 FD A0 93		    sbc tab_anim_ctd,x
   410 537C 0A			    asl		; *2
   411 537D 85 41		    sta temp_1
   412 537F A0 00		    ldy #0
   413 5381 B1 3D		    lda (ptr_2),y
   414 5383 38			    sec
   415 5384 E5 41		    sbc temp_1
   416 5386 91 3D		    sta (ptr_2),y
   417 5388 C8			    iny
   418 5389 18			    clc
   419 538A 69 01		    adc #1
   420 538C 91 3D		    sta (ptr_2),y
   421 538E 4C 9B 53		    jmp ba7
   422
   423 5391 E6 4C		ba5 inc anim_num
   424
   425 5393 A2 FF		    ldx #255
   426 5395 E8			ba6 inx
   427 5396 BD A0 93		    lda tab_anim_ctd,x
   428 5399 D0 FA		    bne ba6
   429
   430 539B A5 4B		ba7 lda vbi_anim_ctd
   431 539D 18			    clc
   432 539E 69 02		    adc #HIGHLIGHT_ANIM_TIME
   433 53A0 9D A8 93		    sta tab_anim_end,x
   434 53A3 A9 04		    lda #HIGHLIGHT_ANIM_FRAMES
   435 53A5 9D A0 93		    sta tab_anim_ctd,x
   436 53A8 A5 3B		    lda ptr_1
   437 53AA 9D 90 93		    sta tab_anim_lsb,x
   438 53AD A5 3C		    lda ptr_1+1
   439 53AF 9D 98 93		    sta tab_anim_msb,x
   440 53B2 A0 00		    ldy #0
   441 53B4 B1 3B		    lda (ptr_1),y
   442 53B6 18			    clc
   443 53B7 69 02		    adc #2
   444 53B9 91 3B		    sta (ptr_1),y
   445 53BB C8			    iny
   446 53BC 18			    clc
   447 53BD 69 01		    adc #1
   448 53BF 91 3B		    sta (ptr_1),y
   449
   450 53C1 60			eba rts
   451
   452
   453 				;-------------------------------
   454
   455 53C2			AnimateBrickHighlight
   456 				;   lda anim_num
   457 				;   beq exit_anim
   458
   459 53C2 A2 00		    ldx #0
   460 53C4 BD A0 93		ab1 lda tab_anim_ctd,x
   461 53C7 F0 4A		    beq ab3
   462
   463 53C9 A5 4B		    lda vbi_anim_ctd
   464 53CB DD A8 93		    cmp tab_anim_end,x
   465 53CE D0 43		    bne ab3
   466
   467 53D0 BD 90 93		    lda tab_anim_lsb,x
   468 53D3 85 3B		    sta ptr_1
   469 53D5 BD 98 93		    lda tab_anim_msb,x
   470 53D8 85 3C		    sta ptr_1+1
   471 53DA A0 00		    ldy #0
   472
   473 53DC DE A0 93		    dec tab_anim_ctd,x
   474 53DF D0 1D		    bne ab2
   475
   476 53E1 B1 3B		    lda (ptr_1),y
   477 53E3 38			    sec
   478 53E4 E9 08		    sbc #HIGHLIGHT_ANIM_FRAMES*2
   479 53E6 91 3B		    sta (ptr_1),y		; anim char 1 left
   480 53E8 C8			    iny
   481 53E9 18			    clc
   482 53EA 69 01		    adc #1
   483 53EC 91 3B		    sta (ptr_1),y		; anim char 1 right
   484 53EE A9 00		    lda #0
   485 53F0 9D 90 93		    sta tab_anim_lsb,x
   486 53F3 9D 98 93		    sta tab_anim_msb,x
   487 53F6 9D A8 93		    sta tab_anim_end,x
   488 53F9 C6 4C		    dec anim_num
   489 53FB 4C 13 54		    jmp ab3
   490
   491 53FE B1 3B		ab2 lda (ptr_1),y
   492 5400 18			    clc
   493 5401 69 02		    adc #2
   494 5403 91 3B		    sta (ptr_1),y
   495 5405 C8			    iny
   496 5406 18			    clc
   497 5407 69 01		    adc #1
   498 5409 91 3B		    sta (ptr_1),y
   499 540B A5 4B		    lda vbi_anim_ctd
   500 540D 18			    clc
   501 540E 69 02		    adc #HIGHLIGHT_ANIM_TIME
   502 5410 9D A8 93		    sta tab_anim_end,x
   503
   504 5413 E8			ab3 inx
   505 5414 E0 08		    cpx #MAX_ACTIVE_HIGHLIGHT_ANIMS
   506 5416 D0 AC		    bne ab1
   507
   508 5418			exit_anim
   509 5418 60			    rts
   510
   511
   512 				;================================================================================
   513 5419			UpdateStartLevelHighlight
   514 5419 C6 B0			dec m_startLevelHighlightTimer
   515 541B F0 03			beq USLH_check_step
   516 541D 4C 94 56			jmp USLH_exit
   517
   518
   519 5420			USLH_check_step
   520 5420 A5 B1			lda m_startLevelHighlightStep
   521 5422 F0 03			beq USLH_step1
   522 5424 4C EC 54			jmp USLH_step2
   523
   524 				; save graphic data for the original hard bricks
   525 				; (to restore it at the end of the animation)
   526 5427			USLH_step1
   527 = 0000				?charLine = 0
   528 					.rept 8
   529 						LDA FONT1_ADDRESS+70*8+?CHARLINE
   530 						STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   532 						LDA FONT1_ADDRESS+71*8+?CHARLINE
   533 						STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   535 						LDA FONT1_ADDRESS+80*8+?CHARLINE
   536 						STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   538 						LDA FONT1_ADDRESS+81*8+?CHARLINE
   539 						STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   541 						?CHARLINE ++
   542 					.endr
Source: REPT
   529 5427 AD 30 B6				LDA FONT1_ADDRESS+70*8+?CHARLINE
   529 542A 8D 04 9A				STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   529 542D AD 38 B6				LDA FONT1_ADDRESS+71*8+?CHARLINE
   529 5430 8D 0C 9A				STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   529 5433 AD 80 B6				LDA FONT1_ADDRESS+80*8+?CHARLINE
   529 5436 8D 14 9A				STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   529 5439 AD 88 B6				LDA FONT1_ADDRESS+81*8+?CHARLINE
   529 543C 8D 1C 9A				STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   529 = 0001					?CHARLINE ++
   529 543F AD 31 B6				LDA FONT1_ADDRESS+70*8+?CHARLINE
   529 5442 8D 05 9A				STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   529 5445 AD 39 B6				LDA FONT1_ADDRESS+71*8+?CHARLINE
   529 5448 8D 0D 9A				STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   529 544B AD 81 B6				LDA FONT1_ADDRESS+80*8+?CHARLINE
   529 544E 8D 15 9A				STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   529 5451 AD 89 B6				LDA FONT1_ADDRESS+81*8+?CHARLINE
   529 5454 8D 1D 9A				STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   529 = 0002					?CHARLINE ++
   529 5457 AD 32 B6				LDA FONT1_ADDRESS+70*8+?CHARLINE
   529 545A 8D 06 9A				STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   529 545D AD 3A B6				LDA FONT1_ADDRESS+71*8+?CHARLINE
   529 5460 8D 0E 9A				STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   529 5463 AD 82 B6				LDA FONT1_ADDRESS+80*8+?CHARLINE
   529 5466 8D 16 9A				STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   529 5469 AD 8A B6				LDA FONT1_ADDRESS+81*8+?CHARLINE
   529 546C 8D 1E 9A				STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   529 = 0003					?CHARLINE ++
   529 546F AD 33 B6				LDA FONT1_ADDRESS+70*8+?CHARLINE
   529 5472 8D 07 9A				STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   529 5475 AD 3B B6				LDA FONT1_ADDRESS+71*8+?CHARLINE
   529 5478 8D 0F 9A				STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   529 547B AD 83 B6				LDA FONT1_ADDRESS+80*8+?CHARLINE
   529 547E 8D 17 9A				STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   529 5481 AD 8B B6				LDA FONT1_ADDRESS+81*8+?CHARLINE
   529 5484 8D 1F 9A				STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   529 = 0004					?CHARLINE ++
   529 5487 AD 34 B6				LDA FONT1_ADDRESS+70*8+?CHARLINE
   529 548A 8D 08 9A				STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   529 548D AD 3C B6				LDA FONT1_ADDRESS+71*8+?CHARLINE
   529 5490 8D 10 9A				STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   529 5493 AD 84 B6				LDA FONT1_ADDRESS+80*8+?CHARLINE
   529 5496 8D 18 9A				STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   529 5499 AD 8C B6				LDA FONT1_ADDRESS+81*8+?CHARLINE
   529 549C 8D 20 9A				STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   529 = 0005					?CHARLINE ++
   529 549F AD 35 B6				LDA FONT1_ADDRESS+70*8+?CHARLINE
   529 54A2 8D 09 9A				STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   529 54A5 AD 3D B6				LDA FONT1_ADDRESS+71*8+?CHARLINE
   529 54A8 8D 11 9A				STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   529 54AB AD 85 B6				LDA FONT1_ADDRESS+80*8+?CHARLINE
   529 54AE 8D 19 9A				STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   529 54B1 AD 8D B6				LDA FONT1_ADDRESS+81*8+?CHARLINE
   529 54B4 8D 21 9A				STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   529 = 0006					?CHARLINE ++
   529 54B7 AD 36 B6				LDA FONT1_ADDRESS+70*8+?CHARLINE
   529 54BA 8D 0A 9A				STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   529 54BD AD 3E B6				LDA FONT1_ADDRESS+71*8+?CHARLINE
   529 54C0 8D 12 9A				STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   529 54C3 AD 86 B6				LDA FONT1_ADDRESS+80*8+?CHARLINE
   529 54C6 8D 1A 9A				STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   529 54C9 AD 8E B6				LDA FONT1_ADDRESS+81*8+?CHARLINE
   529 54CC 8D 22 9A				STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   529 = 0007					?CHARLINE ++
   529 54CF AD 37 B6				LDA FONT1_ADDRESS+70*8+?CHARLINE
   529 54D2 8D 0B 9A				STA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   529 54D5 AD 3F B6				LDA FONT1_ADDRESS+71*8+?CHARLINE
   529 54D8 8D 13 9A				STA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   529 54DB AD 87 B6				LDA FONT1_ADDRESS+80*8+?CHARLINE
   529 54DE 8D 1B 9A				STA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   529 54E1 AD 8F B6				LDA FONT1_ADDRESS+81*8+?CHARLINE
   529 54E4 8D 23 9A				STA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   529 = 0008					?CHARLINE ++
Source: D:\!Delphi\mads\examples\games\pad\pad_bricks.asm
   543
   544 54E7 A2 00			ldx #0
   545 54E9 4C 07 55			jmp USLH_copy_highlight_frame
   546
   547
   548 54EC			USLH_step2
   549 54EC C9 01			cmp #1
   550 54EE D0 05			bne USLH_step3
   551
   552 54F0 A2 10			ldx #16
   553 54F2 4C 07 55			jmp USLH_copy_highlight_frame
   554
   555
   556 54F5			USLH_step3
   557 54F5 C9 02			cmp #2
   558 54F7 D0 05			bne USLH_step4
   559
   560 54F9 A2 20			ldx #32
   561 54FB 4C 07 55			jmp USLH_copy_highlight_frame
   562
   563
   564 54FE			USLH_step4
   565 54FE C9 03			cmp #3
   566 5500 F0 03			beq USLH_do_step4
   567 5502 4C D0 55			jmp USLH_step5
   568
   569 5505			USLH_do_step4
   570 5505 A2 30			ldx #48
   571
   572 				; copy next animation frame data
   573 5507			USLH_copy_highlight_frame
   574 = 0000				?charLine = 0
   575 					.rept 8
   576 						LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   577 						STA FONT1_ADDRESS+70*8+?CHARLINE
   579 						LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   580 						STA FONT1_ADDRESS+71*8+?CHARLINE
   582 						LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   583 						STA FONT1_ADDRESS+80*8+?CHARLINE
   585 						LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   586 						STA FONT1_ADDRESS+81*8+?CHARLINE
   588 						?CHARLINE ++
   589 					.endr
Source: REPT
   576 5507 BD 40 B6				LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   576 550A 8D 30 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   576 550D BD 48 B6				LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   576 5510 8D 38 B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   576 5513 BD 90 B6				LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   576 5516 8D 80 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   576 5519 BD 98 B6				LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   576 551C 8D 88 B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   576 = 0001					?CHARLINE ++
   576 551F BD 41 B6				LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   576 5522 8D 31 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   576 5525 BD 49 B6				LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   576 5528 8D 39 B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   576 552B BD 91 B6				LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   576 552E 8D 81 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   576 5531 BD 99 B6				LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   576 5534 8D 89 B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   576 = 0002					?CHARLINE ++
   576 5537 BD 42 B6				LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   576 553A 8D 32 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   576 553D BD 4A B6				LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   576 5540 8D 3A B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   576 5543 BD 92 B6				LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   576 5546 8D 82 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   576 5549 BD 9A B6				LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   576 554C 8D 8A B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   576 = 0003					?CHARLINE ++
   576 554F BD 43 B6				LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   576 5552 8D 33 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   576 5555 BD 4B B6				LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   576 5558 8D 3B B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   576 555B BD 93 B6				LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   576 555E 8D 83 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   576 5561 BD 9B B6				LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   576 5564 8D 8B B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   576 = 0004					?CHARLINE ++
   576 5567 BD 44 B6				LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   576 556A 8D 34 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   576 556D BD 4C B6				LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   576 5570 8D 3C B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   576 5573 BD 94 B6				LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   576 5576 8D 84 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   576 5579 BD 9C B6				LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   576 557C 8D 8C B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   576 = 0005					?CHARLINE ++
   576 557F BD 45 B6				LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   576 5582 8D 35 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   576 5585 BD 4D B6				LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   576 5588 8D 3D B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   576 558B BD 95 B6				LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   576 558E 8D 85 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   576 5591 BD 9D B6				LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   576 5594 8D 8D B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   576 = 0006					?CHARLINE ++
   576 5597 BD 46 B6				LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   576 559A 8D 36 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   576 559D BD 4E B6				LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   576 55A0 8D 3E B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   576 55A3 BD 96 B6				LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   576 55A6 8D 86 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   576 55A9 BD 9E B6				LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   576 55AC 8D 8E B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   576 = 0007					?CHARLINE ++
   576 55AF BD 47 B6				LDA FONT1_ADDRESS+72*8+?CHARLINE,X
   576 55B2 8D 37 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   576 55B5 BD 4F B6				LDA FONT1_ADDRESS+73*8+?CHARLINE,X
   576 55B8 8D 3F B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   576 55BB BD 97 B6				LDA FONT1_ADDRESS+82*8+?CHARLINE,X
   576 55BE 8D 87 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   576 55C1 BD 9F B6				LDA FONT1_ADDRESS+83*8+?CHARLINE,X
   576 55C4 8D 8F B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   576 = 0008					?CHARLINE ++
Source: D:\!Delphi\mads\examples\games\pad\pad_bricks.asm
   590
   591
   592 				; update step and restart timer for the next animation frame
   593 55C7 E6 B1			inc m_startLevelHighlightStep
   594
   595 55C9 A9 02			lda #HIGHLIGHT_ANIM_TIME
   596 55CB 85 B0			sta m_startLevelHighlightTimer
   597
   598 55CD 4C 94 56			jmp USLH_exit
   599
   600
   601 				; end the animation, recover the original char data
   602 55D0			USLH_step5
   603 = 0000				?charLine = 0
   604 					.rept 8
   605 						LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   606 						STA FONT1_ADDRESS+70*8+?CHARLINE
   608 						LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   609 						STA FONT1_ADDRESS+71*8+?CHARLINE
   611 						LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   612 						STA FONT1_ADDRESS+80*8+?CHARLINE
   614 						LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   615 						STA FONT1_ADDRESS+81*8+?CHARLINE
   617 						?CHARLINE ++
   618 					.endr
Source: REPT
   605 55D0 AD 04 9A				LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   605 55D3 8D 30 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   605 55D6 AD 0C 9A				LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   605 55D9 8D 38 B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   605 55DC AD 14 9A				LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   605 55DF 8D 80 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   605 55E2 AD 1C 9A				LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   605 55E5 8D 88 B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   605 = 0001					?CHARLINE ++
   605 55E8 AD 05 9A				LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   605 55EB 8D 31 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   605 55EE AD 0D 9A				LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   605 55F1 8D 39 B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   605 55F4 AD 15 9A				LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   605 55F7 8D 81 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   605 55FA AD 1D 9A				LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   605 55FD 8D 89 B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   605 = 0002					?CHARLINE ++
   605 5600 AD 06 9A				LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   605 5603 8D 32 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   605 5606 AD 0E 9A				LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   605 5609 8D 3A B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   605 560C AD 16 9A				LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   605 560F 8D 82 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   605 5612 AD 1E 9A				LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   605 5615 8D 8A B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   605 = 0003					?CHARLINE ++
   605 5618 AD 07 9A				LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   605 561B 8D 33 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   605 561E AD 0F 9A				LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   605 5621 8D 3B B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   605 5624 AD 17 9A				LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   605 5627 8D 83 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   605 562A AD 1F 9A				LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   605 562D 8D 8B B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   605 = 0004					?CHARLINE ++
   605 5630 AD 08 9A				LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   605 5633 8D 34 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   605 5636 AD 10 9A				LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   605 5639 8D 3C B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   605 563C AD 18 9A				LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   605 563F 8D 84 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   605 5642 AD 20 9A				LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   605 5645 8D 8C B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   605 = 0005					?CHARLINE ++
   605 5648 AD 09 9A				LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   605 564B 8D 35 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   605 564E AD 11 9A				LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   605 5651 8D 3D B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   605 5654 AD 19 9A				LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   605 5657 8D 85 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   605 565A AD 21 9A				LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   605 565D 8D 8D B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   605 = 0006					?CHARLINE ++
   605 5660 AD 0A 9A				LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   605 5663 8D 36 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   605 5666 AD 12 9A				LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   605 5669 8D 3E B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   605 566C AD 1A 9A				LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   605 566F 8D 86 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   605 5672 AD 22 9A				LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   605 5675 8D 8E B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   605 = 0007					?CHARLINE ++
   605 5678 AD 0B 9A				LDA TABSAVEHIGHLIGHTCHAR+?CHARLINE
   605 567B 8D 37 B6				STA FONT1_ADDRESS+70*8+?CHARLINE
   605 567E AD 13 9A				LDA TABSAVEHIGHLIGHTCHAR+8+?CHARLINE
   605 5681 8D 3F B6				STA FONT1_ADDRESS+71*8+?CHARLINE
   605 5684 AD 1B 9A				LDA TABSAVEHIGHLIGHTCHAR+16+?CHARLINE
   605 5687 8D 87 B6				STA FONT1_ADDRESS+80*8+?CHARLINE
   605 568A AD 23 9A				LDA TABSAVEHIGHLIGHTCHAR+24+?CHARLINE
   605 568D 8D 8F B6				STA FONT1_ADDRESS+81*8+?CHARLINE
   605 = 0008					?CHARLINE ++
Source: D:\!Delphi\mads\examples\games\pad\pad_bricks.asm
   619
   620 5690 A9 00			lda #0		; not really needed
   621 5692 85 B1			sta m_startLevelHighlightStep
   622
   623
   624 5694			USLH_exit
   625 5694 60				rts
   626
   627
   628 				;================================================================================
   629
   630 5695			HitRestoreBrick
   631 5695 A5 50		    lda gold_num
   632 5697 C9 18		    cmp #MAX_ACTIVE_RESTORE_BRICKS
   633 5699 D0 05		    bne hg1
   634
   635 569B A6 4F		    ldx gold_init
   636 569D 20 D7 56		    jsr RecoverRestoreBrick
   637
   638 56A0 A5 4F		hg1 lda gold_init
   639 56A2 18			    clc
   640 56A3 65 50		    adc gold_num
   641 56A5 C9 18		    cmp #MAX_ACTIVE_RESTORE_BRICKS
   642 56A7 90 02		    bcc hg2
   643 56A9 E9 18		    sbc #MAX_ACTIVE_RESTORE_BRICKS
   644 56AB AA			hg2 tax
   645
   646 56AC A5 3B		    lda ptr_1
   647 56AE 9D B0 93		    sta TabRestoreBrick_lsb,x
   648 56B1 A5 3C		    lda ptr_1+1
   649 56B3 9D C8 93		    sta TabRestoreBrick_msb,x
   650 56B6 A5 51		    lda gold_index
   651 56B8 9D E0 93		    sta TabRestoreBrick_idx,x
   652 56BB A5 4E		    lda vbi_gold_ctd
   653 56BD 18			    clc
   654 56BE 69 0E		    adc #RESTORE_BRICK_TIME
   655 56C0 9D F8 93		    sta TabRestoreBrick_end,x
   656
   657 56C3 E6 50		    inc gold_num
   658
   659 56C5 60			    rts
   660
   661
   662 				;-------------------------------
   663
   664 56C6			CheckRestoreBrickList
   665 56C6 A5 50			lda gold_num
   666 56C8 F0 0C			beq CRBL_exit
   667
   668 56CA A6 4F			ldx gold_init
   669 56CC BD F8 93			lda TabRestoreBrick_end,x
   670 56CF C5 4E			cmp vbi_gold_ctd
   671 56D1 D0 03			bne CRBL_exit
   672
   673 56D3 20 D7 56			jsr RecoverRestoreBrick
   674
   675 56D6			CRBL_exit
   676 56D6 60				rts
   677
   678
   679 				;-------------------------------
   680
   681 56D7			RecoverRestoreBrick
   682 56D7 BD B0 93		    lda TabRestoreBrick_lsb,x
   683 56DA 85 3D		    sta ptr_2
   684 56DC BD C8 93		    lda TabRestoreBrick_msb,x
   685 56DF 85 3E		    sta ptr_2+1
   686
   687 56E1 A0 00		    ldy #0
   688 56E3 A9 B4		    lda #RESTORE_BRICK_LEFT_CHAR
   689 56E5 91 3D		    sta (ptr_2),y
   690 56E7 C8			    iny
   691 56E8 A9 B5		    lda #RESTORE_BRICK_RIGHT_CHAR
   692 56EA 91 3D		    sta (ptr_2),y
   693
   694 56EC A0 21		    ldy #BYTES_LINE+1
   695 56EE B1 3D		    lda (ptr_2),y
   696 56F0 29 7F		    and #%01111111
   697 56F2 C9 20		    cmp #32			; last char of the background + shadows
   698 56F4 B0 06		    bcs rg1
   699 56F6 B1 3D		    lda (ptr_2),y
   700 56F8 09 10		    ora #%10000		; shadow bit
   701 56FA 91 3D		    sta (ptr_2),y
   702 56FC C8			rg1 iny
   703 56FD B1 3D		    lda (ptr_2),y
   704 56FF 29 7F		    and #%01111111
   705 5701 C9 20		    cmp #32			; last char of the background + shadows
   706 5703 B0 06		    bcs rg2
   707 5705 B1 3D		    lda (ptr_2),y
   708 5707 09 10		    ora #%10000		; shadow bit
   709 5709 91 3D		    sta (ptr_2),y
   710
   711 570B BD E0 93		rg2 lda TabRestoreBrick_idx,x
   712 570E A8			    tay
   713 570F A9 52		    lda #RESTORE_BRICK_VALUE
   714 5711 99 66 68		    sta TabLevel,y
   715 5714 A9 00		    lda #0
   716 5716 9D B0 93		    sta TabRestoreBrick_lsb,x
   717 5719 9D C8 93		    sta TabRestoreBrick_msb,x
   718 571C 9D F8 93		    sta TabRestoreBrick_end,x
   719 571F 9D E0 93		    sta TabRestoreBrick_idx,x
   720
   721 5722 C6 50		    dec gold_num
   722
   723 5724 E8			    inx
   724 5725 E0 18		    cpx #MAX_ACTIVE_RESTORE_BRICKS
   725 5727 D0 02		    bne rg3
   726 5729 A2 00		    ldx #0
   727 572B 86 4F		rg3 stx gold_init
   728
   729 572D 60			    rts
   730
   731
   732 				;-------------------------------
   733
   734 572E			DrawRestoreBrickList
   735 572E A5 50			lda gold_num
   736 5730 F0 09			beq DRBL_exit
   737
   738 5732			DRBL_loop
   739 5732 A6 4F			ldx gold_init
   740 5734 20 D7 56			jsr RecoverRestoreBrick
   741
   742 5737 A5 50			lda gold_num
   743 5739 D0 F7			bne DRBL_loop
   744
   745 573B			DRBL_exit
   746 573B 60				rts
   747
   748
   749 				;================================================================================
   750
   751 573C			GetBrickPointer
   752 573C A4 45			ldy brick_ychar
   753
   754 573E B9 B6 92			lda TabMulBytesLineMSB,y
   755 5741 85 3C			sta ptr_1+1
   756
   757 5743 A5 44			lda brick_xchar
   758 5745 0A				asl		; *2
   759 5746 18				clc
   760 5747 79 A4 92			adc TabMulBytesLineLSB,y
   761 574A 90 03			bcc gbp
   762 574C E6 3C			inc ptr_1+1
   763 574E 18				clc
   764
   765 574F 69 43		gbp	adc #<[DL1_data_address+BYTES_LINE*2+LEFT_BRICK_OFFSET]
   766 5751 85 3B			sta ptr_1
   767 5753 A5 3C			lda ptr_1+1
   768 5755 69 A8			adc #>[DL1_data_address+BYTES_LINE*2+LEFT_BRICK_OFFSET]
   769 5757 85 3C			sta ptr_1+1
   770
   771 5759 60				rts
   772
  2982
  2983
  2984 				;================================================================================
  2985
  2986 575A				icl "pad_bonus.asm"
Source: D:\!Delphi\mads\examples\games\pad\pad_bonus.asm
     1
     2 575A			CreateRandomBonus
     3
     4 				; in arkanoid 1 it seems there is a small possibility of not generating the bonus
     5 575A AD 0A D2			lda RANDOM
     6 575D C9 10			cmp #16		; in this case 6.25% of probability
     7 575F B0 03			bcs CRB_start
     8 5761 4C 05 58			jmp CRB_exit
     9
    10 5764			CRB_start
    11 				; init bonus position
    12 5764 A5 44			lda brick_xchar
    13 5766 0A				asl
    14 5767 0A				asl
    15 5768 0A				asl		; *8
    16 5769 85 5A			sta bonus_xpos
    17
    18 576B A5 45			lda brick_ychar
    19 576D 0A				asl
    20 576E 0A				asl
    21 576F 0A				asl		; *8
    22 5770 85 5B			sta bonus_ypos
    23
    24 5772 A9 00			lda #0
    25 5774 85 5C			sta bonus_ypos_decimal
    26
    27
    28 				; select random bonus type (from 1 to MAX_BONUS_NUM)
    29 5776 A2 00			ldx #0
    30 5778 AD 0A D2			lda RANDOM
    31
    32 577B			CRB_loop
    33 577B E8				inx
    34 577C E0 09			cpx #MAX_BONUS_NUM
    35 577E F0 07			beq CRB_choose_bonus
    36 5780 DD 30 94			cmp tab_bonus_prob-1,x
    37 				; if RANDOM is greater than the value in the tab, then check the next one
    38 5783 F0 02			beq CRB_choose_bonus		; RANDOM == rnd_tab ? .. then this is the one
    39 5785 B0 F4			bcs CRB_loop				; RANDOM > rnd_tab ? .. then check the next one
    40
    41 				; here: RANDOM <= rnd_tab , or we reached the last possible bonus
    42
    43 5787			CRB_choose_bonus
    44 				; do not allow two consecutives bonuses of the same type
    45 5787 E4 63			cpx m_lastBonusType
    46 5789 F0 59			beq CRB_change_bonus
    47
    48 				; if there is a powerup effect active, don't allow the same one to appear
    49 				; (in this case I'm just aborting the bonus generation, this is to not
    50 				; give that much of "disrupt" powerups and to account for the behavior in
    51 				; arkanoid 1, where sometimes some bricks marked with powerups don't give them)
    52
    53 578B E0 07			cpx #BONUS_TYPE_BREAK
    54 578D D0 06			bne CRB_checked_break
    55 578F 24 67			bit m_bonusBreakIsActive
    56 					;bmi CRB_change_bonus
    57 5791 30 72			bmi CRB_exit
    58 5793 10 51			bpl CRB_save_bonus
    59 5795			CRB_checked_break
    60
    61 5795 E0 01			cpx #BONUS_TYPE_EXPAND
    62 5797 D0 06			bne CRB_checked_expand
    63 5799 24 65			bit m_bonusExpandIsActive
    64 					;bmi CRB_change_bonus
    65 579B 30 68			bmi CRB_exit
    66 579D 10 47			bpl CRB_save_bonus
    67 579F			CRB_checked_expand
    68
    69 579F E0 04			cpx #BONUS_TYPE_REDUCE
    70 57A1 D0 06			bne CRB_checked_reduce
    71 57A3 24 68			bit m_bonusReduceIsActive
    72 					;bmi CRB_change_bonus
    73 57A5 30 5E			bmi CRB_exit
    74 57A7 10 3D			bpl CRB_save_bonus
    75 57A9			CRB_checked_reduce
    76
    77 57A9 E0 06			cpx #BONUS_TYPE_MEGA
    78 57AB D0 06			bne CRB_checked_mega
    79 57AD 24 69			bit m_bonusMegaIsActive
    80 					;bmi CRB_change_bonus
    81 57AF 30 54			bmi CRB_exit
    82 57B1 10 33			bpl CRB_save_bonus
    83 57B3			CRB_checked_mega
    84
    85 57B3 E0 08			cpx #BONUS_TYPE_CATCH
    86 57B5 D0 06			bne CRB_checked_catch
    87 57B7 24 66			bit m_bonusCatchIsActive
    88 					;bmi CRB_change_bonus
    89 57B9 30 4A			bmi CRB_exit
    90 57BB 10 29			bpl CRB_save_bonus
    91 57BD			CRB_checked_catch
    92
    93 				; if we are moving at min speed don't give the "slow" bonus
    94 57BD E0 05			cpx #BONUS_TYPE_SLOW
    95 57BF D0 08			bne CRB_checked_slow
    96 57C1 A5 70			lda m_currentBallSpeed
    97 57C3 C9 02			cmp #MIN_BALL_SPEED
    98 57C5 F0 1D			beq CRB_change_bonus
    99 57C7 D0 1D			bne CRB_save_bonus
   100 57C9			CRB_checked_slow
   101
   102 				; if we are moving at max speed don't give the "fast" bonus
   103 57C9 E0 09			cpx #BONUS_TYPE_FAST
   104 57CB D0 08			bne CRB_checked_fast
   105 57CD A5 70			lda m_currentBallSpeed
   106 57CF C5 DE			cmp m_maxBallSpeed
   107 57D1 F0 11			beq CRB_change_bonus
   108 57D3 D0 11			bne CRB_save_bonus
   109 57D5			CRB_checked_fast
   110
   111 				; allow only one extra player bonus per level
   112 57D5 E0 03			cpx #BONUS_TYPE_PLAYER
   113 57D7 D0 0D			bne CRB_save_bonus
   114 57D9 24 64			bit m_extraPlayerBonusFlag
   115 57DB 30 07			bmi CRB_change_bonus
   116
   117 57DD A9 80			lda #128
   118 57DF 85 64			sta m_extraPlayerBonusFlag
   119 57E1 4C E6 57			jmp CRB_save_bonus
   120
   121 57E4			CRB_change_bonus
   122 57E4 A2 02			ldx #BONUS_TYPE_DISRUPT		; by arkanoid 1 definition..
   123
   124 57E6			CRB_save_bonus
   125 57E6 86 62			stx m_bonusType
   126 57E8 86 63			stx m_lastBonusType
   127
   128 57EA BD 15 94			lda tab_bonus_color-1,x
   129 57ED 85 61			sta bonus_color
   130 57EF BD 1E 94			lda tab_bonus_lsb-1,x
   131 57F2 85 5F			sta ptr_bonus_sh
   132 57F4 BD 27 94			lda tab_bonus_msb-1,x
   133 57F7 85 60			sta ptr_bonus_sh+1
   134
   135 57F9 A9 00			lda #0
   136 57FB 85 5D			sta bonus_sh_line
   137 57FD A9 03			lda #BONUS_ANIM_SPEED
   138 57FF 85 5E			sta bonus_sh_ctd
   139 5801 A9 80			lda #128
   140 5803 85 59			sta bonus_flag
   141
   142 5805			CRB_exit
   143 5805 60				rts
   144
   145
   146 				;-------------------------------
   147
   148 5806			StartBonusAction
   149 5806 A5 62			lda m_bonusType
   150 5808 29 7F			and #%01111111
   151
   152 580A C9 01			cmp #BONUS_TYPE_EXPAND
   153 580C F0 35			beq SBA_bonus_expand
   154
   155 580E C9 02			cmp #BONUS_TYPE_DISRUPT
   156 5810 F0 4D			beq SBA_bonus_disrupt
   157
   158 5812 C9 03			cmp #BONUS_TYPE_PLAYER
   159 5814 F0 71			beq SBA_bonus_player
   160
   161 5816 C9 04			cmp #BONUS_TYPE_REDUCE
   162 5818 D0 03			bne SBA_check_bonus_slow
   163 581A 4C 9E 58			jmp SBA_bonus_reduce
   164
   165 581D			SBA_check_bonus_slow
   166 581D C9 05			cmp #BONUS_TYPE_SLOW
   167 581F D0 03			bne SBA_check_bonus_mega
   168 5821 4C BA 58			jmp SBA_bonus_slow
   169
   170 5824			SBA_check_bonus_mega
   171 5824 C9 06			cmp #BONUS_TYPE_MEGA
   172 5826 D0 03			bne SBA_check_bonus_break
   173 5828 4C DF 58			jmp SBA_bonus_mega
   174
   175 582B			SBA_check_bonus_break
   176 582B C9 07			cmp #BONUS_TYPE_BREAK
   177 582D D0 03			bne SBA_check_bonus_catch
   178 582F 4C 0A 59			jmp SBA_bonus_break
   179
   180 5832			SBA_check_bonus_catch
   181 5832 C9 08			cmp #BONUS_TYPE_CATCH
   182 5834 D0 03			bne SBA_check_bonus_fast
   183 5836 4C 29 59			jmp SBA_bonus_catch
   184
   185 5839			SBA_check_bonus_fast
   186 5839 C9 09			cmp #BONUS_TYPE_FAST
   187 583B D0 03			bne SBA_end_bonus_check
   188 583D 4C 3C 59			jmp SBA_bonus_fast
   189
   190
   191 5840			SBA_end_bonus_check
   192 5840 4C 5C 59			jmp SBA_exit
   193
   194
   195 				;-------------------------------
   196 5843			SBA_bonus_expand
   197 5843 A9 80			lda #128
   198 5845 85 65			sta m_bonusExpandIsActive
   199
   200 				; get pad middle position
   201 5847 20 99 59			jsr GetPadMiddlePoint
   202
   203
   204 				; clear the effect of other bonus if is active
   205 584A 20 FE 59			jsr ClearBonusReduceEffect
   206 584D 20 18 5A			jsr ClearBonusMegaEffect
   207 5850 20 5E 5A			jsr ClearBonusCatchEffect
   208
   209
   210 5853 20 A5 45			jsr SetLargePadInfo
   211
   212
   213 				; set pad position according to middle point and new size
   214 5856 20 A1 59			jsr SetPadWithMiddlePoint
   215
   216 					
   217 				; play sound
   218 5859 20 94 59			jsr PlayGetBonusSound
   219 					
   220
   221 585C 4C 5C 59			jmp SBA_exit
   222
   223
   224 				;-------------------------------
   225 585F			SBA_bonus_disrupt
   226 585F A9 03			lda #3
   227 5861 85 79			sta m_numberOfBallsInPlay
   228
   229 				; duplicate info of the first ball to the other two
   230 5863 20 7B 4D			jsr CopyFirstBallInfo
   231
   232 				; update steps X for ball 2 and step Y for ball 3
   233 5866 20 D6 4D			jsr SetDirectionForNewBalls
   234
   235
   236 				; draw balls 2 and 3 (not necessary)
   237
   238
   239 				; clear the effect of other bonus if is active
   240 5869 20 E4 59			jsr ClearBonusExpandEffect
   241 586C 20 FE 59			jsr ClearBonusReduceEffect
   242 586F 20 18 5A			jsr ClearBonusMegaEffect
   243 5872 20 5E 5A			jsr ClearBonusCatchEffect
   244
   245
   246 				; play sound
   247 5875 20 94 59			jsr PlayGetBonusSound
   248 					
   249
   250 				; set colors for new balls (after the "mega" bonus effect clear)
   251 5878 A9 0E			lda #BALL_COLOR
   252 587A 8D 13 D0			sta COLPM1
   253 587D 8D 14 D0			sta COLPM2
   254
   255
   256 				; reset hard hits counter when in multi ball
   257 5880 A9 00			lda #0
   258 5882 85 73			sta m_ballHardHitsCounter
   259
   260
   261 5884 4C 5C 59			jmp SBA_exit
   262
   263
   264
   265 				;-------------------------------
   266 5887			SBA_bonus_player
   267 5887 E6 57			inc m_numberOfBallsLeft
   268 5889 20 C9 66			jsr IncreaseBallsInHud
   269
   270 					;jsr DisplayLives
   271
   272 588C 20 8F 59			jsr PlayExtraLifeSound
   273
   274 					
   275 				; clear the effect of other bonus if is active
   276 588F 20 E4 59			jsr ClearBonusExpandEffect
   277 5892 20 FE 59			jsr ClearBonusReduceEffect
   278 5895 20 18 5A			jsr ClearBonusMegaEffect
   279 5898 20 5E 5A			jsr ClearBonusCatchEffect
   280
   281
   282 589B 4C 5C 59			jmp SBA_exit
   283
   284
   285 				;-------------------------------
   286 589E			SBA_bonus_reduce
   287 589E A9 80			lda #128
   288 58A0 85 68			sta m_bonusReduceIsActive
   289
   290 				; get pad middle position
   291 58A2 20 99 59			jsr GetPadMiddlePoint
   292
   293
   294 				; clear the effect of other bonus if is active
   295 58A5 20 E4 59			jsr ClearBonusExpandEffect
   296 58A8 20 18 5A			jsr ClearBonusMegaEffect
   297 58AB 20 5E 5A			jsr ClearBonusCatchEffect
   298
   299
   300 58AE 20 63 45			jsr SetSmallPadInfo
   301
   302
   303 				; set pad position according to middle point and new size
   304 58B1 20 A1 59			jsr SetPadWithMiddlePoint
   305
   306 					
   307 				; play sound
   308 58B4 20 94 59			jsr PlayGetBonusSound
   309
   310 					
   311 58B7 4C 5C 59			jmp SBA_exit
   312
   313
   314 				;-------------------------------
   315 58BA			SBA_bonus_slow
   316 				; 	ldx m_currentBallSpeed
   317 				; 	dex
   318 				; 	dex
   319 				; 	cpx #MIN_BALL_SPEED
   320 				; 	bcs SBA_update_speed
   321 				; 	ldx #MIN_BALL_SPEED
   322 				; SBA_update_speed
   323 				; 	stx m_currentBallSpeed
   324
   325 58BA A5 70			lda m_currentBallSpeed
   326 58BC 38				sec
   327 58BD E9 01			sbc #SLOW_BONUS_SLOWDOWN_STEP
   328 58BF 90 04			bcc SBA_min_speed
   329 58C1 C9 02			cmp #MIN_BALL_SPEED
   330 58C3 B0 02			bcs SBA_update_speed
   331
   332 58C5			SBA_min_speed
   333 58C5 A9 02			lda #MIN_BALL_SPEED
   334
   335 58C7			SBA_update_speed
   336 58C7 85 70			sta m_currentBallSpeed
   337
   338
   339 					;lda #0
   340 					;sta m_ballHitsCounter		; reset speedup counter
   341 58C9 A5 DF			lda m_ballSpeedUpHalfSeconds
   342 58CB 85 72			sta m_ballSpeedUpTimer		; reset speedup timer
   343
   344
   345 				; clear the effect of other bonus if is active
   346 58CD 20 E4 59			jsr ClearBonusExpandEffect
   347 58D0 20 FE 59			jsr ClearBonusReduceEffect
   348 58D3 20 18 5A			jsr ClearBonusMegaEffect
   349 58D6 20 5E 5A			jsr ClearBonusCatchEffect
   350
   351
   352 				; play sound
   353 58D9 20 94 59			jsr PlayGetBonusSound
   354
   355 					
   356 58DC 4C 5C 59			jmp SBA_exit
   357
   358
   359 				;-------------------------------
   360 58DF			SBA_bonus_mega
   361 58DF A9 80			lda #128
   362 58E1 85 69			sta m_bonusMegaIsActive
   363
   364 58E3 A9 2C			lda #BALL_MEGA_COLOR
   365 58E5 8D 12 D0			sta COLPM0
   366 58E8 A9 26			lda #BALL_MEGA_BACKG_COLOR
   367 58EA 85 77			sta m_ballAntialiasColor
   368 58EC 8D 13 D0			sta COLPM1
   369
   370
   371 				; speed up the ball a little
   372 58EF A5 70			lda m_currentBallSpeed
   373 58F1 C5 DE			cmp m_maxBallSpeed
   374 58F3 B0 06			bcs SBA_ball_at_top_speed
   375
   376 58F5 E6 70			inc m_currentBallSpeed
   377
   378 58F7 A5 DF			lda m_ballSpeedUpHalfSeconds
   379 58F9 85 72			sta m_ballSpeedUpTimer		; reset speedup timer
   380
   381 58FB			SBA_ball_at_top_speed
   382
   383
   384 				; clear the effect of other bonus if is active
   385 58FB 20 E4 59			jsr ClearBonusExpandEffect
   386 58FE 20 FE 59			jsr ClearBonusReduceEffect
   387 5901 20 5E 5A			jsr ClearBonusCatchEffect
   388
   389
   390 				; play sound
   391 5904 20 94 59			jsr PlayGetBonusSound
   392
   393 					
   394 5907 4C 5C 59			jmp SBA_exit
   395
   396
   397 				;-------------------------------
   398 590A			SBA_bonus_break
   399 590A A9 00			lda #0
   400 590C 85 09			sta m_padAtRightLimitFlag
   401 590E 85 0A			sta m_padAtLeftLimitFlag
   402
   403 5910 A9 80			lda #128
   404 5912 85 67			sta m_bonusBreakIsActive
   405
   406
   407 				; clear the effect of other bonus if is active
   408 5914 20 E4 59			jsr ClearBonusExpandEffect
   409 5917 20 FE 59			jsr ClearBonusReduceEffect
   410 591A 20 18 5A			jsr ClearBonusMegaEffect
   411 591D 20 5E 5A			jsr ClearBonusCatchEffect
   412
   413
   414 5920 20 68 59			jsr ForceOpenSideHoles
   415
   416
   417 				; play sound
   418 5923 20 94 59			jsr PlayGetBonusSound
   419
   420 					
   421 5926 4C 5C 59			jmp SBA_exit
   422
   423
   424 				;-------------------------------
   425 5929			SBA_bonus_catch
   426 5929 A9 80			lda #128
   427 592B 85 66			sta m_bonusCatchIsActive
   428
   429
   430 				; clear the effect of other bonus if is active
   431 592D 20 E4 59			jsr ClearBonusExpandEffect
   432 5930 20 FE 59			jsr ClearBonusReduceEffect
   433 5933 20 18 5A			jsr ClearBonusMegaEffect
   434
   435
   436 				; play sound
   437 5936 20 94 59			jsr PlayGetBonusSound
   438
   439 					
   440 5939 4C 5C 59			jmp SBA_exit
   441
   442
   443 				;-------------------------------
   444 593C			SBA_bonus_fast
   445 593C A5 70			lda m_currentBallSpeed
   446 593E 18				clc
   447 593F 69 01			adc #FAST_BONUS_SPEEDUP_STEP
   448 				;	bcs SBA_max_speed
   449 5941 C5 DE			cmp m_maxBallSpeed
   450 5943 90 02			bcc SBA_update_speed_faster
   451
   452 				;SBA_max_speed
   453 5945 A5 DE			lda m_maxBallSpeed
   454
   455 5947			SBA_update_speed_faster
   456 5947 85 70			sta m_currentBallSpeed
   457
   458
   459 					;lda #0
   460 					;sta m_ballHitsCounter		; reset speedup counter
   461 5949 A5 DF			lda m_ballSpeedUpHalfSeconds
   462 594B 85 72			sta m_ballSpeedUpTimer		; reset speedup timer
   463
   464
   465 				; clear the effect of other bonus if is active
   466 594D 20 E4 59			jsr ClearBonusExpandEffect
   467 5950 20 FE 59			jsr ClearBonusReduceEffect
   468 5953 20 18 5A			jsr ClearBonusMegaEffect
   469 5956 20 5E 5A			jsr ClearBonusCatchEffect
   470
   471
   472 				; play sound
   473 5959 20 94 59			jsr PlayGetBonusSound
   474
   475 					
   476 				;	jmp SBA_exit
   477
   478
   479 				;-------------------------------
   480 595C			SBA_exit
   481 595C A9 00			lda #0
   482 595E 85 62			sta m_bonusType
   483
   484 				; 	lda m_difficultyIndex
   485 				; 	cmp #2		; give the score only for the arcade difficulty
   486 				; 	bcc SBA_return
   487
   488 				; add 1000 points to the score
   489 5960 A0 01			ldy #$01		; high byte of the score in BCD
   490 5962 A2 00			ldx #$00		; low byte of the score in BCD
   491
   492 				; this one doesn't make sense..
   493 				; 	bit m_bonusReduceIsActive	; give double the score for some actions
   494 				; 	bpl SBA_get_bonus_score
   495 				; 	ldy #$02
   496 				; SBA_get_bonus_score
   497
   498 5964 20 15 67			jsr AddScore
   499
   500 5967			SBA_return
   501 5967 60				rts
   502
   503
   504 				;-------------------------------
   505
   506 5968			ForceOpenSideHoles
   507 				; create "hole" of the break bonus, in the right border (4 chars)
   508 				/*	lda #2
   509 					sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]
   510 					lda #3
   511 					sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]+1
   512 					lda #6
   513 					sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]
   514 					lda #7
   515 					sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]+1
   516
   517 				; create "hole" of the break bonus, in the left border (4 chars)
   518 					lda #BLANK_CHAR
   519 					sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET-2]
   520 					lda #3+16
   521 					sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET-2]+1
   522 					lda #BLANK_CHAR
   523 					sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET-2]
   524 					lda #7+16
   525 					sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET-2]+1*/
   525
   526
   527 5968 A2 00			ldx #0
   528 596A 86 A9			stx m_exitsAnimationIndex
   529 					
   530 596C A9 04			lda #EXIT_ANIMATION_TIME+1
   531 596E 85 A8			sta m_animateExitsTimer
   532
   533 5970			DrawOpenSideFrames
   534 				; draw open side effect frame, in the right border and left borders (8 chars)
   535 5970 BD 10 94			lda TabExitAnimationChar1,x
   536 5973 8D 5D AB			sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]
   537 5976 8D 7D AB			sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]
   538
   539 5979 8D 41 AB			sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET-2]
   540 597C 8D 61 AB			sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET-2]
   541 					
   542 597F BD 13 94			lda TabExitAnimationChar2,x
   543 5982 8D 5E AB			sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]+1
   544 5985 8D 7E AB			sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]+1
   545
   546 5988 8D 42 AB			sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET-2]+1
   547 598B 8D 62 AB			sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET-2]+1
   548
   549 598E 60				rts
   550
   551
   552 				;-------------------------------
   553
   554 598F			PlayExtraLifeSound
   555 598F A9 08			lda #8
   556 5991 85 47			sta m_soundFlag
   557
   558 5993 60				rts
   559 					
   560 					
   561 5994			PlayGetBonusSound
   562 5994 A9 06			lda #6
   563 5996 85 47			sta m_soundFlag
   564
   565 5998 60				rts
   566 					
   567 					
   568 				;-------------------------------
   569
   570 5999			GetPadMiddlePoint
   571 5999 A5 08			lda pad_xpos
   572 599B 18				clc
   573 599C 65 80			adc m_padHalfSizeX
   574 599E 85 81			sta m_padMiddlePos
   575
   576 59A0 60				rts
   577
   578
   579 59A1			SetPadWithMiddlePoint
   580 59A1 A5 81			lda m_padMiddlePos
   581 59A3 38				sec
   582 59A4 E5 80			sbc m_padHalfSizeX
   583 59A6 B0 0A			bcs SPWMP_check_right_limit
   584
   585
   586 				; check that we don't crossed the left or right limits
   587 				; (only needed if the pad is growing, but we do it in every case..)
   588 59A8			SPWMP_left_limit
   589 59A8 A9 00			lda #0
   590 59AA 85 08			sta pad_xpos
   591
   592 				; force the change of position here, not in the VBI, so to not wait one frame
   593 59AC 18				clc
   594 59AD 69 4C			adc #PM_OFFSET_X
   595 59AF 85 88			sta m_padHPOSP3
   596
   597 59B1 60				rts
   598
   599
   600 59B2			SPWMP_check_right_limit
   601 59B2 C5 7D			cmp m_maxPadPosXPlusOne
   602 59B4 90 02			bcc SPWMP_update_pos
   603 59B6 A5 7C			lda m_maxPadPosX
   604
   605 59B8			SPWMP_update_pos
   606 59B8 85 08			sta pad_xpos
   607
   608 				; force the change of position here, not in the VBI, so to not wait one frame
   609 59BA 18				clc
   610 59BB 69 4C			adc #PM_OFFSET_X
   611 59BD 85 88			sta m_padHPOSP3
   612
   613 59BF 60				rts
   614
   615
   616 				;--------------------------------------------------------------------------------
   617
   618 59C0			ClearBonus
   619 59C0 A9 00			lda #0
   620 59C2 85 59			sta bonus_flag
   621
   622 59C4 A2 08			ldx #BONUS_SIZEY
   623 59C6 A4 5B			ldy bonus_ypos
   624
   625 59C8			CB_loop
   626 59C8 A9 00			lda #0
   627 59CA 99 1C A5			sta p1_adr+PM_OFFSET_Y,y
   628 59CD B9 1C A3			lda m0_adr+PM_OFFSET_Y,y
   629 59D0 29 FC			and #%11111100
   630 59D2 99 1C A3			sta m0_adr+PM_OFFSET_Y,y
   631
   632 59D5 C8				iny
   633 59D6 CA				dex
   634 59D7 D0 EF			bne CB_loop
   635
   636 59D9 A9 00			lda #0
   637 59DB 8D 04 D0			sta HPOSM0
   638
   639 				; recover ball color
   640 59DE A5 77			lda m_ballAntialiasColor
   641 59E0 8D 13 D0			sta COLPM1
   642
   643 59E3 60				rts
   644
   645
   646 				;-------------------------------
   647
   648 59E4			ClearBonusExpandEffect
   649 59E4 24 65			bit m_bonusExpandIsActive
   650 59E6 10 15			bpl CBEE_exit
   651
   652 59E8 A9 00			lda #0
   653 59EA 85 65			sta m_bonusExpandIsActive
   654
   655 				; if we are clearing the expand effect to set the reduce effect, then continue..
   656 				; if not, we need to update here the new position of the normal pad
   657 59EC 24 68			bit m_bonusReduceIsActive
   658 59EE 30 0A			bmi CBEE_normal_clear
   659
   660 				; get pad middle position
   661 59F0 20 99 59			jsr GetPadMiddlePoint
   662
   663 59F3 20 21 45			jsr SetNormalPadInfo
   664
   665 				; set pad position according to middle point and new size
   666 59F6 20 A1 59			jsr SetPadWithMiddlePoint
   667
   668 59F9 60				rts
   669
   670
   671 59FA			CBEE_normal_clear
   672 59FA 20 21 45			jsr SetNormalPadInfo
   673
   674 59FD			CBEE_exit
   675 59FD 60				rts
   676
   677
   678 				;-------------------------------
   679
   680 59FE			ClearBonusReduceEffect
   681 59FE 24 68			bit m_bonusReduceIsActive
   682 5A00 10 15			bpl CBRE_exit
   683
   684 5A02 A9 00			lda #0
   685 5A04 85 68			sta m_bonusReduceIsActive
   686
   687 				; if we are clearing the reduce effect to set the expand effect, then continue..
   688 				; if not, we need to update here the new position of the normal pad
   689 5A06 24 65			bit m_bonusExpandIsActive
   690 5A08 30 0A			bmi CBRE_normal_clear
   691
   692 				; get pad middle position
   693 5A0A 20 99 59			jsr GetPadMiddlePoint
   694
   695 5A0D 20 21 45			jsr SetNormalPadInfo
   696
   697 				; set pad position according to middle point and new size
   698 5A10 20 A1 59			jsr SetPadWithMiddlePoint
   699
   700 5A13 60				rts
   701
   702
   703 5A14			CBRE_normal_clear
   704 5A14 20 21 45			jsr SetNormalPadInfo
   705
   706 5A17			CBRE_exit
   707 5A17 60				rts
   708
   709
   710 				;-------------------------------
   711
   712 5A18			ClearBonusMegaEffect
   713 5A18 24 69			bit m_bonusMegaIsActive
   714 5A1A 10 10			bpl CBME_exit
   715
   716 5A1C A9 00			lda #0
   717 5A1E 85 69			sta m_bonusMegaIsActive
   718
   719 5A20 A9 0E			lda #BALL_COLOR
   720 5A22 8D 12 D0			sta COLPM0
   721 5A25 A5 78			lda m_ballBackgroundColor
   722 5A27 85 77			sta m_ballAntialiasColor
   723 5A29 8D 13 D0			sta COLPM1
   724
   725 5A2C			CBME_exit
   726 5A2C 60				rts
   727
   728
   729 				;-------------------------------
   730
   731 				; ClearBonusDisruptEffect
   732 				; 	lda m_numberOfBallsInPlay
   733 				; 	cmp #1
   734 				; 	beq CBDE_exit
   735 				; 
   736 				; 
   737 				; CBDE_exit
   738 				; 	rts
   739
   740
   741 				;-------------------------------
   742
   743 5A2D			ClearBonusBreakEffect
   744 5A2D 24 67			bit m_bonusBreakIsActive
   745 5A2F 10 2C			bpl CBBE_exit
   746
   747 5A31 A9 00			lda #0
   748 5A33 85 67			sta m_bonusBreakIsActive
   749
   750 5A35			ForceCloseSideHoles
   751 				; restore "hole" of the break bonus, in the right border (4 chars)
   752 5A35 A9 A6			lda #38+128
   753 5A37 8D 5D AB			sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]
   754 5A3A A9 A7			lda #39+128
   755 5A3C 8D 5E AB			sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]+1
   756 5A3F A9 A6			lda #38+128
   757 5A41 8D 7D AB			sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]
   758 5A44 A9 A7			lda #39+128
   759 5A46 8D 7E AB			sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET+NUM_BRICKS_X*2]+1
   760
   761 				; restore "hole" of the break bonus, in the left border (4 chars)
   762 5A49 A9 A6			lda #38+128
   763 5A4B 8D 41 AB			sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET-2]
   764 5A4E A9 A7			lda #39+128
   765 5A50 8D 42 AB			sta DL1_data_address+[[[PAD_BRICK_LINE-1]*BYTES_LINE]+LEFT_BRICK_OFFSET-2]+1
   766 5A53 A9 A6			lda #38+128
   767 5A55 8D 61 AB			sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET-2]
   768 5A58 A9 A7			lda #39+128
   769 5A5A 8D 62 AB			sta DL1_data_address+[[PAD_BRICK_LINE*BYTES_LINE]+LEFT_BRICK_OFFSET-2]+1
   770
   771
   772 5A5D			CBBE_exit
   773 5A5D 60				rts
   774
   775
   776 				;-------------------------------
   777
   778 5A5E			ClearBonusCatchEffect
   779 5A5E 24 66			bit m_bonusCatchIsActive
   780 5A60 10 08			bpl CBCE_exit
   781
   782 5A62 A9 00			lda #0
   783 5A64 85 66			sta m_bonusCatchIsActive
   784
   785 5A66 85 75			sta m_ballCatchedByPadFlag
   786 5A68 85 76			sta m_ballCatchedByPadTimer
   787
   788
   789 5A6A			CBCE_exit
   790 5A6A 60				rts
   791
  2987
  2988
  2989 				;================================================================================
  2990
  2991 5A6B			UpdateSpriteBall1
  2992 5A6B A5 59			lda bonus_flag
  2993 5A6D D0 11			bne USB1_plain_ball
  2994
  2995 5A6F A5 79			lda m_numberOfBallsInPlay
  2996 5A71 C9 01			cmp #1
  2997 5A73 D0 0B			bne USB1_plain_ball
  2998
  2999
  3000 				; 	ldy old_ball_rypos		; multiball code change
  3001 				; 	lda #0
  3002 				; 	ldx #BALL_SIZEY
  3003 				; db1	sta p0_adr+PM_OFFSET_Y,y
  3004 				; 	sta p1_adr+PM_OFFSET_Y,y
  3005 				; 	iny
  3006 				; 	dex
  3007 				; 	bne db1
  3008 				;
  3009 				; 	ldy ball_rypos			; multiball code change
  3010 				; db2	lda TabBallShape1,x
  3011 				; 	sta p0_adr+PM_OFFSET_Y,y
  3012 				; 	lda TabBallShape2,x
  3013 				; 	sta p1_adr+PM_OFFSET_Y,y
  3014 				; 	iny
  3015 				; 	inx
  3016 				; 	cpx #BALL_SIZEY
  3017 				; 	bne db2
  3018 				;
  3019 				; 	rts
  3020 				;
  3021 				;
  3022 				; db3	ldy old_ball_rypos		; multiball code change
  3023 				; 	lda #0
  3024 				; 	ldx #BALL_SIZEY
  3025 				; db4	sta p0_adr+PM_OFFSET_Y,y
  3026 				; 	iny
  3027 				; 	dex
  3028 				; 	bne db4
  3029 				;
  3030 				; 	ldy ball_rypos		 	; multiball code change
  3031 				; db5	lda TabBallShape1,x
  3032 				; 	sta p0_adr+PM_OFFSET_Y,y
  3033 				; 	iny
  3034 				; 	inx
  3035 				; 	cpx #BALL_SIZEY
  3036 				; 	bne db5
  3037
  3038
  3039 5A75 A4 35			ldy old_ball_rypos
  3040 5A77 20 A1 5A			jsr EraseFullBall1
  3041
  3042 5A7A A4 32			ldy ball_rypos
  3043 5A7C 20 C8 5A			jsr DrawFullBall1
  3044
  3045 5A7F 60				rts
  3046
  3047
  3048 5A80			USB1_plain_ball
  3049 5A80 A4 35			ldy old_ball_rypos
  3050 5A82 20 11 5B			jsr EraseBall1
  3051
  3052 5A85 A4 32			ldy ball_rypos
  3053 5A87 20 26 5B			jsr DrawBall1
  3054
  3055 5A8A 60				rts
  3056
  3057
  3058 5A8B			UpdateSpriteBall2
  3059 5A8B A4 36			ldy old_ball_rypos+1
  3060 5A8D 20 4B 5B			jsr EraseBall2
  3061
  3062 5A90 A4 33			ldy ball_rypos+1
  3063 5A92 20 60 5B			jsr DrawBall2
  3064
  3065 5A95 60				rts
  3066
  3067
  3068 5A96			UpdateSpriteBall3
  3069 5A96 A4 37			ldy old_ball_rypos+2
  3070 5A98 20 85 5B			jsr EraseBall3
  3071
  3072 5A9B A4 34			ldy ball_rypos+2
  3073 5A9D 20 9A 5B			jsr DrawBall3
  3074
  3075 5AA0 60				rts
  3076
  3077
  3078 				;-------------------------------
  3079
  3080 5AA1			EraseFullBall1
  3081 5AA1 A9 00			lda #0
  3082
  3083 					.rept 6
  3084 					STA P0_ADR+PM_OFFSET_Y+#,Y
  3085 					STA P1_ADR+PM_OFFSET_Y+#,Y
  3086 					.endr
Source: REPT
  3084 5AA3 99 1C A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3084 5AA6 99 1C A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3084 5AA9 99 1D A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3084 5AAC 99 1D A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3084 5AAF 99 1E A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3084 5AB2 99 1E A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3084 5AB5 99 1F A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3084 5AB8 99 1F A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3084 5ABB 99 20 A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3084 5ABE 99 20 A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3084 5AC1 99 21 A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3084 5AC4 99 21 A5			STA P1_ADR+PM_OFFSET_Y+#,Y
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  3087
  3088 5AC7 60				rts
  3089
  3090
  3091 5AC8			DrawFullBall1
  3092 					.rept 6
  3093 					LDA TABBALLSHAPE1+#
  3094 					STA P0_ADR+PM_OFFSET_Y+#,Y
  3095 					LDA TABBALLSHAPE2+#
  3096 					STA P1_ADR+PM_OFFSET_Y+#,Y
  3097 					.endr
Source: REPT
  3093 5AC8 AD C8 92			LDA TABBALLSHAPE1+#
  3093 5ACB 99 1C A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3093 5ACE AD CE 92			LDA TABBALLSHAPE2+#
  3093 5AD1 99 1C A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3093 5AD4 AD C9 92			LDA TABBALLSHAPE1+#
  3093 5AD7 99 1D A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3093 5ADA AD CF 92			LDA TABBALLSHAPE2+#
  3093 5ADD 99 1D A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3093 5AE0 AD CA 92			LDA TABBALLSHAPE1+#
  3093 5AE3 99 1E A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3093 5AE6 AD D0 92			LDA TABBALLSHAPE2+#
  3093 5AE9 99 1E A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3093 5AEC AD CB 92			LDA TABBALLSHAPE1+#
  3093 5AEF 99 1F A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3093 5AF2 AD D1 92			LDA TABBALLSHAPE2+#
  3093 5AF5 99 1F A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3093 5AF8 AD CC 92			LDA TABBALLSHAPE1+#
  3093 5AFB 99 20 A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3093 5AFE AD D2 92			LDA TABBALLSHAPE2+#
  3093 5B01 99 20 A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3093 5B04 AD CD 92			LDA TABBALLSHAPE1+#
  3093 5B07 99 21 A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3093 5B0A AD D3 92			LDA TABBALLSHAPE2+#
  3093 5B0D 99 21 A5			STA P1_ADR+PM_OFFSET_Y+#,Y
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  3098
  3099 5B10 60				rts
  3100
  3101
  3102 				;-------------------------------
  3103
  3104 5B11			EraseBall1
  3105 5B11 A9 00			lda #0
  3106 5B13 99 1C A4 99 1D A4 + 	:6 sta p0_adr+PM_OFFSET_Y+#,y
  3107
  3108 5B25 60				rts
  3109
  3110
  3111 5B26			DrawBall1
  3112 					.rept 6
  3113 					LDA TABBALLSHAPE1+#
  3114 					STA P0_ADR+PM_OFFSET_Y+#,Y
  3115 					.endr
Source: REPT
  3113 5B26 AD C8 92			LDA TABBALLSHAPE1+#
  3113 5B29 99 1C A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3113 5B2C AD C9 92			LDA TABBALLSHAPE1+#
  3113 5B2F 99 1D A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3113 5B32 AD CA 92			LDA TABBALLSHAPE1+#
  3113 5B35 99 1E A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3113 5B38 AD CB 92			LDA TABBALLSHAPE1+#
  3113 5B3B 99 1F A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3113 5B3E AD CC 92			LDA TABBALLSHAPE1+#
  3113 5B41 99 20 A4			STA P0_ADR+PM_OFFSET_Y+#,Y
  3113 5B44 AD CD 92			LDA TABBALLSHAPE1+#
  3113 5B47 99 21 A4			STA P0_ADR+PM_OFFSET_Y+#,Y
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  3116
  3117 5B4A 60				rts
  3118
  3119
  3120 				;-------------------------------
  3121
  3122 5B4B			EraseBall2
  3123 5B4B A9 00			lda #0
  3124 5B4D 99 1C A5 99 1D A5 + 	:6 sta p1_adr+PM_OFFSET_Y+#,y
  3125
  3126 5B5F 60				rts
  3127
  3128
  3129 5B60			DrawBall2
  3130 					.rept 6
  3131 					LDA TABBALLSHAPE1+#
  3132 					STA P1_ADR+PM_OFFSET_Y+#,Y
  3133 					.endr
Source: REPT
  3131 5B60 AD C8 92			LDA TABBALLSHAPE1+#
  3131 5B63 99 1C A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3131 5B66 AD C9 92			LDA TABBALLSHAPE1+#
  3131 5B69 99 1D A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3131 5B6C AD CA 92			LDA TABBALLSHAPE1+#
  3131 5B6F 99 1E A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3131 5B72 AD CB 92			LDA TABBALLSHAPE1+#
  3131 5B75 99 1F A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3131 5B78 AD CC 92			LDA TABBALLSHAPE1+#
  3131 5B7B 99 20 A5			STA P1_ADR+PM_OFFSET_Y+#,Y
  3131 5B7E AD CD 92			LDA TABBALLSHAPE1+#
  3131 5B81 99 21 A5			STA P1_ADR+PM_OFFSET_Y+#,Y
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  3134
  3135 5B84 60				rts
  3136
  3137
  3138 				;-------------------------------
  3139
  3140 5B85			EraseBall3
  3141 5B85 A9 00			lda #0
  3142 5B87 99 1C A6 99 1D A6 + 	:6 sta p2_adr+PM_OFFSET_Y+#,y
  3143
  3144 5B99 60				rts
  3145
  3146
  3147 5B9A			DrawBall3
  3148 					.rept 6
  3149 					LDA TABBALLSHAPE1+#
  3150 					STA P2_ADR+PM_OFFSET_Y+#,Y
  3151 					.endr
Source: REPT
  3149 5B9A AD C8 92			LDA TABBALLSHAPE1+#
  3149 5B9D 99 1C A6			STA P2_ADR+PM_OFFSET_Y+#,Y
  3149 5BA0 AD C9 92			LDA TABBALLSHAPE1+#
  3149 5BA3 99 1D A6			STA P2_ADR+PM_OFFSET_Y+#,Y
  3149 5BA6 AD CA 92			LDA TABBALLSHAPE1+#
  3149 5BA9 99 1E A6			STA P2_ADR+PM_OFFSET_Y+#,Y
  3149 5BAC AD CB 92			LDA TABBALLSHAPE1+#
  3149 5BAF 99 1F A6			STA P2_ADR+PM_OFFSET_Y+#,Y
  3149 5BB2 AD CC 92			LDA TABBALLSHAPE1+#
  3149 5BB5 99 20 A6			STA P2_ADR+PM_OFFSET_Y+#,Y
  3149 5BB8 AD CD 92			LDA TABBALLSHAPE1+#
  3149 5BBB 99 21 A6			STA P2_ADR+PM_OFFSET_Y+#,Y
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  3152
  3153 5BBE 60				rts
  3154
  3155
  3156 				;-------------------------------
  3157
  3158 				.if .def USE_ENEMY_CODE
  3159
  3160 				; TabEnemyShapeP3	(X, Y+7, L:5)
  3161 				; TabEnemyShapeM3M2M1 (X+3, Y, L:14)
  3162
  3163 5BBF			EraseEnemy1
  3164 5BBF A9 00			lda #0
  3165
  3166 5BC1 99 07 A7 99 08 A7 + 	:5 sta p3_adr+7+#,y
  3167
  3168 5BD0 99 00 A3 99 01 A3 + 	:14 sta m0_adr+#,y
  3169
  3170 5BFA 60				rts
  3171
  3172
  3173 5BFB			DrawEnemy1
  3174 					.rept 5
  3175 						LDA TABENEMYSHAPEP3+#
  3176 						STA P3_ADR+7+#,Y
  3177 					.endr
Source: REPT
  3175 5BFB AD 53 97				LDA TABENEMYSHAPEP3+#
  3175 5BFE 99 07 A7				STA P3_ADR+7+#,Y
  3175 5C01 AD 54 97				LDA TABENEMYSHAPEP3+#
  3175 5C04 99 08 A7				STA P3_ADR+7+#,Y
  3175 5C07 AD 55 97				LDA TABENEMYSHAPEP3+#
  3175 5C0A 99 09 A7				STA P3_ADR+7+#,Y
  3175 5C0D AD 56 97				LDA TABENEMYSHAPEP3+#
  3175 5C10 99 0A A7				STA P3_ADR+7+#,Y
  3175 5C13 AD 57 97				LDA TABENEMYSHAPEP3+#
  3175 5C16 99 0B A7				STA P3_ADR+7+#,Y
Source: D:\!Delphi\mads\examples\games\pad\pad.asm
  3178
  3179 5C19 AD 58 97			lda TabEnemyShapeM3M2M1+0
  3180 5C1C 99 00 A3			sta m0_adr+0,y
  3181 					// lda TabEnemyShapeM3M2M1+1
  3182 					// sta m0_adr+1,y
  3183 					// lda TabEnemyShapeM3M2M1+2
  3184 					// sta m0_adr+2,y
  3185 					// lda TabEnemyShapeM3M2M1+3
  3186 					// sta m0_adr+3,y
  3187 					// lda TabEnemyShapeM3M2M1+4
  3188 					// sta m0_adr+4,y
  3189 					// lda TabEnemyShapeM3M2M1+5
  3190 					// sta m0_adr+5,y
  3191 					// lda TabEnemyShapeM3M2M1+6
  3192 					// sta m0_adr+6,y
  3193 					// lda TabEnemyShapeM3M2M1+7
  3194 					// sta m0_adr+7,y
  3195 5C1F AD 60 97			lda TabEnemyShapeM3M2M1+8
  3196 5C22 99 08 A3			sta m0_adr+8,y
  3197 5C25 AD 61 97			lda TabEnemyShapeM3M2M1+9
  3198 5C28 99 09 A3			sta m0_adr+9,y
  3199 5C2B AD 62 97			lda TabEnemyShapeM3M2M1+10
  3200 5C2E 99 0A A3			sta m0_adr+10,y
  3201 5C31 AD 63 97			lda TabEnemyShapeM3M2M1+11
  3202 5C34 99 0B A3			sta m0_adr+11,y
  3203 5C37 AD 64 97			lda TabEnemyShapeM3M2M1+12
  3204 5C3A 99 0C A3			sta m0_adr+12,y
  3205 5C3D AD 65 97			lda TabEnemyShapeM3M2M1+13
  3206 5C40 99 0D A3			sta m0_adr+13,y
  3207
  3208 				; the animation frames overwrite only some bytes
  3209 5C43 A6 9B			ldx m_enemy1AnimIndex
  3210 5C45 BD BE 97			lda TabEnemyAnimM3M2M1_LSB,x
  3211 5C48 8D 55 5C			sta DrawEnemy1_loop+1
  3212 5C4B BD C9 97			lda TabEnemyAnimM3M2M1_MSB,x
  3213 5C4E 8D 56 5C			sta DrawEnemy1_loop+2
  3214
  3215 					/*ldx #ENEMY1_ANIM1_FRAME_SIZE
  3216
  3217 				// this doesn't work for y < ENEMY1_ANIM1_FRAME_SIZE (7) .. at some point y is going to be < 0 (and that is not -1, but 255!)
  3218 				DrawEnemy1_loop
  3219 					lda $FFFF,x
  3220 					sta m0_adr+ENEMY1_ANIM1_FRAME_SIZE,y
  3221 					dey
  3222 					dex
  3223 					bne DrawEnemy1_loop*/
  3223
  3224
  3225 5C51 A2 00			ldx #0
  3226 5C53 C8				iny		// animation data starts at second line of the enemy
  3227
  3228 5C54			DrawEnemy1_loop
  3229 5C54 BD FF FF			lda $FFFF,x
  3230 5C57 99 00 A3			sta m0_adr,y
  3231 5C5A C8				iny
  3232 					//beq _exit		// add this if needed, to not wrap around at the bottom
  3233 5C5B E8				inx
  3234 5C5C E0 07			cpx #ENEMY1_ANIM1_FRAME_SIZE
  3235 5C5E D0 F4			bne DrawEnemy1_loop
  3236
  3237 5C60 60				rts
  3238
  3239
  3240 5C61			EraseExplosion1
  3241 5C61 A9 00			lda #0
  3242
  3243 5C63 99 00 A7 99 01 A7 + 	:EXPLOSION1_ANIM1_FRAME_SIZE sta p3_adr+#,y
  3244
  3245 5CA5 99 00 A3 99 01 A3 + 	:EXPLOSION1_ANIM1_FRAME_SIZE sta m0_adr+#,y
  3246
  3247 5CE7 60				rts
  3248
  3249 5CE8			DrawExplosion1
  3250 5CE8 A6 9B			ldx m_enemy1AnimIndex
  3251
  3252 5CEA BD 94 98			lda TabExplosionAnimP3_LSB,x
  3253 5CED 8D 05 5D			sta DrawExplosion1_loop+1
  3254 5CF0 BD 98 98			lda TabExplosionAnimP3_MSB,x
  3255 5CF3 8D 06 5D			sta DrawExplosion1_loop+2
  3256
  3257 5CF6 BD 9C 98			lda TabExplosionAnimM3M2M1_LSB,x
  3258 5CF9 8D 0B 5D			sta DrawExplosion1_m0+1
  3259 5CFC BD A0 98			lda TabExplosionAnimM3M2M1_MSB,x
  3260 5CFF 8D 0C 5D			sta DrawExplosion1_m0+2
  3261
  3262 					/*ldx #EXPLOSION1_ANIM1_FRAME_SIZE
  3263
  3264 				// this doesn't work for y < EXPLOSION1_ANIM1_FRAME_SIZE (22) .. at some point y is going to be < 0 (and that is not -1, but 255!)
  3265 				DrawExplosion1_loop
  3266 					lda $FFFF,x
  3267 					sta p3_adr+EXPLOSION1_ANIM1_FRAME_SIZE-1,y
  3268
  3269 				DrawExplosion1_m0
  3270 					lda $FFFF,x
  3271 					sta m0_adr+EXPLOSION1_ANIM1_FRAME_SIZE-1,y
  3272
  3273 					dey
  3274 					dex
  3275 					bne DrawExplosion1_loop*/
  3275
  3276
  3277 5D02 A2 00			ldx #0
  3278
  3279 5D04			DrawExplosion1_loop
  3280 5D04 BD FF FF			lda $FFFF,x
  3281 5D07 99 00 A7			sta p3_adr,y
  3282
  3283 5D0A			DrawExplosion1_m0
  3284 5D0A BD FF FF			lda $FFFF,x
  3285 5D0D 99 00 A3			sta m0_adr,y
  3286
  3287 5D10 C8				iny
  3288 					//beq _exit		// add this if needed, to not wrap around at the bottom
  3289 5D11 E8				inx
  3290 5D12 E0 16			cpx #EXPLOSION1_ANIM1_FRAME_SIZE
  3291 5D14 D0 EE			bne DrawExplosion1_loop
  3292
  3293 5D16 60				rts
  3294
  3295 				.endif
  3296
  3297
  3298 				;================================================================================
  3299 				;================================================================================
  3300
  3301 5D17				icl "pad_vbi.asm"
Source: D:\!Delphi\mads\examples\games\pad\pad_vbi.asm
     1
     2 				; this is no longer used in a real VBI, now is called from the last DLI in the DL
     3 5D17			VBI_address
     4 				; 	lda #8
     5 				; 	sta CONSOL		; not using consol right now
     6
     7 					.if .def SHOW_TIMING_AREAS
     8 					sta COLBK
     9 					.endif
    10
    11
    12 				; 	lda #0			; this is now updated in the last DLI
    13 				; 	sta dli_index
    14
    15
    16 				; info line logic
    17 				; 	lda #>Font1_address
    18 				; 	sta CHBASE
    19
    20
    21 					;jsr DisplayBallSteps
    22
    23 				/*
    24 				;-------------------------------
    25 				; update RMT usage for the song at the start of a level
    26 					lda m_waitForSongEndCounter
    27 					beq VBI_update_pause_key
    28 					
    29 					dec m_waitForSongEndCounter
    30 					bne VBI_update_start_music
    31 					
    32 					; stop RMT menu music
    33 					jsr RASTERMUSICTRACKER+9
    34
    35 					jmp VBI_update_pause_key
    36 					
    37 				VBI_update_start_music
    38
    39 				; worst hack ever.. but it doesn't sound that bad
    40 				.if .def PAL_VERSION
    41 					jsr RASTERMUSICTRACKER+3		; play one frame
    42 				.endif
    43
    44 				; play RMT music
    45 					jsr RASTERMUSICTRACKER+3		; play one frame
    46 					jsr RASTERMUSICTRACKER+3		; play one frame
    47 					jsr RASTERMUSICTRACKER+3		; play one frame
    48 				*/
    48
    49
    50 				;================================================================================
    51 				; update pause key state
    52 				;================================================================================
    53 5D17			VBI_update_pause_key
    54 5D17 A5 AB			lda m_keyPausePressed
    55 5D19 85 AC			sta m_oldKeyPausePressed
    56
    57 5D1B A9 00			lda #0
    58 5D1D 85 AB			sta m_keyPausePressed
    59
    60 5D1F AD 0F D2			lda SKCTL
    61 5D22 29 04			and #4			; a key pressed ?
    62 5D24 D0 0D			bne VBI_check_pause_key_just_pressed
    63
    64 5D26 AD 09 D2			lda KBCODE
    65 5D29 29 3F			and #%00111111		; bit7 -> control, bit6 -> shift
    66 5D2B C9 21			cmp #33			; "space bar", pause key
    67 5D2D D0 04			bne VBI_check_pause_key_just_pressed
    68
    69 5D2F A9 80			lda #128
    70 5D31 85 AB			sta m_keyPausePressed
    71
    72 5D33			VBI_check_pause_key_just_pressed
    73 5D33 24 AC			bit m_oldKeyPausePressed
    74 5D35 30 19			bmi VBI_end_check_pause
    75 5D37 24 AB			bit m_keyPausePressed
    76 5D39 10 15			bpl VBI_end_check_pause
    77
    78 				; pause key just pressed, change pause state
    79 5D3B A5 AD			lda m_pauseModeFlag
    80 5D3D 49 80			eor #128
    81 5D3F 85 AD			sta m_pauseModeFlag
    82
    83 5D41 10 18			bpl VBI_update_counters		; exiting pause, continue with normal events
    84
    85 5D43 A9 00			lda #0
    86 5D45 8D 01 D2			sta AUDC1					; clear sounds at the start of the pause
    87 5D48 8D 05 D2			sta AUDC3
    88 5D4B 85 6E			sta m_padFrameDeltaStep		; clear accumulated mouse movement
    89
    90 5D4D 4C B1 63			jmp VBI_exit
    91
    92 5D50			VBI_end_check_pause
    93
    94 5D50 24 AD			bit m_pauseModeFlag
    95 5D52 10 07			bpl VBI_update_counters
    96
    97 				; still in pause mode
    98 5D54 A9 00			lda #0
    99 5D56 85 6E			sta m_padFrameDeltaStep		; clear accumulated mouse movement
   100
   101 5D58 4C B1 63			jmp VBI_exit
   102
   103
   104 				;================================================================================
   105 				; update vbi counters
   106 				;================================================================================
   107 5D5B			VBI_update_counters
   108 5D5B E6 4B			inc vbi_anim_ctd
   109
   110 5D5D C6 4D			dec vbi_jif_ctd
   111 5D5F D0 1F			bne VBI_update_ball_catched_timer
   112 5D61 A9 19			lda #VBI_COUNTER_FRAMES
   113 5D63 85 4D			sta vbi_jif_ctd
   114
   115
   116 				; update restore brick global counter
   117 5D65 E6 4E			inc vbi_gold_ctd
   118
   119
   120 				; update ball speed up timer
   121 5D67 A5 72			lda m_ballSpeedUpTimer
   122 5D69 F0 15			beq VBI_update_ball_catched_timer
   123 5D6B C6 72			dec m_ballSpeedUpTimer
   124 5D6D D0 11			bne VBI_update_ball_catched_timer
   125
   126 5D6F A5 DF			lda m_ballSpeedUpHalfSeconds
   127 5D71 85 72			sta m_ballSpeedUpTimer		; reset speedup timer
   128
   129 5D73 A5 70			lda m_currentBallSpeed
   130 5D75 18				clc
   131 5D76 69 01			adc #BALL_HITS_SPEEDUP_STEP
   132 5D78 C5 DE			cmp m_maxBallSpeed
   133 					;beq VBI_update_ball_speed
   134 5D7A 90 02			bcc VBI_update_ball_speed
   135
   136 5D7C A5 DE			lda m_maxBallSpeed
   137
   138 5D7E			VBI_update_ball_speed
   139 5D7E 85 70			sta m_currentBallSpeed
   140
   141
   142 				; update catched ball timer and flag state
   143 5D80			VBI_update_ball_catched_timer
   144 5D80 A5 76			lda m_ballCatchedByPadTimer
   145 5D82 F0 08			beq VBI_update_open_exits_timer
   146 5D84 C6 76			dec m_ballCatchedByPadTimer
   147 5D86 D0 04			bne VBI_update_open_exits_timer
   148
   149 5D88 A9 00			lda #0
   150 5D8A 85 75			sta m_ballCatchedByPadFlag
   151
   152
   153 				; update timer to open side exits at the end of the level
   154 5D8C			VBI_update_open_exits_timer
   155 5D8C A5 A7			lda m_openSidesWaitTimer
   156 5D8E F0 0D			beq VBI_update_exits_animation
   157 5D90 C6 A7			dec m_openSidesWaitTimer
   158 5D92 D0 09			bne VBI_update_exits_animation
   159
   160 				; open both sides holes to exit
   161 5D94 A9 00			lda #0
   162 5D96 85 09			sta m_padAtRightLimitFlag
   163 5D98 85 0A			sta m_padAtLeftLimitFlag
   164
   165 5D9A 20 68 59			jsr ForceOpenSideHoles
   166
   167
   168 				; update timer to animate the exits electricity effect
   169 5D9D			VBI_update_exits_animation
   170 5D9D A5 A8			lda m_animateExitsTimer
   171 5D9F F0 16			beq VBI_update_start_game_timer
   172 5DA1 C6 A8			dec m_animateExitsTimer
   173 5DA3 D0 12			bne VBI_update_start_game_timer
   174 					
   175 5DA5 A9 03			lda #EXIT_ANIMATION_TIME
   176 5DA7 85 A8			sta m_animateExitsTimer
   177 					
   178 5DA9 A6 A9			ldx m_exitsAnimationIndex
   179 5DAB E8				inx
   180 5DAC E0 03			cpx #EXIT_ANIMATION_FRAMES
   181 5DAE D0 02			bne VBI_exits_update_frame
   182 5DB0 A2 00			ldx #0
   183 5DB2			VBI_exits_update_frame
   184 5DB2 86 A9			stx m_exitsAnimationIndex
   185
   186 5DB4 20 70 59			jsr DrawOpenSideFrames
   187
   188
   189 				; update timer to wait some time, at the start of a level (before creating a ball)
   190 5DB7			VBI_update_start_game_timer
   191 5DB7 A5 AA			lda m_startGameWaitTimer
   192 5DB9 F0 02			beq VBI_update_start_level_highlight
   193 5DBB C6 AA			dec m_startGameWaitTimer
   194
   195
   196 				; update timer for the highlight animation, at the start of a level
   197 5DBD			VBI_update_start_level_highlight
   198 5DBD A5 B0			lda m_startLevelHighlightTimer
   199 5DBF F0 03			beq VBI_set_ball_pos
   200
   201 5DC1 20 19 54			jsr UpdateStartLevelHighlight
   202
   203
   204 				;================================================================================
   205 				; draw ball at correct position
   206 				;================================================================================
   207 5DC4			VBI_set_ball_pos
   208 5DC4 A5 2F			lda ball_rxpos			; multiball code change
   209 5DC6 18				clc
   210 5DC7 69 4C			adc #PM_OFFSET_X
   211 5DC9 8D 00 D0			sta HPOSP0
   212
   213 5DCC A6 59			ldx bonus_flag
   214 5DCE D0 1C			bne VBI_draw_balls		; don't update P1 if there is a bonus falling
   215
   216 5DD0 A6 79			ldx m_numberOfBallsInPlay
   217 5DD2 E0 02			cpx #2
   218 5DD4 B0 06			bcs VBI_set_multiball	; don't update P1 if there are 2 or more balls in play
   219
   220 5DD6 8D 01 D0			sta HPOSP1			; set second player of first ball (antialiasing part)
   221 5DD9 4C EC 5D			jmp VBI_draw_balls
   222
   223
   224 5DDC			VBI_set_multiball
   225 5DDC A5 30			lda ball_rxpos+1
   226 5DDE 18				clc
   227 5DDF 69 4C			adc #PM_OFFSET_X
   228 5DE1 8D 01 D0			sta HPOSP1
   229
   230 5DE4 A5 31			lda ball_rxpos+2
   231 5DE6 18				clc
   232 5DE7 69 4C			adc #PM_OFFSET_X
   233 5DE9 8D 02 D0			sta HPOSP2
   234
   235
   236 5DEC			VBI_draw_balls
   237 5DEC A5 79			lda m_numberOfBallsInPlay
   238 5DEE F0 25			beq VBI_update_pad_pos
   239
   240 5DF0 C9 03			cmp #3
   241 5DF2 90 09			bcc VBI_check_draw_second
   242
   243 5DF4 A5 34			lda ball_rypos+2
   244 5DF6 C5 37			cmp old_ball_rypos+2
   245 5DF8 F0 03			beq VBI_check_draw_second
   246
   247 5DFA 20 96 5A			jsr UpdateSpriteBall3
   248
   249
   250 5DFD			VBI_check_draw_second
   251 5DFD A5 79			lda m_numberOfBallsInPlay
   252 5DFF C9 02			cmp #2
   253 5E01 90 09			bcc VBI_draw_first
   254
   255 5E03 A5 33			lda ball_rypos+1
   256 5E05 C5 36			cmp old_ball_rypos+1
   257 5E07 F0 03			beq VBI_draw_first
   258
   259 5E09 20 8B 5A			jsr UpdateSpriteBall2
   260
   261
   262 5E0C			VBI_draw_first
   263 5E0C A5 32			lda ball_rypos
   264 5E0E C5 35			cmp old_ball_rypos
   265 5E10 F0 03			beq VBI_update_pad_pos
   266
   267 5E12 20 6B 5A			jsr UpdateSpriteBall1
   268
   269
   270 				;================================================================================
   271 				; update pad position
   272 				;================================================================================
   273 5E15			VBI_update_pad_pos
   274 5E15 24 E0			bit m_usePaddleControllerFlag
   275 5E17 30 39			bmi VBI_use_paddle_controller
   276
   277 5E19 A5 6E			lda m_padFrameDeltaStep
   278 					;beq VBI_exit_move_pad
   279 5E1B F0 2B			beq VBI_force_pad_update		; this is for the cases when the pad change size
   280 5E1D 30 12			bmi VBI_move_pad_left
   281
   282 					// cmp #1
   283 					// beq VBI_move_pad_right
   284 					// cmp #64
   285 					// bcs VBI_move_pad_right
   286 					// asl		; delta x2
   287 					
   288 5E1F			VBI_move_pad_right
   289 5E1F 18				clc
   290 5E20 65 08			adc pad_xpos
   291
   292 				; check if there is a "hole" and we can skip the level ("break" bonus)
   293 				; 	bit m_bonusBreakIsActive
   294 				; 	bmi VBI_update_pad_right		; let the pad move to the right, over the limit
   295
   296 5E22 C5 7D			cmp m_maxPadPosXPlusOne
   297 5E24 90 06			bcc VBI_update_pad_right
   298
   299 5E26 A9 80			lda #128
   300 5E28 85 09			sta m_padAtRightLimitFlag
   301
   302 5E2A A5 7C			lda m_maxPadPosX
   303
   304 5E2C			VBI_update_pad_right
   305 5E2C 85 08			sta pad_xpos
   306
   307 5E2E 4C 44 5E			jmp VBI_end_move_pad
   308
   309
   310 5E31			VBI_move_pad_left
   311 				; 	lda #0
   312 				; 	sec
   313 				; 	sbc m_padFrameDeltaStep
   314 				; 	sta m_padFrameDeltaStep
   315 				;
   316 				; 	lda pad_xpos
   317 				; 	sec
   318
   319 5E31 49 FF			eor #255
   320 5E33 85 6E			sta m_padFrameDeltaStep
   321
   322 5E35 A5 08			lda pad_xpos
   323 5E37 18				clc		; an extra -1
   324 5E38 E5 6E			sbc m_padFrameDeltaStep
   325 5E3A B0 06			bcs VBI_update_pad_left
   326
   327 5E3C A9 80			lda #128
   328 5E3E 85 0A			sta m_padAtLeftLimitFlag
   329
   330 5E40 A9 00			lda #0
   331
   332 5E42			VBI_update_pad_left
   333 5E42 85 08			sta pad_xpos
   334
   335 5E44			VBI_end_move_pad
   336 5E44 A9 00			lda #0
   337 5E46 85 6E			sta m_padFrameDeltaStep
   338
   339 5E48			VBI_force_pad_update
   340 5E48 A5 08			lda pad_xpos
   341 5E4A 18				clc
   342 5E4B 69 4C			adc #PM_OFFSET_X
   343 5E4D 85 88			sta m_padHPOSP3
   344
   345 5E4F			VBI_exit_move_pad
   346 5E4F 4C A3 5E			jmp VBI_enemy_logic
   347
   348
   349 				;================================================================================
   350 				; move player pad using a paddle
   351 				;================================================================================
   352 5E52			VBI_use_paddle_controller
   353 5E52			POT_address1
   354 5E52 AD 00 D2			lda POT0		; (240?) 228 --> 0 (229 values) (Basic in Altirra: 1 to 227)
   355
   356 5E55 49 FF			eor #255		; 27 --> 255 (229 values)
   357
   358 5E57 A6 DA			ldx m_selectedPaddleAngleIndex
   359 5E59 F0 0F			beq VBI_paddle_angle_25
   360 5E5B E0 01			cpx #1
   361 5E5D F0 1B			beq VBI_paddle_angle_50
   362 5E5F E0 02			cpx #2
   363 5E61 F0 0F			beq VBI_paddle_angle_75
   364
   365 5E63			VBI_paddle_angle_100
   366 5E63 4A				lsr			; 13 --> 127 (115 values)
   367 5E64 38				sec
   368 5E65 E9 13			sbc #[13+6]	; use almost the full angle of the paddle controller
   369
   370 5E67 4C 7D 5E			jmp VBI_check_paddle_at_left_limit
   371
   372
   373 5E6A			VBI_paddle_angle_25
   374 5E6A AA				tax
   375 5E6B BD 00 91			lda TabPaddleConversionPercent25,x
   376 5E6E 38				sec
   377
   378 5E6F 4C 7F 5E			jmp VBI_check_paddle_size_limit
   379
   380
   381 5E72			VBI_paddle_angle_75
   382 5E72 AA				tax
   383 5E73 BD 00 90			lda TabPaddleConversionPercent75,x
   384 5E76 38				sec
   385
   386 5E77 4C 7F 5E			jmp VBI_check_paddle_size_limit
   387
   388
   389 5E7A			VBI_paddle_angle_50
   390 5E7A 38				sec
   391 5E7B E9 57			sbc #[27+60]	; use almost half the max angle of the paddle controller
   392
   393 					;jmp VBI_check_paddle_at_left_limit
   394
   395
   396 5E7D			VBI_check_paddle_at_left_limit
   397 5E7D 90 04			bcc VBI_set_paddle_at_left_limit
   398
   399 				; need to use the different offsets for the 3 pad sizes
   400 				; use "m_padHalfSizeX" and maybe "GAME_AREA_SIZEX" = 104
   401 5E7F			VBI_check_paddle_size_limit
   402 					;sec
   403 5E7F E5 80			sbc m_padHalfSizeX
   404 5E81 B0 09			bcs VBI_check_paddle_at_right_limit
   405
   406 5E83			VBI_set_paddle_at_left_limit
   407 5E83 A9 80			lda #128
   408 5E85 85 0A			sta m_padAtLeftLimitFlag
   409
   410 5E87 A9 00			lda #0
   411 5E89 4C 96 5E			jmp VBI_set_paddle_position
   412
   413 5E8C			VBI_check_paddle_at_right_limit
   414 5E8C C5 7D			cmp m_maxPadPosXPlusOne
   415 5E8E 90 06			bcc VBI_set_paddle_position
   416
   417 5E90 A9 80			lda #128
   418 5E92 85 09			sta m_padAtRightLimitFlag
   419
   420 5E94 A5 7C			lda m_maxPadPosX
   421
   422
   423 5E96			VBI_set_paddle_position
   424 5E96 85 08			sta pad_xpos
   425
   426
   427 5E98 A5 08			lda pad_xpos
   428 5E9A 18				clc
   429 5E9B 69 4C			adc #PM_OFFSET_X
   430 5E9D 85 88			sta m_padHPOSP3
   431
   432
   433 5E9F A9 00			lda #0					; not really needed, but..
   434 5EA1 85 6E			sta m_padFrameDeltaStep
   435
   436
   437 				;================================================================================
   438 				; update enemies logic
   439 				;================================================================================
   440 5EA3			VBI_enemy_logic
   441
   442 				.if .def USE_ENEMY_CODE
   443 5EA3 A5 D6			lda m_difficultyIndex
   444 5EA5 C9 03			cmp #3		; only extra game mode use enemies
   445 5EA7 F0 03			beq VBI_do_enemies
   446 5EA9 4C 03 62			jmp VBI_bonus_logic
   447
   448 				; check active enemies
   449
   450 				; ENEMY_STATE_OFF			= 0
   451 				; ENEMY_STATE_MOVING		= 1
   452 				; ENEMY_STATE_HOVERING		= 2
   453 				; ENEMY_STATE_DESTRUCTION	= 3
   454 				; ENEMY_STATE_WAIT_RESPAWN	= 4
   455
   456 5EAC			VBI_do_enemies
   457 5EAC A5 98			lda m_enemy1State
   458 5EAE C9 01			cmp #ENEMY_STATE_MOVING
   459 5EB0 F0 04			beq VBI_moving_or_hovering
   460 5EB2 C9 02			cmp #ENEMY_STATE_HOVERING
   461 5EB4 D0 03			bne VBI_check_state_wait
   462 5EB6			VBI_moving_or_hovering
   463 5EB6 4C 91 5F			jmp VBI_enemy_collisions
   464 					
   465 5EB9			VBI_check_state_wait
   466 5EB9 C9 04			cmp #ENEMY_STATE_WAIT_RESPAWN
   467 5EBB D0 03			bne VBI_check_state_destruction
   468 5EBD 4C 04 5F			jmp VBI_enemy_wait_respawn
   469
   470 5EC0			VBI_check_state_destruction
   471 5EC0 C9 03			cmp #ENEMY_STATE_DESTRUCTION
   472 5EC2 F0 03			beq VBI_enemy_destruction
   473 					
   474 5EC4 4C 03 62			jmp VBI_bonus_logic
   475
   476 				;----------------------------------------
   477 5EC7			VBI_enemy_destruction
   478 5EC7 C6 9C			dec m_enemy1AnimCounter
   479 5EC9 D0 36			bne VBI_exit_enemy_destruction
   480
   481 				; update enemy explosion animation
   482 5ECB A4 8B			ldy m_enemy1PosY
   483 5ECD 20 61 5C			jsr EraseExplosion1
   484
   485 5ED0 A4 9B			ldy m_enemy1AnimIndex
   486 5ED2 C8				iny
   487 5ED3 C0 04			cpy #EXPLOSION1_ANIM1_FRAMES
   488 5ED5 F0 1E			beq VBI_end_enemy_destruction
   489 5ED7 84 9B			sty m_enemy1AnimIndex
   490 					
   491 5ED9 B9 90 98			lda TabExplosionAnimFrameTime,y
   492 5EDC 85 9C			sta m_enemy1AnimCounter
   493
   494 5EDE B9 84 98			lda TabExplosionAnimOffsetM3,y
   495 5EE1 85 A0			sta m_enemy1OffsetM3
   496 5EE3 B9 88 98			lda TabExplosionAnimOffsetM2,y
   497 5EE6 85 9F			sta m_enemy1OffsetM2
   498 5EE8 B9 8C 98			lda TabExplosionAnimOffsetM1,y
   499 5EEB 85 9E			sta m_enemy1OffsetM1
   500 					
   501 5EED A4 8B			ldy m_enemy1PosY
   502 5EEF 20 E8 5C			jsr DrawExplosion1
   503
   504 5EF2 4C 03 62			jmp VBI_bonus_logic
   505
   506 5EF5			VBI_end_enemy_destruction
   507 5EF5 A9 04			lda #ENEMY_STATE_WAIT_RESPAWN
   508 5EF7 85 98			sta m_enemy1State
   509 					
   510 5EF9 A9 45			lda #<[13*FRAMES_ONE_SECOND/2]		; time without enemies in screen
   511 5EFB 85 99			sta m_enemy1StateTimer
   512 5EFD A9 01			lda #>[13*FRAMES_ONE_SECOND/2]
   513 5EFF 85 9A			sta m_enemy1StateTimer+1
   514
   515 5F01			VBI_exit_enemy_destruction	
   516 5F01 4C 03 62			jmp VBI_bonus_logic
   517 					
   518 				;----------------------------------------
   519 5F04			VBI_enemy_wait_respawn
   520 5F04 24 A4			bit m_startGameBallCatchedFlag		; don't update the timer if the ball is catched at the start of a level
   521 5F06 10 03			bpl VBI_enemy_respawn_time
   522 5F08 4C 03 62			jmp VBI_bonus_logic
   523
   524 5F0B			VBI_enemy_respawn_time
   525 5F0B A5 99			lda m_enemy1StateTimer		; update state timer
   526 5F0D D0 02			bne VBI_enemy_wr
   527 5F0F C6 9A			dec m_enemy1StateTimer+1
   528 5F11			VBI_enemy_wr
   529 5F11 C6 99			dec m_enemy1StateTimer
   530 5F13 A5 99			lda m_enemy1StateTimer
   531 5F15 05 9A			ora m_enemy1StateTimer+1
   532 5F17 F0 03			beq VBI_enemy_do_respawn		; if both are zero, create a new enemy
   533
   534 5F19 4C 03 62			jmp VBI_bonus_logic
   535
   536 5F1C			VBI_enemy_do_respawn	
   537 5F1C A9 00			lda #0
   538 5F1E 85 8F			sta m_enemy1SineIndex
   539 5F20 85 9B			sta m_enemy1AnimIndex
   540 					
   541 5F22 AD B3 97			lda TabEnemyAnimFrameTime		; first value of this table
   542 5F25 85 9C			sta m_enemy1AnimCounter
   543 					
   544 5F27 AD 0A D2			lda RANDOM
   545 5F2A 29 3F			and #%111111			; 0 to 63
   546 5F2C 85 89			sta m_enemy1PosX
   547 5F2E AD 0A D2			lda RANDOM
   548 5F31 29 0F			and #%1111			; 0 to 15
   549 5F33 18				clc
   550 5F34 65 89			adc m_enemy1PosX		; 0 to 78 (is not a linear probability but it works good enough)
   551 5F36 69 53			adc #[[128-39]-6]		; (screen center X) - (78 / 2) - (sprite width / 2) .. from 83 to 161
   552 5F38 85 89			sta m_enemy1PosX		; starting descend coordinate X
   553
   554 5F3A A9 00			lda #0
   555 5F3C 85 8B			sta m_enemy1PosY
   556 5F3E 85 8E			sta m_enemy1OldPosY
   557 5F40 85 8C			sta m_enemy1BasePosY
   558 					
   559 5F42 85 8A			sta m_enemy1PosX_L1
   560 5F44 85 8D			sta m_enemy1BasePosY_L1
   561 5F46 85 90			sta m_enemy1StepX
   562 5F48 85 92			sta m_enemy1StepX_L1
   563
   564 5F4A A9 C0			lda #%11000000				; XY000000 two high bits equal to 1, implies add the offsets (move right and down)
   565 5F4C 85 96			sta m_enemy1DirectionsFlag
   566
   567 5F4E A9 03			lda #3					; offsets for the normal sprite of the enemies
   568 5F50 85 A0			sta m_enemy1OffsetM3
   569 5F52 A9 02			lda #2
   570 5F54 85 9F			sta m_enemy1OffsetM2
   571 5F56 A9 02			lda #2
   572 5F58 85 9E			sta m_enemy1OffsetM1
   573
   574 				; enemy type hard coded probabilities: green 50%, blue 30%, red 20%
   575 5F5A A2 00			ldx #ENEMY_TYPE_RED
   576 5F5C AD 0A D2			lda RANDOM
   577 5F5F 30 08			bmi VBI_set_enemy_green
   578 5F61 C9 33			cmp #51					; 2/5 of 128 approx.
   579 5F63 90 06			bcc VBI_set_enemy_type
   580 5F65 A2 01			ldx #ENEMY_TYPE_BLUE
   581 5F67 10 02			bpl VBI_set_enemy_type		; forced jump
   582 5F69			VBI_set_enemy_green
   583 5F69 A2 02			ldx #ENEMY_TYPE_GREEN
   584 5F6B			VBI_set_enemy_type
   585 5F6B 86 97			stx m_enemy1Type
   586
   587 5F6D BD 3E 97			lda TabEnemyColor,x
   588 5F70 85 A1			sta m_enemy1ColorP3
   589
   590 				.if .def PAL_VERSION
   591 5F72 A9 01			lda #>[222*2]			; starting descend speed in PAL
   592 5F74 85 91			sta m_enemy1StepY
   593 5F76 A9 BC			lda #<[222*2]
   594 5F78 85 93			sta m_enemy1StepY_L1
   595 				.else
   596 					lda #>[185*2]			; starting descend speed in NTSC
   597 					sta m_enemy1StepY
   598 					lda #<[185*2]
   599 					sta m_enemy1StepY_L1
   600 				.endif
   601
   602 5F7A BD 41 97			lda TabEnemyTopLimit,x		; descend to this height the first time
   603 5F7D 18				clc
   604 5F7E 69 14			adc #20
   605 5F80 85 95			sta m_enemy1LimitY
   606 5F82 A9 FF			lda #255					; just to be sure.. should be ENEMY_LIMIT_RIGHT
   607 5F84 85 94			sta m_enemy1LimitX
   608 					
   609 5F86 A9 01			lda #1
   610 5F88 85 9D			sta m_enemy1SizeP3
   611 					
   612 5F8A A9 01			lda #ENEMY_STATE_MOVING
   613 5F8C 85 98			sta m_enemy1State
   614 					
   615 5F8E 4C 03 62			jmp VBI_bonus_logic
   616
   617 					
   618 				/*
   619 				; check collision by distance
   620 				check_collision_1_1_x
   621 					lda m_ball1CenterX
   622 					sec
   623 					sbc m_enemy1CenterX
   624 					bcs collision_1_1_x_plus
   625
   626 					eor #255
   627 					adc #1
   628
   629 				collision_1_1_x_plus
   630 					cmp #[COLLISION_DIST_X-1]
   631 					bcs no_collision_1_1
   632
   633 				check_collision_1_1_y
   634 					lda m_ball1CenterY
   635 					sec
   636 					sbc m_enemy1CenterY
   637 					bcs collision_1_1_y_plus
   638
   639 					eor #255
   640 					adc #1
   641
   642 				collision_1_1_y_plus
   643 					cmp #[COLLISION_DIST_Y-1]
   644 					bcs no_collision_1_1
   645
   646 				; do collision effect (destroy the enemy)
   647 				collision_1_1
   648
   649 				no_collision_1_1
   650 				*/
   650
   651
   652 				;----------------------------------------
   653 				; check enemy collisions (P3) against balls (P0, P1, P2)
   654 5F91			VBI_enemy_collisions
   655 5F91 A5 79			lda m_numberOfBallsInPlay
   656 5F93 D0 03			bne VBI_check_enemy_collisions
   657 5F95 4C 51 60			jmp VBI_enemy_state_moving
   658
   659 5F98			VBI_check_enemy_collisions
   660 5F98 C9 03			cmp #3
   661 5F9A 90 08			bcc VBI_enemy_check_two_balls
   662
   663 5F9C A2 02			ldx #2		; ball 3 index
   664 5F9E A5 BB			lda m_dliP3PL
   665 5FA0 29 04			and #%100		; collision of P3 with P2
   666 5FA2 D0 19			bne VBI_destroy_enemy
   667
   668 5FA4			VBI_enemy_check_two_balls
   669 5FA4 A5 79			lda m_numberOfBallsInPlay
   670 5FA6 C9 02			cmp #2
   671 5FA8 90 08			bcc VBI_enemy_check_one_ball
   672
   673 5FAA A2 01			ldx #1		; ball 2 index
   674 5FAC A5 BB			lda m_dliP3PL
   675 5FAE 29 02			and #%010		; collision of P3 with P1
   676 5FB0 D0 0B			bne VBI_destroy_enemy
   677
   678 5FB2			VBI_enemy_check_one_ball
   679 5FB2 A2 00			ldx #0		; ball 1 index
   680 5FB4 A5 BB			lda m_dliP3PL
   681 5FB6 29 01			and #%001		; collision of P3 with P0
   682 5FB8 D0 03			bne VBI_destroy_enemy
   683 					
   684 5FBA 4C 51 60			jmp VBI_enemy_state_moving
   685
   686 				;----------------------------------------
   687 				; destroy the enemy (register X has the index of the collided ball)
   688 5FBD			VBI_destroy_enemy
   689
   690 				; don't change ball direction if the "X" powerup is active?
   691 5FBD 24 69			bit m_bonusMegaIsActive
   692 5FBF 30 5B			bmi VBI_do_destruction
   693
   694 				; all enemy types can change the direction steps
   695 5FC1 AD 0A D2			lda RANDOM
   696 5FC4 29 03			and #%11		; select one between 4 angles (could be the same)
   697 5FC6 A8				tay
   698 5FC7 C8				iny		; index value from 1 to 4 for the normal paddle angles
   699 					
   700 5FC8 B9 56 93			lda tab_pad_xstep1,y
   701 5FCB 95 0B			sta ball_xstep_1,x
   702 5FCD B9 5B 93			lda tab_pad_xstep2,y
   703 5FD0 95 0E			sta ball_xstep_2,x
   704 					
   705 5FD2 B9 60 93			lda tab_pad_ystep1,y
   706 5FD5 95 11			sta ball_ystep_1,x
   707 5FD7 B9 65 93			lda tab_pad_ystep2,y
   708 5FDA 95 14			sta ball_ystep_2,x
   709
   710 				;----------------------------------------
   711 				; change reaction according to enemy type!
   712 5FDC A5 97			lda m_enemy1Type
   713 					;cmp #ENEMY_TYPE_RED
   714 5FDE F0 0D			beq VBI_enemy_red_collision
   715 5FE0 C9 01			cmp #ENEMY_TYPE_BLUE
   716 5FE2 F0 25			beq VBI_enemy_blue_collision
   717
   718 5FE4			VBI_enemy_green_collision		; change only the horizontal direction
   719 5FE4 B5 17			lda ball_xdir,x
   720 5FE6 49 03			eor #[1+2]	; should be a binary xor of the two values
   721 5FE8 95 17			sta ball_xdir,x
   722
   723 5FEA 4C 1C 60			jmp VBI_do_destruction
   724
   725
   726 5FED			VBI_enemy_red_collision			; may change direction horizontal and may change vertical
   727 5FED AD 0A D2			lda RANDOM
   728 5FF0 30 09			bmi VBI_enemy_red_ball_ydir
   729
   730 5FF2 B5 17			lda ball_xdir,x
   731 5FF4 49 03			eor #[1+2]	; should be a binary xor of the two values
   732 5FF6 95 17			sta ball_xdir,x
   733
   734 5FF8 4C 1C 60			jmp VBI_do_destruction
   735
   736 5FFB			VBI_enemy_red_ball_ydir
   737 5FFB AD 0A D2			lda RANDOM
   738 5FFE 30 1C			bmi VBI_do_destruction
   739
   740 6000 B5 1A			lda ball_ydir,x
   741 6002 49 03			eor #[1+2]	; should be a binary xor of the two values
   742 6004 95 1A			sta ball_ydir,x
   743
   744 6006 4C 1C 60			jmp VBI_do_destruction
   745
   746
   747 6009			VBI_enemy_blue_collision			; if going up, go down, if not change horizontal direction
   748 6009 B5 1A			lda ball_ydir,x
   749 600B C9 01			cmp #1			; going up
   750 600D F0 09			beq VBI_enemy_blue_ball_down
   751
   752 600F B5 17			lda ball_xdir,x
   753 6011 49 03			eor #[1+2]	; should be a binary xor of the two values
   754 6013 95 17			sta ball_xdir,x
   755
   756 6015 4C 1C 60			jmp VBI_do_destruction
   757
   758 6018			VBI_enemy_blue_ball_down
   759 6018 A9 02			lda #2			; go down now
   760 601A 95 1A			sta ball_ydir,x
   761
   762 					;jmp VBI_do_destruction
   763
   764 				;----------------------------------------
   765 601C			VBI_do_destruction
   766 601C A9 03			lda #ENEMY_STATE_DESTRUCTION
   767 601E 85 98			sta m_enemy1State
   768
   769 6020 A4 8E			ldy m_enemy1OldPosY
   770 6022 20 BF 5B			jsr EraseEnemy1
   771
   772 6025 A9 07			lda #7
   773 6027 85 47			sta m_soundFlag
   774
   775 6029 AD 84 98			lda TabExplosionAnimOffsetM3		; first value of this table
   776 602C 85 A0			sta m_enemy1OffsetM3
   777 602E AD 88 98			lda TabExplosionAnimOffsetM2		; first value of this table
   778 6031 85 9F			sta m_enemy1OffsetM2
   779 6033 AD 8C 98			lda TabExplosionAnimOffsetM1		; first value of this table
   780 6036 85 9E			sta m_enemy1OffsetM1
   781 					
   782 6038 A9 06			lda #$06
   783 603A 85 A1			sta m_enemy1ColorP3
   784
   785 603C A9 00			lda #0
   786 603E 85 9D			sta m_enemy1SizeP3
   787
   788 6040 A9 00			lda #0
   789 6042 85 9B			sta m_enemy1AnimIndex
   790 6044 AD 90 98			lda TabExplosionAnimFrameTime		; first value of this table
   791 6047 85 9C			sta m_enemy1AnimCounter
   792 					
   793 					; update m_enemy1PosX and m_enemy1PosY ?
   794 					;sta m_enemy1PosX
   795 					;sta m_enemy1PosY
   796 					
   797 6049 A4 8B			ldy m_enemy1PosY
   798 604B 20 E8 5C			jsr DrawExplosion1				; draw first frame of the explosion
   799 					
   800 604E 4C 03 62			jmp VBI_bonus_logic
   801
   802 				;----------------------------------------
   803 				; update enemy moving state
   804 6051			VBI_enemy_state_moving
   805
   806 				; TabEnemyShapeP3	(X, Y+7, Lines:5)
   807 				; TabEnemyShapeM3M2M1 (X+3, Y, Lines:14)
   808
   809 				; erase enemies at old position
   810 6051 A4 8E			ldy m_enemy1OldPosY
   811 6053 20 BF 5B			jsr EraseEnemy1
   812
   813 				;----------------------------------------
   814 				; move enemies
   815 6056 A5 98			lda m_enemy1State
   816 6058 C9 01			cmp #ENEMY_STATE_MOVING
   817 605A F0 03			beq VBI_enemy_moving
   818 605C 4C EE 60			jmp VBI_hovering_timer
   819
   820 605F			VBI_enemy_moving	
   821 605F 24 96			bit m_enemy1DirectionsFlag
   822 6061 10 10			bpl VBI_enemy_move_left
   823 					
   824 6063 18				clc
   825 6064 A5 8A			lda m_enemy1PosX_L1
   826 6066 65 92			adc m_enemy1StepX_L1
   827 6068 85 8A			sta m_enemy1PosX_L1
   828 606A A5 89			lda m_enemy1PosX
   829 606C 65 90			adc m_enemy1StepX
   830 606E 85 89			sta m_enemy1PosX
   831
   832 6070 4C 80 60			jmp VBI_enemy_check_move_down
   833
   834 6073			VBI_enemy_move_left
   835 6073 38				sec
   836 6074 A5 8A			lda m_enemy1PosX_L1
   837 6076 E5 92			sbc m_enemy1StepX_L1
   838 6078 85 8A			sta m_enemy1PosX_L1
   839 607A A5 89			lda m_enemy1PosX
   840 607C E5 90			sbc m_enemy1StepX
   841 607E 85 89			sta m_enemy1PosX
   842
   843 6080			VBI_enemy_check_move_down
   844 6080 24 96			bit m_enemy1DirectionsFlag
   845 6082 50 10			bvc VBI_enemy_move_up
   846 					
   847 6084 18				clc
   848 6085 A5 8D			lda m_enemy1BasePosY_L1
   849 6087 65 93			adc m_enemy1StepY_L1
   850 6089 85 8D			sta m_enemy1BasePosY_L1
   851 608B A5 8C			lda m_enemy1BasePosY
   852 608D 65 91			adc m_enemy1StepY
   853 608F 85 8C			sta m_enemy1BasePosY
   854
   855 6091 4C A1 60			jmp VBI_enemy_check_limits
   856 					
   857 6094			VBI_enemy_move_up
   858 6094 38				sec
   859 6095 A5 8D			lda m_enemy1BasePosY_L1
   860 6097 E5 93			sbc m_enemy1StepY_L1
   861 6099 85 8D			sta m_enemy1BasePosY_L1
   862 609B A5 8C			lda m_enemy1BasePosY
   863 609D E5 91			sbc m_enemy1StepY
   864 609F 85 8C			sta m_enemy1BasePosY
   865
   866 				;----------------------------------------
   867 				; check screen limits to start the slowdown
   868 60A1			VBI_enemy_check_limits
   869 60A1 24 96			bit m_enemy1DirectionsFlag
   870 60A3 10 08			bpl VBI_enemy_check_limit_left
   871
   872 60A5 A5 89			lda m_enemy1PosX
   873 60A7 C5 94			cmp m_enemy1LimitX
   874 60A9 B0 1C			bcs VBI_enemy_over_limit
   875 60AB 90 06			bcc VBI_enemy_check_limit_down
   876 					
   877 60AD			VBI_enemy_check_limit_left
   878 60AD A5 89			lda m_enemy1PosX
   879 60AF C5 94			cmp m_enemy1LimitX
   880 60B1 90 14			bcc VBI_enemy_over_limit
   881
   882 60B3			VBI_enemy_check_limit_down
   883 60B3 24 96			bit m_enemy1DirectionsFlag
   884 60B5 50 08			bvc VBI_enemy_check_limit_up
   885 					
   886 60B7 A5 8C			lda m_enemy1BasePosY
   887 60B9 C5 95			cmp m_enemy1LimitY
   888 60BB B0 0A			bcs VBI_enemy_over_limit
   889 60BD 90 2C			bcc VBI_enemy_no_move_limit
   890
   891 60BF			VBI_enemy_check_limit_up	
   892 60BF A5 8C			lda m_enemy1BasePosY
   893 60C1 C5 95			cmp m_enemy1LimitY
   894 60C3 90 02			bcc VBI_enemy_over_limit
   895 60C5 B0 24			bcs VBI_enemy_no_move_limit
   896
   897 				; slowdown speed in both steps
   898 60C7			VBI_enemy_over_limit
   899 60C7 46 90			lsr m_enemy1StepX
   900 60C9 66 92			ror m_enemy1StepX_L1
   901 60CB 46 91			lsr m_enemy1StepY
   902 60CD 66 93			ror m_enemy1StepY_L1
   903
   904 				; check if one of direction steps are zero	
   905 60CF A5 92			lda m_enemy1StepX_L1
   906 60D1 05 90			ora m_enemy1StepX
   907 60D3 F0 06			beq VBI_enemy_move_limit
   908 					
   909 60D5 A5 93			lda m_enemy1StepY_L1
   910 60D7 05 91			ora m_enemy1StepY
   911 60D9 D0 10			bne VBI_enemy_no_move_limit
   912
   913 				; one of them is zero, change to hovering
   914 60DB			VBI_enemy_move_limit
   915 60DB A9 02			lda #ENEMY_STATE_HOVERING
   916 60DD 85 98			sta m_enemy1State
   917
   918 60DF A6 97			ldx m_enemy1Type
   919 60E1 BD 47 97			lda TabEnemyHoverTime_LSB,x
   920 60E4 85 99			sta m_enemy1StateTimer
   921 60E6 BD 4A 97			lda TabEnemyHoverTime_MSB,x
   922 60E9 85 9A			sta m_enemy1StateTimer+1
   923 					
   924 60EB			VBI_enemy_no_move_limit
   925 60EB 4C D4 61			jmp VBI_enemy_draw
   926
   927 				;----------------------------------------
   928 				; update hovering timer
   929 60EE			VBI_hovering_timer	
   930 60EE A5 99			lda m_enemy1StateTimer		; update state timer
   931 60F0 D0 02			bne VBI_enemy_ht
   932 60F2 C6 9A			dec m_enemy1StateTimer+1
   933 60F4			VBI_enemy_ht
   934 60F4 C6 99			dec m_enemy1StateTimer
   935 60F6 A5 99			lda m_enemy1StateTimer
   936 60F8 05 9A			ora m_enemy1StateTimer+1
   937 60FA F0 03			beq VBI_enemy_change_to_move
   938 60FC 4C D4 61			jmp VBI_enemy_draw
   939
   940 				;----------------------------------------
   941 				; change to moving state in a new direction (init directions, steps and limits.. use other direction if passed a hard limit)
   942 60FF			VBI_enemy_change_to_move
   943
   944 				; use total deltaX and deltaY for next move (acording to enemy type)
   945 60FF A4 97			ldy m_enemy1Type
   946
   947 				; for the movement in X the red enemy try to follow the player and the green enemy try to move away from the player
   948
   949 6101			VBI_enemy_set_directionX
   950 6101 C0 01			cpy #ENEMY_TYPE_BLUE
   951 6103 F0 25			beq VBI_enemy_blue_directionX
   952
   953 6105 AD 0A D2			lda RANDOM
   954 6108 C9 40			cmp #64
   955 610A 90 1E			bcc VBI_enemy_blue_directionX		; 25% of the time, red and green behavior is equal to blue (to add a little randomness also)
   956
   957 610C A5 08			lda pad_xpos				; init m_padMiddlePosPM
   958 610E 18				clc
   959 610F 65 80			adc m_padHalfSizeX
   960 6111 69 4C			adc #PM_OFFSET_X
   961 6113 85 82			sta m_padMiddlePosPM
   962 					
   963 6115 A5 89			lda m_enemy1PosX
   964 6117 18				clc
   965 6118 69 06			adc #6					; center X position of the normal enemy sprite
   966 					
   967 611A C0 00			cpy #ENEMY_TYPE_RED
   968 611C F0 06			beq VBI_enemy_red_directionX
   969
   970 611E			VBI_enemy_green_directionX
   971 611E C5 82			cmp m_padMiddlePosPM		; compare center X positions of pad and enemy
   972 6120 B0 0D			bcs VBI_enemy_try_go_right
   973 6122 90 20			bcc VBI_enemy_try_go_left
   974
   975 6124			VBI_enemy_red_directionX
   976 6124 C5 82			cmp m_padMiddlePosPM		; compare center X positions of pad and enemy
   977 6126 B0 1C			bcs VBI_enemy_try_go_left
   978 6128 90 05			bcc VBI_enemy_try_go_right
   979
   980 612A			VBI_enemy_blue_directionX
   981 612A AD 0A D2			lda RANDOM
   982 612D 30 15			bmi VBI_enemy_try_go_left
   983
   984
   985 612F			VBI_enemy_try_go_right
   986 612F A5 89			lda m_enemy1PosX
   987 6131 18				clc
   988 6132 79 4D 97			adc TabEnemyDeltaMoveX,y
   989 6135 B0 2B			bcs VBI_enemy_set_go_left
   990 6137 C9 A6			cmp #ENEMY_LIMIT_RIGHT
   991 6139 B0 27			bcs VBI_enemy_set_go_left
   992 613B			VBI_enemy_go_right
   993 613B 85 94			sta m_enemy1LimitX
   994
   995 613D A9 80			lda #128		; go right bit on
   996 613F 85 96			sta m_enemy1DirectionsFlag
   997
   998 6141 4C 6B 61			jmp VBI_enemy_set_directionY
   999
  1000 6144			VBI_enemy_try_go_left
  1001 6144 A5 89			lda m_enemy1PosX
  1002 6146 38				sec
  1003 6147 F9 4D 97			sbc TabEnemyDeltaMoveX,y
  1004 614A 90 0D			bcc VBI_enemy_set_go_right
  1005 614C C9 4E			cmp #ENEMY_LIMIT_LEFT
  1006 614E 90 09			bcc VBI_enemy_set_go_right
  1007 6150			VBI_enemy_go_left
  1008 6150 85 94			sta m_enemy1LimitX
  1009
  1010 6152 A9 00			lda #0		; go right bit off
  1011 6154 85 96			sta m_enemy1DirectionsFlag
  1012
  1013 6156 4C 6B 61			jmp VBI_enemy_set_directionY
  1014
  1015 6159			VBI_enemy_set_go_right
  1016 6159 A5 89			lda m_enemy1PosX
  1017 615B 18				clc
  1018 615C 79 4D 97			adc TabEnemyDeltaMoveX,y
  1019 615F 4C 3B 61			jmp VBI_enemy_go_right
  1020
  1021 6162			VBI_enemy_set_go_left
  1022 6162 A5 89			lda m_enemy1PosX
  1023 6164 38				sec
  1024 6165 F9 4D 97			sbc TabEnemyDeltaMoveX,y
  1025 6168 4C 50 61			jmp VBI_enemy_go_left
  1026
  1027 				;----------------------------------------
  1028 616B			VBI_enemy_set_directionY
  1029 616B AD 0A D2			lda RANDOM
  1030 616E 30 18			bmi VBI_enemy_try_go_up
  1031 					
  1032 6170 A5 8C			lda m_enemy1BasePosY
  1033 6172 18				clc
  1034 6173 79 50 97			adc TabEnemyDeltaMoveY,y
  1035 6176 B0 31			bcs VBI_enemy_set_go_up
  1036 6178 D9 44 97			cmp TabEnemyBottomLimit,y
  1037 617B B0 2C			bcs VBI_enemy_set_go_up
  1038 617D			VBI_enemy_go_down
  1039 617D 85 95			sta m_enemy1LimitY
  1040
  1041 617F A5 96			lda m_enemy1DirectionsFlag
  1042 6181 09 40			ora #%01000000		; go down bit on
  1043 6183 85 96			sta m_enemy1DirectionsFlag
  1044
  1045 6185 4C B2 61			jmp VBI_enemy_set_steps
  1046
  1047 6188			VBI_enemy_try_go_up
  1048 6188 A5 8C			lda m_enemy1BasePosY
  1049 618A 38				sec
  1050 618B F9 50 97			sbc TabEnemyDeltaMoveY,y
  1051 618E 90 10			bcc VBI_enemy_set_go_down
  1052 6190 D9 41 97			cmp TabEnemyTopLimit,y		;#ENEMY_LIMIT_TOP
  1053 6193 90 0B			bcc VBI_enemy_set_go_down
  1054 6195			VBI_enemy_go_up
  1055 6195 85 95			sta m_enemy1LimitY
  1056
  1057 6197 A5 96			lda m_enemy1DirectionsFlag
  1058 6199 29 BF			and #%10111111		; go down bit off
  1059 619B 85 96			sta m_enemy1DirectionsFlag
  1060
  1061 619D 4C B2 61			jmp VBI_enemy_set_steps
  1062
  1063 61A0			VBI_enemy_set_go_down
  1064 61A0 A5 8C			lda m_enemy1BasePosY
  1065 61A2 18				clc
  1066 61A3 79 50 97			adc TabEnemyDeltaMoveY,y
  1067 61A6 4C 7D 61			jmp VBI_enemy_go_down
  1068
  1069 61A9			VBI_enemy_set_go_up
  1070 61A9 A5 8C			lda m_enemy1BasePosY
  1071 61AB 38				sec
  1072 61AC F9 50 97			sbc TabEnemyDeltaMoveY,y
  1073 61AF 4C 95 61			jmp VBI_enemy_go_up
  1074
  1075 				;----------------------------------------
  1076 61B2			VBI_enemy_set_steps
  1077 61B2 AD 0A D2			lda RANDOM
  1078 					;and #%1111
  1079 61B5 29 03			and #%11
  1080 61B7 AA				tax
  1081 					;lda TabRandomEnemyDirection,x		; transform a number in [0, 15] to a number in [0, 4] (2 has a little higher probability)
  1082 					;tax
  1083
  1084 				; use the pad angles and steps to set the direction steps of the enemy	
  1085 61B8 BD 56 93			lda tab_pad_xstep1,x
  1086 61BB 85 92			sta m_enemy1StepX_L1
  1087 61BD BD 60 93			lda tab_pad_ystep1,x
  1088 61C0 85 93			sta m_enemy1StepY_L1
  1089
  1090 61C2 A9 00			lda #0				; not using the higher values for now (could delete them)
  1091 61C4 85 90			sta m_enemy1StepX
  1092 61C6 85 91			sta m_enemy1StepY
  1093
  1094 61C8 06 92			asl m_enemy1StepX_L1
  1095 61CA 26 90			rol m_enemy1StepX
  1096 61CC 06 93			asl m_enemy1StepY_L1
  1097 61CE 26 91			rol m_enemy1StepY
  1098
  1099 61D0 A9 01			lda #ENEMY_STATE_MOVING
  1100 61D2 85 98			sta m_enemy1State
  1101 					
  1102 				;----------------------------------------
  1103 				; draw enemies at new position
  1104 61D4			VBI_enemy_draw
  1105 61D4 A4 8F			ldy m_enemy1SineIndex
  1106 61D6 C8				iny
  1107 61D7 C0 55			cpy #ENEMY1_SINE_TAB_SIZE
  1108 61D9 D0 02			bne VBI_enemy_update_sine
  1109 61DB A0 00			ldy #0
  1110 61DD			VBI_enemy_update_sine	
  1111 61DD 84 8F			sty m_enemy1SineIndex
  1112 					
  1113 61DF A5 8C			lda m_enemy1BasePosY
  1114 61E1 18				clc
  1115 61E2 79 A4 98			adc TabEnemySineY,y
  1116 61E5 85 8B			sta m_enemy1PosY
  1117 					
  1118 61E7 A8				tay
  1119 61E8 20 FB 5B			jsr DrawEnemy1
  1120
  1121 61EB A5 8B			lda m_enemy1PosY
  1122 61ED 85 8E			sta m_enemy1OldPosY
  1123
  1124 				;----------------------------------------
  1125 				; update enemy animation
  1126 61EF C6 9C			dec m_enemy1AnimCounter
  1127 61F1 D0 10			bne VBI_bonus_logic
  1128 					
  1129 61F3 A4 9B			ldy m_enemy1AnimIndex
  1130 61F5 C8				iny
  1131 61F6 C0 0B			cpy #ENEMY1_ANIM1_FRAMES
  1132 61F8 D0 02			bne VBI_enemy_reset_anim
  1133 61FA A0 00			ldy #0
  1134 61FC			VBI_enemy_reset_anim	
  1135 61FC 84 9B			sty m_enemy1AnimIndex
  1136 					
  1137 61FE B9 B3 97			lda TabEnemyAnimFrameTime,y
  1138 6201 85 9C			sta m_enemy1AnimCounter
  1139
  1140 				.endif
  1141
  1142
  1143 				;================================================================================
  1144 				; update falling bonus logic
  1145 				;================================================================================
  1146 6203			VBI_bonus_logic
  1147 6203 A5 59			lda bonus_flag
  1148 6205 D0 03			bne bvb
  1149 6207 4C 04 63			jmp VBI_exit_bonus_logic
  1150
  1151
  1152 620A 10 26		bvb	bpl bv2
  1153
  1154 				; do this init of the bonus only one time, just after the creation
  1155 				; of the bonus powerup, when bonus_flag is 128
  1156 620C A9 01			lda #1
  1157 620E 85 59			sta bonus_flag
  1158 6210 A5 61			lda bonus_color
  1159 6212 8D 13 D0			sta COLPM1
  1160 6215 A5 5A			lda bonus_xpos
  1161 6217 18				clc
  1162 6218 69 4C			adc #PM_OFFSET_X
  1163 621A 8D 01 D0			sta HPOSP1
  1164 621D 69 02			adc #2		; offset between P1 and M0
  1165 621F 8D 04 D0			sta HPOSM0
  1166
  1167 6222 A4 35			ldy old_ball_rypos
  1168 6224 A9 00			lda #0
  1169 6226 A2 06			ldx #BALL_SIZEY
  1170 6228 99 1C A5		bv1	sta p1_adr+PM_OFFSET_Y,y
  1171 622B C8				iny
  1172 622C CA				dex
  1173 622D D0 F9			bne bv1
  1174
  1175 622F 4C 8D 62			jmp bv5
  1176
  1177
  1178 				;-------------------------------
  1179 				; check collision between bonus and pad, using the hardware register
  1180 6232 A6 5B		bv2	ldx bonus_ypos
  1181 6234 E0 C1			cpx #PAD_POSY1-BONUS_SIZEY+1
  1182 6236 90 13			bcc bv3
  1183
  1184 6238 AD 0D D0			lda P1PL		; p1 & ...
  1185 623B 29 08			and #8		; ... p3 ?
  1186 623D F0 0C			beq bv3
  1187
  1188 623F 20 C0 59			jsr ClearBonus
  1189
  1190 6242 A5 62			lda m_bonusType
  1191 6244 09 80			ora #128
  1192 6246 85 62			sta m_bonusType
  1193
  1194 6248 4C 04 63			jmp VBI_exit_bonus_logic
  1195
  1196
  1197 				; clear old bonus first two lines (assuming the speed is below two lines per frame)
  1198 624B A9 00		bv3	lda #0
  1199 624D 9D 1C A5			sta p1_adr+PM_OFFSET_Y,x
  1200 6250 9D 1D A5			sta p1_adr+PM_OFFSET_Y+1,x
  1201 6253 BD 1C A3			lda m0_adr+PM_OFFSET_Y,x
  1202 6256 29 FC			and #%11111100
  1203 6258 9D 1C A3			sta m0_adr+PM_OFFSET_Y,x
  1204 625B BD 1D A3			lda m0_adr+PM_OFFSET_Y+1,x
  1205 625E 29 FC			and #%11111100
  1206 6260 9D 1D A3			sta m0_adr+PM_OFFSET_Y+1,x
  1207
  1208
  1209 				; bonus falling speed
  1210 6263 A5 5C			lda bonus_ypos_decimal
  1211 6265 18				clc
  1212 6266 69 6D			adc #BONUS_FALL_SPEED_LSB
  1213 6268 85 5C			sta bonus_ypos_decimal
  1214 626A 8A				txa
  1215 626B 69 01			adc #BONUS_FALL_SPEED_MSB
  1216
  1217 626D C9 CC			cmp #MAX_BONUS_POSY
  1218 626F 90 0A			bcc bv4
  1219
  1220 				; bonus reached the bottom of the screen, clear it
  1221 6271 20 C0 59			jsr ClearBonus
  1222
  1223 6274 A9 00			lda #0
  1224 6276 85 62			sta m_bonusType
  1225 6278 4C 04 63			jmp VBI_exit_bonus_logic
  1226
  1227
  1228 627B 85 5B		bv4	sta bonus_ypos
  1229
  1230 627D C6 5E			dec bonus_sh_ctd
  1231 627F D0 0C			bne bv5
  1232 6281 A9 03			lda #BONUS_ANIM_SPEED
  1233 6283 85 5E			sta bonus_sh_ctd
  1234 6285 C6 5D			dec bonus_sh_line
  1235 6287 10 04			bpl bv5
  1236 6289 A9 0F			lda #BONUS_SIZEY+8-1
  1237 628B 85 5D			sta bonus_sh_line
  1238
  1239 628D A6 5B		bv5	ldx bonus_ypos
  1240 628F A4 5D			ldy bonus_sh_line
  1241
  1242 				; draw bonus, over P1 and M0
  1243 6291 B1 5F			lda (ptr_bonus_sh),y
  1244 6293 29 7E			and #%01111110					; clear first and last pixels
  1245 6295 9D 1C A5			sta p1_adr+PM_OFFSET_Y,x
  1246 6298 BD 1C A3			lda m0_adr+PM_OFFSET_Y,x
  1247 629B 09 03			ora #%11      ; m0
  1248 629D 9D 1C A3			sta m0_adr+PM_OFFSET_Y,x
  1249
  1250 					.rept 6
  1251 					INY
  1252 					LDA (PTR_BONUS_SH),Y
  1253 					STA P1_ADR+PM_OFFSET_Y+#+1,X
  1254 					LDA M0_ADR+PM_OFFSET_Y+#+1,X
  1255 					ORA #%11      
  1256 					STA M0_ADR+PM_OFFSET_Y+#+1,X
  1257 					.endr
Source: REPT
  1251 62A0 C8				INY
  1251 62A1 B1 5F			LDA (PTR_BONUS_SH),Y
  1251 62A3 9D 1D A5			STA P1_ADR+PM_OFFSET_Y+#+1,X
  1251 62A6 BD 1D A3			LDA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62A9 09 03			ORA #%11      
  1251 62AB 9D 1D A3			STA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62AE C8				INY
  1251 62AF B1 5F			LDA (PTR_BONUS_SH),Y
  1251 62B1 9D 1E A5			STA P1_ADR+PM_OFFSET_Y+#+1,X
  1251 62B4 BD 1E A3			LDA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62B7 09 03			ORA #%11      
  1251 62B9 9D 1E A3			STA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62BC C8				INY
  1251 62BD B1 5F			LDA (PTR_BONUS_SH),Y
  1251 62BF 9D 1F A5			STA P1_ADR+PM_OFFSET_Y+#+1,X
  1251 62C2 BD 1F A3			LDA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62C5 09 03			ORA #%11      
  1251 62C7 9D 1F A3			STA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62CA C8				INY
  1251 62CB B1 5F			LDA (PTR_BONUS_SH),Y
  1251 62CD 9D 20 A5			STA P1_ADR+PM_OFFSET_Y+#+1,X
  1251 62D0 BD 20 A3			LDA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62D3 09 03			ORA #%11      
  1251 62D5 9D 20 A3			STA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62D8 C8				INY
  1251 62D9 B1 5F			LDA (PTR_BONUS_SH),Y
  1251 62DB 9D 21 A5			STA P1_ADR+PM_OFFSET_Y+#+1,X
  1251 62DE BD 21 A3			LDA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62E1 09 03			ORA #%11      
  1251 62E3 9D 21 A3			STA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62E6 C8				INY
  1251 62E7 B1 5F			LDA (PTR_BONUS_SH),Y
  1251 62E9 9D 22 A5			STA P1_ADR+PM_OFFSET_Y+#+1,X
  1251 62EC BD 22 A3			LDA M0_ADR+PM_OFFSET_Y+#+1,X
  1251 62EF 09 03			ORA #%11      
  1251 62F1 9D 22 A3			STA M0_ADR+PM_OFFSET_Y+#+1,X
Source: D:\!Delphi\mads\examples\games\pad\pad_vbi.asm
  1258
  1259 62F4 C8				iny
  1260 62F5 B1 5F			lda (ptr_bonus_sh),y
  1261 62F7 29 7E			and #%01111110					; clear first and last pixels
  1262 62F9 9D 23 A5			sta p1_adr+PM_OFFSET_Y+7,x
  1263 62FC BD 23 A3			lda m0_adr+PM_OFFSET_Y+7,x
  1264 62FF 09 03			ora #%11      ; m0
  1265 6301 9D 23 A3			sta m0_adr+PM_OFFSET_Y+7,x
  1266
  1267
  1268 				;-------------------------------
  1269 6304			VBI_exit_bonus_logic
  1270 6304 A9 FF			lda #255
  1271 6306 8D 1E D0			sta HITCLR
  1272
  1273
  1274 				;-------------------------------
  1275 				; update old ball real pos
  1276 6309 A5 32			lda ball_rypos		; multiball code change
  1277 630B 85 35			sta old_ball_rypos	; multiball code change
  1278
  1279 630D A5 33			lda ball_rypos+1
  1280 630F 85 36			sta old_ball_rypos+1
  1281 6311 A5 34			lda ball_rypos+2
  1282 6313 85 37			sta old_ball_rypos+2
  1283
  1284
  1285 				;================================================================================
  1286 				; update sound effects logic
  1287 				;================================================================================
  1288 6315			VBI_sound_logic
  1289 6315 A6 47			ldx m_soundFlag
  1290 6317 F0 6D			beq VBI_old_sound
  1291
  1292 				; check new sound priority against the one of the old sound (if there was no sound, old priority would be 0)
  1293 6319 BD 2C 95			lda TabSoundPriority-1,x
  1294 631C C5 4A			cmp m_soundPriority		; old sound priority, if there was one
  1295 631E 90 66			bcc VBI_old_sound		; new sound has lower priority
  1296 6320 D0 0F			bne VBI_sound_higher_priority		; new sound has higher priority, just override
  1297 					
  1298 				; don't allow new sounds (of the same priority) before completing at least 3 steps of the old sound
  1299 6322 A5 49			lda m_soundIndex
  1300 6324 F0 0D			beq VBI_new_sound		; sound index 0 should mean there was no sound playing (with the priority check this should not be needed)
  1301 6326 C9 03			cmp #3
  1302 6328 B0 09			bcs VBI_new_sound
  1303
  1304 632A A9 00			lda #0			; don't buffer the new sound request (is just lost)
  1305 632C 85 47			sta m_soundFlag
  1306 632E 4C 86 63			jmp VBI_old_sound
  1307
  1308
  1309 6331			VBI_sound_higher_priority
  1310 6331 85 4A			sta m_soundPriority
  1311 					
  1312 6333			VBI_new_sound
  1313 6333 CA				dex		; sound flag values start from 1
  1314
  1315 6334 BD 1B 95			lda tab_snd_len,x
  1316 6337 85 48			sta m_soundSize
  1317 6339 A9 00			lda #0
  1318 633B 85 49			sta m_soundIndex
  1319
  1320 				; init the 4 hard coded pointers
  1321 633D BD 09 95			lda tab_lsb_snd,x
  1322 6340 8D 8D 63			sta VBI_pointerSound_F1+1
  1323 6343 BD 12 95			lda tab_msb_snd,x
  1324 6346 8D 8E 63			sta VBI_pointerSound_F1+2
  1325
  1326 6349 AD 8D 63			lda VBI_pointerSound_F1+1
  1327 634C 18				clc
  1328 634D 65 48			adc m_soundSize
  1329 634F 8D 93 63			sta VBI_pointerSound_C1+1
  1330 6352 AD 8E 63			lda VBI_pointerSound_F1+2
  1331 6355 69 00			adc #0
  1332 6357 8D 94 63			sta VBI_pointerSound_C1+2
  1333
  1334 635A AD 93 63			lda VBI_pointerSound_C1+1
  1335 635D 18				clc
  1336 635E 65 48			adc m_soundSize
  1337 6360 8D 99 63			sta VBI_pointerSound_F3+1
  1338 6363 AD 94 63			lda VBI_pointerSound_C1+2
  1339 6366 69 00			adc #0
  1340 6368 8D 9A 63			sta VBI_pointerSound_F3+2
  1341
  1342 636B AD 99 63			lda VBI_pointerSound_F3+1
  1343 636E 18				clc
  1344 636F 65 48			adc m_soundSize
  1345 6371 8D 9F 63			sta VBI_pointerSound_C3+1
  1346 6374 AD 9A 63			lda VBI_pointerSound_F3+2
  1347 6377 69 00			adc #0
  1348 6379 8D A0 63			sta VBI_pointerSound_C3+2
  1349
  1350 637C BD 24 95			lda tab_snd_ctl,x
  1351 637F 8D 08 D2			sta AUDCTL
  1352
  1353 6382 A9 00			lda #0
  1354 6384 85 47			sta m_soundFlag
  1355
  1356
  1357 6386			VBI_old_sound
  1358 6386 A5 48			lda m_soundSize
  1359 6388 F0 27			beq VBI_exit
  1360
  1361 638A A4 49			ldy m_soundIndex
  1362
  1363 638C			VBI_pointerSound_F1
  1364 638C B9 FF FF			lda $FFFF,y
  1365 638F 8D 00 D2			sta AUDF1
  1366
  1367 6392			VBI_pointerSound_C1
  1368 6392 B9 FF FF			lda $FFFF,y
  1369 6395 8D 01 D2			sta AUDC1
  1370
  1371 6398			VBI_pointerSound_F3
  1372 6398 B9 FF FF			lda $FFFF,y
  1373 639B 8D 04 D2			sta AUDF3
  1374
  1375 639E			VBI_pointerSound_C3
  1376 639E B9 FF FF			lda $FFFF,y
  1377 63A1 8D 05 D2			sta AUDC3
  1378
  1379 63A4 C8				iny
  1380 63A5 C4 48			cpy m_soundSize
  1381 63A7 D0 06			bne VBI_update_sound_index
  1382
  1383 				; clear sound info
  1384 63A9 A0 00			ldy #0
  1385 63AB 84 48			sty m_soundSize
  1386 63AD 84 4A			sty m_soundPriority
  1387
  1388 63AF			VBI_update_sound_index
  1389 63AF 84 49			sty m_soundIndex
  1390
  1391
  1392 				;================================================================================
  1393 63B1			VBI_exit
  1394
  1395 				.if .def USE_ENEMY_CODE
  1396 				; do enemy late update, this is for the pause and also because P3 is also used for the paddle
  1397 63B1 A5 89			lda m_enemy1PosX
  1398 63B3 8D 03 D0			sta HPOSP3
  1399
  1400 63B6 18				clc
  1401 63B7 65 A0			adc m_enemy1OffsetM3
  1402 63B9 8D 07 D0			sta HPOSM3
  1403 63BC 65 9F			adc m_enemy1OffsetM2
  1404 63BE 8D 06 D0			sta HPOSM2
  1405 63C1 65 9E			adc m_enemy1OffsetM1
  1406 63C3 8D 05 D0			sta HPOSM1
  1407
  1408 				; hack to set the enemy color
  1409 63C6 A5 A1			lda m_enemy1ColorP3
  1410 63C8 8D 15 D0			sta COLPM3
  1411
  1412 				; also need to change the size for P3
  1413 63CB A5 9D			lda m_enemy1SizeP3
  1414 63CD 8D 0B D0			sta SIZEP3
  1415 				.endif
  1416
  1417
  1418 					.if .def SHOW_TIMING_AREAS
  1419 					lda m_mainAreaColor
  1420 					sta COLBK
  1421 					.endif
  1422
  1423 63D0 8D 0B D2			sta POTGO			; reset all POT counters
  1424
  1425 					;jmp XITVB_D		; this is no longer a VBI..
  1426 					;rts
  1427
  1428 63D3 A5 00			lda save_a
  1429 63D5 A6 01			ldx save_x
  1430 63D7 A4 02			ldy save_y
  1431
  1432 63D9 40				rti
  1433
  3302
  3303
  3304 				;================================================================================
  3305
  3306 63DA				icl "pad_dli.asm"
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
     1
     2 				; using a RMT song with 4 updates per frame in PAL
     3 				; NTSC: 262 scan lines (0-130 vcount) /4 = 65.5 (needs 197 scan lines app.)
     4 				; PAL: 312 scan lines (0-155 vcount) /4 = 78 (needs 235 scan lines)
     5 				; normal G0 screen: 24 + 24*8 = 216 scan lines
     6 				; PAL --> 200 updates per second
     7 				; would be better to do it counting vcount lines and waitin in the main loop
     8 				; NTSC: 33 vcount lines app. ; PAL: 39 vcount lines
     9
    10 63DA			Tittle_score_DLI1_address
    11 63DA 85 00			sta save_a
    12 63DC 86 01			stx save_x
    13 63DE 84 02			sty save_y
    14
    15 				.if .def PAL_VERSION
    16 63E0 A9 10			lda #$10
    17 				.else
    18 					lda #$20
    19 				.endif
    20 63E2 8D 12 D0			sta COLPM0
    21 63E5 8D 13 D0			sta COLPM1
    22
    23 63E8 A9 54			lda #128-44
    24 63EA A2 6C			ldx #128-20
    25 63EC A0 80			ldy #128
    26 63EE 8D 0A D4			sta WSYNC
    27
    28 63F1 8D 00 D0			sta HPOSP0
    29 63F4 8E 01 D0			stx HPOSP1
    30 63F7 8C 02 D0			sty HPOSP2
    31 63FA A9 9C			lda #128+28
    32 63FC 8D 03 D0			sta HPOSP3
    33 63FF 8D 04 D0			sta HPOSM0
    34 6402 A9 AC			lda #128+44
    35 6404 8D 05 D0			sta HPOSM1
    36
    37 6407 A9 E0			lda #%11100000
    38 6409 A2 F0			ldx #%11110000
    39 640B A0 F8			ldy #%11111000
    40 640D 8D 0A D4			sta WSYNC
    41 6410 8D 0D D0			sta GRAFP0
    42 6413 8E 0E D0			stx GRAFP1
    43 6416 8C 0F D0			sty GRAFP2
    44 6419 A9 70			lda #%01110000
    45 641B 8D 10 D0			sta GRAFP3
    46 641E A9 0F			lda #%00001111
    47 6420 8D 11 D0			sta GRAFM
    48
    49
    50 6423 8D 0A D4 8D 0A D4 + 	:5 sta WSYNC
    51
    52 6432 A9 F8			lda #%11111000
    53 6434 8D 10 D0			sta GRAFP3
    54
    55 6437 A9 00			lda #0
    56 6439 8D 0A D4			sta WSYNC
    57
    58 643C 8D 0D D0			sta GRAFP0
    59 643F 8D 0E D0			sta GRAFP1
    60 6442 8D 0F D0			sta GRAFP2
    61 6445 8D 10 D0			sta GRAFP3
    62 6448 8D 11 D0			sta GRAFM
    63
    64 644B 8D 00 D0			sta HPOSP0
    65 644E 8D 01 D0			sta HPOSP1
    66 6451 8D 02 D0			sta HPOSP2
    67 6454 8D 03 D0			sta HPOSP3
    68
    69
    70 6457			Tittle_score_DLI1_exit
    71 6457				SetVector NMIH_VECTOR, Tittle_name_DLI1_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 6457 A9 68			      lda #<TITTLE_NAME_DLI1_ADDRESS
     6 6459 8D FA FF			      sta NMIH_VECTOR
     7 645C A9 64			      lda #>TITTLE_NAME_DLI1_ADDRESS
     8 645E 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
    72
    73 6461 A5 00			lda save_a
    74 6463 A6 01			ldx save_x
    75 6465 A4 02			ldy save_y
    76
    77 6467 40				rti
    78
    79
    80 				;-------------------------------
    81 6468			Tittle_name_DLI1_address
    82 6468 85 00			sta save_a
    83 646A 86 01			stx save_x
    84
    85 646C A9 44			lda #128-60
    86 646E A2 88			ldx #128+8
    87 6470 8D 0A D4			sta WSYNC
    88 6473 8D 00 D0			sta HPOSP0
    89 6476 8E 01 D0			stx HPOSP1
    90
    91 				.if .def PAL_VERSION
    92 6479 A9 20			lda #$20
    93 647B A2 90			ldx #$90
    94 				.else
    95 					lda #$30
    96 					ldx #$A0
    97 				.endif
    98 647D 8D 12 D0			sta COLPM0
    99 6480 8E 13 D0			stx COLPM1
   100
   101 6483 A9 E0			lda #%11100000
   102 6485 8D 0A D4			sta WSYNC
   103 6488 8D 0D D0			sta GRAFP0
   104 648B 8D 0E D0			sta GRAFP1
   105
   106 648E 8D 0A D4 8D 0A D4 + 	:5 sta WSYNC
   107
   108 649D A9 00			lda #0
   109 649F 8D 0A D4			sta WSYNC
   110 64A2 8D 0D D0			sta GRAFP0
   111 64A5 8D 0E D0			sta GRAFP1
   112 64A8 8D 00 D0			sta HPOSP0
   113 64AB 8D 01 D0			sta HPOSP1
   114
   115
   116 64AE			Tittle_name_DLI1_exit
   117 64AE				SetVector NMIH_VECTOR, Tittle_music_DLI1_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 64AE A9 BD			      lda #<TITTLE_MUSIC_DLI1_ADDRESS
     6 64B0 8D FA FF			      sta NMIH_VECTOR
     7 64B3 A9 64			      lda #>TITTLE_MUSIC_DLI1_ADDRESS
     8 64B5 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
   118
   119 64B8 A5 00			lda save_a
   120 64BA A6 01			ldx save_x
   121
   122 64BC 40				rti
   123
   124
   125 				;-------------------------------
   126 64BD			Tittle_music_DLI1_address
   127 64BD 85 00			sta save_a
   128
   129 64BF A9 88			lda #128+8
   130 64C1 8D 0A D4			sta WSYNC
   131 64C4 8D 00 D0			sta HPOSP0
   132
   133 				.if .def PAL_VERSION
   134 64C7 A9 90			lda #$90
   135 				.else
   136 					lda #$A0
   137 				.endif
   138 64C9 8D 12 D0			sta COLPM0
   139
   140 64CC A9 F8			lda #%11111000
   141 64CE 8D 0A D4			sta WSYNC
   142 64D1 8D 0D D0			sta GRAFP0
   143
   144 64D4 8D 0A D4 8D 0A D4 + 	:5 sta WSYNC
   145
   146 64E3 A9 00			lda #0
   147 64E5 8D 0A D4			sta WSYNC
   148 64E8 8D 0D D0			sta GRAFP0
   149 64EB 8D 00 D0			sta HPOSP0
   150
   151
   152 64EE			Tittle_music_DLI1_exit
   153 64EE				SetVector NMIH_VECTOR, Tittle_options_DLI1_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 64EE A9 FB			      lda #<TITTLE_OPTIONS_DLI1_ADDRESS
     6 64F0 8D FA FF			      sta NMIH_VECTOR
     7 64F3 A9 64			      lda #>TITTLE_OPTIONS_DLI1_ADDRESS
     8 64F5 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
   154
   155 64F8 A5 00			lda save_a
   156
   157 64FA 40				rti
   158
   159
   160 				;-------------------------------
   161 64FB			Tittle_options_DLI1_address
   162 64FB 85 00			sta save_a
   163
   164 				.if .def PAL_VERSION
   165 64FD A9 A0			lda #$A0
   166 				.else
   167 					lda #$B0
   168 				.endif
   169 64FF 8D 12 D0			sta COLPM0
   170
   171 6502 A9 5C			lda #128-36
   172 6504 8D 00 D0			sta HPOSP0
   173
   174 6507 A9 80			lda #%10000000
   175 6509 8D 0A D4			sta WSYNC
   176 650C 8D 0D D0			sta GRAFP0
   177
   178
   179 650F			Tittle_options_DLI1_exit
   180 650F				SetVector NMIH_VECTOR, Tittle_options_DLI2_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 650F A9 1C			      lda #<TITTLE_OPTIONS_DLI2_ADDRESS
     6 6511 8D FA FF			      sta NMIH_VECTOR
     7 6514 A9 65			      lda #>TITTLE_OPTIONS_DLI2_ADDRESS
     8 6516 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
   181
   182 6519 A5 00			lda save_a
   183
   184 651B 40				rti
   185
   186
   187 				;-------------------------------
   188 651C			Tittle_options_DLI2_address
   189 651C 85 00			sta save_a
   190
   191 651E A9 00			lda #0
   192 6520 8D 0A D4			sta WSYNC
   193 6523 8D 12 D0			sta COLPM0
   194
   195 6526 8D 0A D4 8D 0A D4 + 	:3 sta WSYNC
   196
   197 				.if .def PAL_VERSION
   198 652F A9 B0			lda #$B0
   199 				.else
   200 					lda #$C0
   201 				.endif
   202 6531 8D 0A D4			sta WSYNC
   203 6534 8D 12 D0			sta COLPM0
   204
   205
   206 6537			Tittle_options_DLI2_exit
   207 6537				SetVector NMIH_VECTOR, Tittle_options_DLI3_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 6537 A9 44			      lda #<TITTLE_OPTIONS_DLI3_ADDRESS
     6 6539 8D FA FF			      sta NMIH_VECTOR
     7 653C A9 65			      lda #>TITTLE_OPTIONS_DLI3_ADDRESS
     8 653E 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
   208
   209 6541 A5 00			lda save_a
   210
   211 6543 40				rti
   212
   213
   214 				;-------------------------------
   215 6544			Tittle_options_DLI3_address
   216 6544 85 00			sta save_a
   217
   218 6546 A9 00			lda #0
   219 6548 8D 0A D4			sta WSYNC
   220 654B 8D 12 D0			sta COLPM0
   221
   222 654E 8D 0A D4 8D 0A D4 + 	:3 sta WSYNC
   223
   224 				.if .def PAL_VERSION
   225 6557 A9 B0			lda #$B0
   226 				.else
   227 					lda #$C0
   228 				.endif
   229 6559 8D 0A D4			sta WSYNC
   230 655C 8D 12 D0			sta COLPM0
   231
   232
   233 655F			Tittle_options_DLI3_exit
   234 655F				SetVector NMIH_VECTOR, Tittle_options_DLI4_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 655F A9 6C			      lda #<TITTLE_OPTIONS_DLI4_ADDRESS
     6 6561 8D FA FF			      sta NMIH_VECTOR
     7 6564 A9 65			      lda #>TITTLE_OPTIONS_DLI4_ADDRESS
     8 6566 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
   235
   236 6569 A5 00			lda save_a
   237
   238 656B 40				rti
   239
   240
   241 				;-------------------------------
   242 656C			Tittle_options_DLI4_address
   243 656C 85 00			sta save_a
   244
   245 656E A9 00			lda #0
   246 6570 8D 0A D4			sta WSYNC
   247 6573 8D 12 D0			sta COLPM0
   248
   249 6576 8D 0A D4 8D 0A D4 + 	:3 sta WSYNC
   250
   251 				.if .def PAL_VERSION
   252 657F A9 C0			lda #$C0
   253 				.else
   254 					lda #$D0
   255 				.endif
   256 6581 8D 0A D4			sta WSYNC
   257 6584 8D 12 D0			sta COLPM0
   258
   259
   260 6587			Tittle_options_DLI4_exit
   261 6587				SetVector NMIH_VECTOR, Tittle_options_DLI5_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 6587 A9 94			      lda #<TITTLE_OPTIONS_DLI5_ADDRESS
     6 6589 8D FA FF			      sta NMIH_VECTOR
     7 658C A9 65			      lda #>TITTLE_OPTIONS_DLI5_ADDRESS
     8 658E 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
   262
   263 6591 A5 00			lda save_a
   264
   265 6593 40				rti
   266
   267
   268 				;-------------------------------
   269 6594			Tittle_options_DLI5_address
   270 6594 85 00			sta save_a
   271
   272 6596 A9 00			lda #0
   273 6598 8D 0A D4			sta WSYNC
   274 659B 8D 12 D0			sta COLPM0
   275 659E 8D 00 D0			sta HPOSP0
   276 65A1 8D 0D D0			sta GRAFP0
   277
   278
   279 65A4			Tittle_options_DLI5_exit
   280 65A4				SetVector NMIH_VECTOR, Tittle_score_DLI1_address
Macro: SETVECTOR [Source: D:\!Delphi\mads\examples\games\pad\base\sys_macros.asm]
     5 65A4 A9 DA			      lda #<TITTLE_SCORE_DLI1_ADDRESS
     6 65A6 8D FA FF			      sta NMIH_VECTOR
     7 65A9 A9 63			      lda #>TITTLE_SCORE_DLI1_ADDRESS
     8 65AB 8D FB FF			      sta NMIH_VECTOR+1
Source: D:\!Delphi\mads\examples\games\pad\pad_dli.asm
   281
   282 65AE A5 00			lda save_a
   283
   284 65B0 40				rti
   285
   286
   287 				;================================================================================
   288
   289 				; for NTSC: 25 lines with dli's: (24 read the mouse, 1440Hz)
   290 				; for PAL: 28 lines with dli's: (27 read the mouse, 1350Hz)
   291 				; 20 first lines for colors (COLPF2/1), last line for the pad colors (COLPM3)
   292
   293 65B1			DLI1_address
   294 65B1 85 00			sta save_a
   295 65B3 86 01			stx save_x
   296
   297 65B5 A6 43			ldx dli_index
   298 65B7 BD 6C 69			lda TabDLI_COLPF1,x
   299
   300 65BA 8D 0A D4			sta WSYNC
   301
   302 65BD 8D 17 D0			sta COLPF1
   303 65C0 BD 50 69			lda TabDLI_COLPF2,x
   304 65C3 8D 18 D0			sta COLPF2
   305
   306 					.if .def SHOW_TIMING_AREAS
   307 					lda #$36
   308 					sta COLBK
   309 					.endif
   310
   311 65C6 D8				cld
   312
   313 65C7 E6 43			inc dli_index
   314
   315 65C9 E0 13			cpx #[2+NUM_BRICKS_Y]-1		; 2+ ==> include the top border lines
   316 65CB D0 63			bne dli_readMouse
   317
   318 				; change start address for dli's that only read the mouse
   319 65CD A9 DA			lda #<DLI2_address
   320 65CF 8D FA FF			sta NMIH_VECTOR		;VDSLST
   321 65D2 A9 65			lda #>DLI2_address
   322 65D4 8D FB FF			sta NMIH_VECTOR+1		;VDSLST+1
   323
   324 65D7 4C 30 66			jmp dli_readMouse
   325
   326
   327 				;-------------------------------
   328 65DA			DLI2_address
   329 65DA 85 00			sta save_a
   330 65DC 86 01			stx save_x
   331
   332 					.if .def SHOW_TIMING_AREAS
   333 					lda #$32
   334 					sta COLBK
   335 					.endif
   336
   337 65DE D8				cld
   338
   339 65DF E6 43			inc dli_index
   340
   341 65E1 A5 43			lda dli_index
   342 65E3 C9 1B			cmp #DLI_READ_MOUSE_LINES
   343 65E5 D0 49			bne dli_readMouse
   344
   345
   346 				; save state of the collision register P3PL, to detect the collision between enemies and balls
   347 65E7 AD 0F D0			lda P3PL
   348 65EA 85 BB			sta m_dliP3PL
   349 65EC A9 FF			lda #255
   350 65EE 8D 1E D0			sta HITCLR
   351
   352 				; change start address for the final dli
   353 65F1 A9 FE			lda #<DLI3_address
   354 65F3 8D FA FF			sta NMIH_VECTOR		;VDSLST
   355 65F6 A9 65			lda #>DLI3_address
   356 65F8 8D FB FF			sta NMIH_VECTOR+1		;VDSLST+1
   357
   358 65FB 4C 30 66			jmp dli_readMouse
   359
   360
   361 				;-------------------------------
   362 65FE			DLI3_address
   363 65FE 85 00			sta save_a
   364 6600 86 01			stx save_x
   365
   366 					.if .def SHOW_TIMING_AREAS
   367 					lda #$12
   368 					sta COLBK
   369 					.endif
   370
   371 6602 A5 88			lda m_padHPOSP3
   372 6604 8D 03 D0			sta HPOSP3
   373 6607 A5 83			lda m_padSizeP3
   374 6609 8D 0B D0			sta SIZEP3
   375
   376 660C A2 00			ldx #0
   377 660E			dli_setPadColors
   378 660E BD E6 92			lda TabCurrentPadColor,x
   379
   380 6611 8D 0A D4			sta WSYNC
   381
   382 6614 8D 15 D0			sta COLPM3
   383
   384 6617 E8				inx
   385 6618 E0 06			cpx #PAD_SIZEY
   386 661A D0 F2			bne dli_setPadColors
   387
   388
   389 661C D8				cld
   390
   391
   392 				; change font for the info line
   393 				; 	sta WSYNC
   394 				; 	sta WSYNC
   395 				;
   396 				; 	lda #>Atari_font_address
   397 				; 	sta WSYNC
   398 				; 	sta CHBASE
   399
   400
   401 				; reset dli line index (now that there is no real VBI)
   402 661D A9 00			lda #0
   403 661F 85 43			sta dli_index
   404
   405
   406 				; recover start address for the first dli, after the vbi
   407 6621 A9 B1			lda #<DLI1_address
   408 6623 8D FA FF			sta NMIH_VECTOR		;VDSLST
   409 6626 A9 65			lda #>DLI1_address
   410 6628 8D FB FF			sta NMIH_VECTOR+1		;VDSLST+1
   411
   412
   413 				; final dli, do the old vbi code here and after that exit
   414 662B 84 02			sty save_y			; do not use register Y before this point!
   415
   416 662D 4C 17 5D			jmp VBI_address		; not a VBI anymore..
   417 				; 	jsr VBI_address
   418 				;
   419 				; 	.if .def SHOW_TIMING_AREAS
   420 				; 	lda m_mainAreaColor
   421 				; 	sta COLBK
   422 				; 	.endif
   423 				;
   424 				; 	lda save_a
   425 				; 	ldx save_x
   426 				; 	ldy save_y
   427 				;
   428 				; 	rti
   429
   430
   431 				;--------------------------------------------------------------------------------
   432 				; common area for all dli's, read the mouse in port 1
   433 6630			dli_readMouse
   434 6630 AE 00 D3			ldx PORTA
   435
   436 6633			DLI_nibbleTable
   437 6633 BD 00 8E			lda TabGetLowNibble,x
   438 					;lda TabGetHighNibble,x
   439
   440 					;and #15
   441
   442 				;--------------------------------------------------------------------------------
   443 				; this method seems to work for a mouse and a trackball, but
   444 				; it doesn't work that good for a mouse
   445
   446 				; 	tax
   447 				; 	eor old_port
   448 				; 	and old_port
   449 				; 	and #8+2    ; valid bits
   450 				; 	sta temp_port
   451 				;
   452 				; 	stx old_port
   453 				; 	txa
   454 				; 	and #4+1    ; dir bits
   455 				; 	ora temp_port
   456 				;
   457 				; 	tax
   458 				; 	lda tab_conv_mov,x
   459 				; 	sta mouse_mov
   460
   461
   462 				;--------------------------------------------------------------------------------
   463 				; this is wrong, it seems this method only works for a trackball!
   464 				; check only horizontal changes in mouse direction and movement
   465 				; 	tax			; save new PORTA value
   466 				;
   467 				; ; first bits (+1, direction) should be equal (between new and old values)
   468 				; ; second bits (+2, rate) should be different (between new and old values)
   469 				; 	eor old_port
   470 				; 	and #%0011	; if same X direction, with movement, then result should be %10
   471 				; 	cmp #%10
   472 				; 	stx old_port	; update old value before the branch..
   473 				; 	beq dli_sameDirAndMoved
   474 				;
   475 				; ; invalid, different direction or no movement, exit
   476 				; 	jmp exit_dli
   477 				;
   478 				; dli_sameDirAndMoved
   479 				; 	txa
   480 				; 	and #%0001	; get X direction bit (0 left, 1 right)
   481 				; 	beq dli_mouseLeft
   482 				;
   483 				; dli_mouseRight
   484 				; 	lda #%1000	; right bit value
   485 				; 	bne dli_updateMouseMov
   486 				;
   487 				; dli_mouseLeft
   488 				; 	lda #%0100	; left bit value
   489 				;
   490 				; dli_updateMouseMov
   491 				; 	sta mouse_mov
   492
   493
   494 				;--------------------------------------------------------------------------------
   495 				; in reality the Atari mouse does this: (for the first 2 bits, movement in X)
   496 				; left 0 1 3 2 (%00 %01 %11 %10) --> 0100 1101 1011 0010 ==> move left (4)
   497 				; right 1 0 2 3 (%01 %00 %10 %11) --> 0001 1000 1110 0111 ==> move right (8)
   498
   499 				;--------------------------------------------------------------------------------
   500 				; method 1 (this works well)
   501 				; 	and #%11
   502 				; 	tax
   503 				; 	asl
   504 				; 	asl
   505 				; 	ora old_port
   506 				;
   507 				; 	stx old_port
   508 				; 	tax
   509 				; 	lda TabMouseMoveX,x
   510 				; 	sta mouse_mov
   511
   512
   513 				;--------------------------------------------------------------------------------
   514 				; method 2 (accumulate the delta of movement over all 26 dli's, then use it in
   515 				; the VBI and apply the acceleration there) (the delta can go from -26 to +26)
   516 				; 	and #%11		; only these 2 bits are needed for a left/right movement
   517 				; 	ldx old_port
   518 				; 	cmp TabNextValueMovingRight,x
   519 				; 	bne dli_checkMoveLeft
   520 				;
   521 				; ; move right
   522 				; 	;lda #1
   523 				; 	;sta m_padFrameDirection
   524 				; 	inc m_padFrameDeltaStep
   525 				;
   526 				; 	jmp dli_updateOldPort
   527 				;
   528 				; dli_checkMoveLeft
   529 				; 	cmp TabNextValueMovingLeft,x
   530 				; 	bne dli_noMovement
   531 				; 
   532 				; ; move left
   533 				; 	;lda #2
   534 				; 	;sta m_padFrameDirection
   535 				; 	dec m_padFrameDeltaStep
   536 				; 
   537 				; 	jmp dli_updateOldPort
   538 				;
   539 				; dli_noMovement
   540 				; 	;lda #0
   541 				; 	;sta m_padFrameDirection
   542 				;
   543 				; dli_updateOldPort
   544 				; 	sta old_port
   545
   546
   547 				;--------------------------------------------------------------------------------
   548 				; method 3 (accumulate the delta of movement over all 26 dli's, using acceleration,
   549 				; and apply the result in the VBI) (the delta can go from -127 to +127)
   550
   551 6636			dli_mouseTypeHMoveMask
   552 6636 29 03			and #%11		; only these 2 bits are needed for a left/right movement
   553 					;and #%1010	; .. and these 2 with an Amiga mouse
   554 6638 85 07			sta m_portAHorizontalBits	; temporal save
   555
   556 663A A6 03			ldx old_port
   557
   558 663C			dli_checkMoveRight
   559 663C DD 74 92			cmp TabNextValueMovingRight,x
   560 663F D0 2E			bne dli_checkMoveLeft
   561
   562
   563 				;----------------------------------------
   564 				; move right, check acceleration
   565 6641 A9 00			lda #0
   566 6643 85 6C			sta m_mouseAccelMemoryCounter		; reset acceleration "memory"
   567
   568 6645 A5 6D			lda m_oldMouseReadDirection
   569 6647 C9 01			cmp #1						; check if old direction was to the right..
   570 6649 D0 0E			bne dli_noMouseAccelRight		; no acceleration (old direction != current direction, skip acceleration logic)
   571 664B C6 6A			dec m_mouseAccelCounter
   572 664D D0 12			bne dli_updatePadStepRight		; must still wait for counter, skip acceleration logic
   573
   574 664F A5 6B			lda m_mouseStep			; this was called m_mouseAccelStep before
   575 6651			dli_mouse_accel_step_value1
   576 6651 C9 02			cmp #MAX_MOUSE_STEP		; (2)
   577 6653 B0 08			bcs dli_restartMouseAccelRight	; a >= m
   578 6655 E6 6B			inc m_mouseStep
   579 					
   580 6657 D0 04			bne dli_restartMouseAccelRight	; forced "jump"
   581 					; beq branch of this should never happen.. but if does, reset the mouse step to 1
   582
   583 6659			dli_noMouseAccelRight
   584 6659 A9 02			lda #MIN_MOUSE_STEP		; (2)
   585 665B 85 6B			sta m_mouseStep
   586 665D			dli_restartMouseAccelRight
   587 665D A9 03			lda #MOUSE_READS_TO_ACCELERATE	; (3)
   588 665F 85 6A			sta m_mouseAccelCounter
   589
   590
   591 6661			dli_updatePadStepRight
   592 6661 A5 6E			lda m_padFrameDeltaStep
   593 6663 18				clc
   594 6664 65 6B			adc m_mouseStep
   595 6666 85 6E			sta m_padFrameDeltaStep
   596
   597 6668 A9 01			lda #1
   598 666A 85 6D			sta m_oldMouseReadDirection
   599
   600 666C 4C B9 66			jmp dli_updateOldPort
   601
   602
   603 				;----------------------------------------
   604 666F			dli_checkMoveLeft
   605 666F DD 83 92			cmp TabNextValueMovingLeft,x
   606 6672 D0 2E			bne dli_noMovement
   607
   608
   609 				;----------------------------------------
   610 				; move left, check acceleration
   611 6674 A9 00			lda #0
   612 6676 85 6C			sta m_mouseAccelMemoryCounter		; reset acceleration "memory"
   613
   614 6678 A5 6D			lda m_oldMouseReadDirection
   615 667A C9 02			cmp #2
   616 667C D0 0E			bne dli_noMouseAccelLeft			; no acceleration
   617 667E C6 6A			dec m_mouseAccelCounter
   618 6680 D0 12			bne dli_updatePadStepLeft
   619
   620 6682 A5 6B			lda m_mouseStep
   621 6684			dli_mouse_accel_step_value2
   622 6684 C9 02			cmp #MAX_MOUSE_STEP		; (2)
   623 6686 B0 08			bcs dli_restartMouseAccelLeft		; a >= m
   624 6688 E6 6B			inc m_mouseStep
   625 					
   626 668A D0 04			bne dli_restartMouseAccelLeft		; forced "jump"
   627
   628 668C			dli_noMouseAccelLeft
   629 668C A9 02			lda #MIN_MOUSE_STEP		; (2)
   630 668E 85 6B			sta m_mouseStep
   631 6690			dli_restartMouseAccelLeft
   632 6690 A9 03			lda #MOUSE_READS_TO_ACCELERATE	; (3)
   633 6692 85 6A			sta m_mouseAccelCounter
   634
   635
   636 6694			dli_updatePadStepLeft
   637 6694 A5 6E			lda m_padFrameDeltaStep
   638 6696 38				sec
   639 6697 E5 6B			sbc m_mouseStep
   640 6699 85 6E			sta m_padFrameDeltaStep
   641
   642 669B A9 02			lda #2
   643 669D 85 6D			sta m_oldMouseReadDirection
   644
   645 669F 4C B9 66			jmp dli_updateOldPort
   646
   647
   648 				;----------------------------------------
   649 66A2			dli_noMovement
   650 66A2 A6 6C			ldx m_mouseAccelMemoryCounter		; [0, MOUSE_ACCEL_MEMORY] mouse reads
   651 66A4 E8				inx
   652 66A5 E0 0B			cpx #MOUSE_ACCEL_MEMORY+1
   653 66A7 B0 04			bcs dli_resetOldMoveInfo		; x >= m, reset "m_oldMouseReadDirection"
   654
   655 66A9 86 6C			stx m_mouseAccelMemoryCounter
   656 66AB 90 0C			bcc dli_updateOldPort		; "jump", do not reset "m_oldMouseReadDirection"
   657
   658 66AD			dli_resetOldMoveInfo
   659 66AD A9 02			lda #MIN_MOUSE_STEP		; (1)
   660 66AF 85 6B			sta m_mouseStep
   661 66B1 A9 03			lda #MOUSE_READS_TO_ACCELERATE	; (3)
   662 66B3 85 6A			sta m_mouseAccelCounter
   663
   664 66B5 A9 00			lda #0
   665 66B7 85 6D			sta m_oldMouseReadDirection
   666
   667
   668 				;----------------------------------------
   669 66B9			dli_updateOldPort
   670 66B9 A5 07			lda m_portAHorizontalBits
   671 66BB 85 03			sta old_port
   672
   673
   674 				;--------------------------------------------------------------------------------
   675 				; old acceleration logic
   676 				; 	lda mouse_mov
   677 				; 	and #8+4
   678 				; 	bne ac1
   679 				;
   680 				; ; if no left/right move, then increment "m_mouseAccelMemoryCounter"
   681 				; 	ldx m_mouseAccelMemoryCounter		; [0, MOUSE_ACCEL_MEMORY] mouse reads
   682 				; 	inx
   683 				; 	cpx #MOUSE_ACCEL_MEMORY+1
   684 				; 	bcs ac4			; x >= m, already at the limit, update "old_mov"
   685 				; 	stx m_mouseAccelMemoryCounter
   686 				; 	bcc mpd			; "jump", do not update "old_mov"
   687 				;
   688 				; ; if there is no movement, before 2 seconds, do not update "old_mov"
   689 				; ; (keep alive old direction for 2 seconds! so if we start moving again in
   690 				; ; that same direction we continue with the acceleration that we already have!
   691 				; ; this could be useful if we lose "reads" from the mouse..)
   692 				;
   693 				; ; if there is no movement, after 2 seconds, start updating "old_mov"
   694 				; ; if there is movement, always update "old_mov"
   695 				;
   696 				; ; there is a left or right move
   697 				; ac1	ldx #0
   698 				; 	stx m_mouseAccelMemoryCounter		; reset "m_mouseAccelMemoryCounter"
   699 				;
   700 				; 	cmp old_mov
   701 				; 	bne ac2			; if different move direction, then reset the acceleration
   702 				; 	dec m_mouseAccelCounter		; number of frames between increments of the speed
   703 				; 	bne ac4
   704 				;
   705 				; 	lda m_mouseStep
   706 				; 	cmp #MAX_MOUSE_STEP	; (2)
   707 				; 	bcs ac3			; a >= m
   708 				; 	inc m_mouseStep
   709 				; 	bne ac3		; "jump"
   710 				;
   711 				; ac2	lda #MIN_MOUSE_STEP	; (1)
   712 				; 	sta m_mouseStep
   713 				; ac3	lda #MOUSE_READS_TO_ACCELERATE	; (3)
   714 				; 	sta m_mouseAccelCounter
   715 				;
   716 				; ac4	lda mouse_mov
   717 				; 	and #8+4
   718 				; 	sta old_mov
   719
   720
   721 				;--------------------------------------------------------------------------------
   722 				; move paddle left or right, applying acceleration
   723 				; mpd	lda mouse_mov	; 0000=rldu
   724 				; 	and #%1100
   725 				; 	beq exit_dli
   726 				;
   727 				; 	and #%0100		; left?
   728 				; 	bne mpl
   729 				;
   730 				; ; move right
   731 				; mpr	lda pad_xpos
   732 				; 	clc
   733 				; 	adc m_mouseStep
   734 				; 	cmp #MAX_PAD_POSX+1
   735 				; 	bcc mp1     ; a < m
   736 				; 	lda #MAX_PAD_POSX
   737 				; mp1	sta pad_xpos
   738 				;
   739 				; 	jmp exit_dli
   740 				;
   741 				; ; move left
   742 				; mpl	lda pad_xpos
   743 				; 	sec
   744 				; 	sbc m_mouseStep
   745 				; 	bcs mp2
   746 				; 	lda #0
   747 				; mp2	sta pad_xpos
   748
   749
   750 66BD			exit_dli
   751 					.if .def SHOW_TIMING_AREAS
   752 					lda m_mainAreaColor
   753 					sta COLBK
   754 					.endif
   755
   756 66BD A5 00			lda save_a
   757 66BF A6 01			ldx save_x
   758
   759 66C1 40				rti
  3307
  3308
  3309 				;================================================================================
  3310
  3311 				; DisplayBallSteps
  3312 				; 	ldx m_ballStepsInFrame
  3313 				; 	ldy #9
  3314 				; 	jsr DisplayInfoByte99
  3315 				;
  3316 				; 	lda #0
  3317 				; 	sta m_ballStepsInFrame
  3318 				;
  3319 				; 	rts
  3320 				;
  3321 				;
  3322 				; m_ballStepsInFrame		.byte 0
  3323
  3324
  3325 				;================================================================================
  3326
  3327 66C2			DisplayLives
  3328 66C2 A6 57			ldx m_numberOfBallsLeft
  3329 66C4 A0 1C			ldy #28
  3330 66C6 4C 1B 68			jmp DisplayInfoByte99
  3331
  3332 					;rts
  3333
  3334
  3335 				;================================================================================
  3336
  3337 66C9			IncreaseBallsInHud
  3338 66C9 A6 58			ldx m_ballNumHud
  3339 66CB E0 0A			cpx #MAX_BALLS_IN_HUD		; show a max of 10 balls in the left column
  3340 66CD F0 13			beq IBIH_exit
  3341
  3342 66CF E6 58			inc m_ballNumHud
  3343
  3344 66D1 BD F9 98			lda TabDL1LineAddressInverse_LSB,x
  3345 66D4 8D E0 66			sta IBIH_pointer+1
  3346 66D7 BD 15 99			lda TabDL1LineAddressInverse_MSB,x
  3347 66DA 8D E1 66			sta IBIH_pointer+2
  3348
  3349 66DD A9 AC			lda #BALL_CHAR
  3350 66DF			IBIH_pointer
  3351 66DF 8D FF FF			sta $FFFF
  3352
  3353 66E2			IBIH_exit
  3354 66E2 60				rts
  3355
  3356
  3357 66E3			DecreaseBallsInHud
  3358 66E3 A6 58			ldx m_ballNumHud
  3359 66E5 F0 14			beq DBIH_exit
  3360
  3361 66E7 CA				dex
  3362 66E8 86 58			stx m_ballNumHud
  3363
  3364 66EA BD F9 98			lda TabDL1LineAddressInverse_LSB,x
  3365 66ED 8D F9 66			sta DBIH_pointer+1
  3366 66F0 BD 15 99			lda TabDL1LineAddressInverse_MSB,x
  3367 66F3 8D FA 66			sta DBIH_pointer+2
  3368
  3369 66F6 A9 2D			lda #BLANK_CHAR
  3370 66F8			DBIH_pointer
  3371 66F8 8D FF FF			sta $FFFF
  3372
  3373 66FB			DBIH_exit
  3374 66FB 60				rts
  3375
  3376
  3377 66FC			ClearAllBallsInHud
  3378 66FC A2 00			ldx #0
  3379
  3380 66FE			CABIH_loop
  3381 66FE BD F9 98			lda TabDL1LineAddressInverse_LSB,x
  3382 6701 8D 0D 67			sta CABIH_pointer+1
  3383 6704 BD 15 99			lda TabDL1LineAddressInverse_MSB,x
  3384 6707 8D 0E 67			sta CABIH_pointer+2
  3385
  3386 670A A9 2D			lda #BLANK_CHAR
  3387 670C			CABIH_pointer
  3388 670C 8D FF FF			sta $FFFF
  3389
  3390 670F E8				inx
  3391 6710 E0 0A			cpx #MAX_BALLS_IN_HUD
  3392 6712 D0 EA			bne CABIH_loop
  3393
  3394 6714 60				rts
  3395
  3396
  3397 				;================================================================================
  3398 				; this one use the decimal flag mode for the score
  3399 				; pass in X the low byte of the score (BCD)
  3400 				; pass in Y the high (middle) byte of the score (BCD)
  3401
  3402 6715			AddScore
  3403
  3404 				; this is also to check if we crossed the 20000 score barrier, to give an extra player
  3405 6715 A5 85			lda m_playerScore+1
  3406 6717 85 87			sta m_tempScore
  3407
  3408
  3409 6719 8A				txa
  3410 671A 18				clc
  3411 671B F8				sed		; remember: just because of this we need to use "cld" in every DLI
  3412
  3413 671C 65 84			adc m_playerScore
  3414 671E 85 84			sta m_playerScore
  3415
  3416 6720 98				tya
  3417 6721 65 85			adc m_playerScore+1
  3418 6723 85 85			sta m_playerScore+1
  3419
  3420 6725 A5 86			lda m_playerScore+2
  3421 6727 69 00			adc #0
  3422 6729 85 86			sta m_playerScore+2
  3423
  3424 672B D8				cld
  3425
  3426 				; this is to check if we crossed the 20000 score barrier, to give an extra player
  3427 672C A5 87			lda m_tempScore
  3428 672E C9 20			cmp #$20
  3429 6730 B0 0E			bcs AS_exit			; old score >= 20000
  3430 6732 A5 85			lda m_playerScore+1
  3431 6734 C9 20			cmp #$20
  3432 6736 90 08			bcc AS_exit			; new score < 20000
  3433
  3434 6738 E6 57			inc m_numberOfBallsLeft
  3435 673A 20 C9 66			jsr IncreaseBallsInHud
  3436
  3437 					;jsr DisplayLives
  3438
  3439 673D 20 8F 59			jsr PlayExtraLifeSound
  3440
  3441
  3442 6740			AS_exit
  3443 					;jmp DisplayScore
  3444
  3445 6740 60				rts
  3446
  3447
  3448 				;================================================================================
  3449
  3450 6741			DisplayScore
  3451 6741 A5 84			lda m_playerScore
  3452 6743 A0 0D			ldy #13
  3453 6745 20 37 68			jsr DisplayDebugInfoHexFF
  3454
  3455 6748 A5 85			lda m_playerScore+1
  3456 674A A0 0B			ldy #11
  3457 674C 20 37 68			jsr DisplayDebugInfoHexFF
  3458
  3459 674F A5 86			lda m_playerScore+2
  3460 6751 A0 09			ldy #9
  3461 6753 4C 37 68			jmp DisplayDebugInfoHexFF
  3462
  3463 					;rts
  3464
  3465
  3466 				;================================================================================
  3467
  3468 6756			DisplaySessionScore
  3469 6756 A5 D2			lda m_sessionHighScore
  3470 6758 20 51 68			jsr GetDebugInfoHexFF
  3471
  3472 675B A0 10			ldy #16
  3473 675D A5 AE			lda m_leftDigit
  3474 675F 99 6E A0			sta DL2_score_line,y
  3475 6762 A5 AF			lda m_rightDigit
  3476 6764 99 6F A0			sta DL2_score_line+1,y
  3477
  3478 6767 A5 D3			lda m_sessionHighScore+1
  3479 6769 20 51 68			jsr GetDebugInfoHexFF
  3480
  3481 676C A0 0E			ldy #14
  3482 676E A5 AE			lda m_leftDigit
  3483 6770 99 6E A0			sta DL2_score_line,y
  3484 6773 A5 AF			lda m_rightDigit
  3485 6775 99 6F A0			sta DL2_score_line+1,y
  3486
  3487 6778 A5 D4			lda m_sessionHighScore+2
  3488 677A 20 51 68			jsr GetDebugInfoHexFF
  3489
  3490
  3491 				; don't display both high digits if they are 0
  3492 677D A5 AE			lda m_leftDigit
  3493 677F 18				clc
  3494 6780 65 AF			adc m_rightDigit
  3495 6782 C9 20			cmp #["0"+"0"]
  3496 6784 F0 10			beq DSS_exit
  3497
  3498 				; don't display high digit if it is 0
  3499 6786 A0 0C			ldy #12
  3500 6788 A5 AE			lda m_leftDigit
  3501 678A C9 10			cmp #"0"
  3502 678C F0 03			beq DSS_skip_high_digit
  3503 678E 99 6E A0			sta DL2_score_line,y
  3504
  3505 6791			DSS_skip_high_digit
  3506 6791 A5 AF			lda m_rightDigit
  3507 6793 99 6F A0			sta DL2_score_line+1,y
  3508
  3509
  3510 				; second method, erase after
  3511 				; 	ldy #12
  3512 				; 	lda m_leftDigit
  3513 				; 	sta DL2_score_line,y
  3514 				; 	lda m_rightDigit
  3515 				; 	sta DL2_score_line+1,y
  3516 				;
  3517 				; ; erase the chars that are equal to zero
  3518 				; 	ldx #" "
  3519 				; 	lda #"0"
  3520 				;
  3521 				; 	cmp DL2_score_line+12
  3522 				; 	bne DSS_exit
  3523 				; 	stx DL2_score_line+12
  3524 				;
  3525 				; 	cmp DL2_score_line+12+1
  3526 				; 	bne DSS_exit
  3527 				; 	stx DL2_score_line+12+1
  3528
  3529
  3530 6796			DSS_exit
  3531 6796 60				rts
  3532
  3533
  3534 6797			DisplayHighScoreLevel
  3535 6797 A5 52			lda m_levelIndex
  3536 6799 0A				asl				; x2, the level has two chars for description
  3537 679A AA				tax
  3538
  3539 679B A5 D6			lda m_difficultyIndex
  3540 679D C9 03			cmp #3	; "extra" game mode
  3541 679F B0 0D			bcs DHSL_extra_level
  3542
  3543 67A1 BD 31 99			lda TabLevelName,x
  3544 67A4 8D 87 A0			sta DL2_score_line+25
  3545 67A7 BD 32 99			lda TabLevelName+1,x
  3546 67AA 8D 88 A0			sta DL2_score_line+26
  3547
  3548 67AD 60				rts
  3549
  3550 67AE			DHSL_extra_level
  3551 67AE BD 9A 99			lda TabLevelNameExtra,x
  3552 67B1 8D 87 A0			sta DL2_score_line+25
  3553 67B4 BD 9B 99			lda TabLevelNameExtra+1,x
  3554 67B7 8D 88 A0			sta DL2_score_line+26
  3555
  3556 67BA 60				rts
  3557
  3558
  3559 67BB			DisplayLastScore
  3560 67BB A5 84			lda m_playerScore
  3561 67BD 20 51 68			jsr GetDebugInfoHexFF
  3562
  3563 67C0 A0 06			ldy #6
  3564 67C2 A5 AE			lda m_leftDigit
  3565 67C4 99 6E A0			sta DL2_score_line,y
  3566 67C7 A5 AF			lda m_rightDigit
  3567 67C9 99 6F A0			sta DL2_score_line+1,y
  3568
  3569 67CC A5 85			lda m_playerScore+1
  3570 67CE 20 51 68			jsr GetDebugInfoHexFF
  3571
  3572 67D1 A0 04			ldy #4
  3573 67D3 A5 AE			lda m_leftDigit
  3574 67D5 99 6E A0			sta DL2_score_line,y
  3575 67D8 A5 AF			lda m_rightDigit
  3576 67DA 99 6F A0			sta DL2_score_line+1,y
  3577
  3578 67DD A5 86			lda m_playerScore+2
  3579 67DF 20 51 68			jsr GetDebugInfoHexFF
  3580
  3581 67E2 A0 02			ldy #2
  3582 67E4 A5 AE			lda m_leftDigit
  3583 67E6 99 6E A0			sta DL2_score_line,y
  3584 67E9 A5 AF			lda m_rightDigit
  3585 67EB 99 6F A0			sta DL2_score_line+1,y
  3586
  3587
  3588 				; check and erase zeros for the first 5 digits
  3589 67EE A2 00			ldx #" "
  3590 67F0 A9 10			lda #"0"
  3591
  3592 67F2 CD 70 A0			cmp DL2_score_line+2
  3593 67F5 D0 23			bne DLS_exit
  3594 67F7 8E 70 A0			stx DL2_score_line+2
  3595
  3596 67FA CD 71 A0			cmp DL2_score_line+2+1
  3597 67FD D0 1B			bne DLS_exit
  3598 67FF 8E 71 A0			stx DL2_score_line+2+1
  3599
  3600 6802 CD 72 A0			cmp DL2_score_line+2+2
  3601 6805 D0 13			bne DLS_exit
  3602 6807 8E 72 A0			stx DL2_score_line+2+2
  3603
  3604 680A CD 73 A0			cmp DL2_score_line+2+3
  3605 680D D0 0B			bne DLS_exit
  3606 680F 8E 73 A0			stx DL2_score_line+2+3
  3607
  3608 6812 CD 74 A0			cmp DL2_score_line+2+4
  3609 6815 D0 03			bne DLS_exit
  3610 6817 8E 74 A0			stx DL2_score_line+2+4
  3611
  3612
  3613 681A			DLS_exit
  3614 681A 60				rts
  3615
  3616
  3617 				;================================================================================
  3618 				; display 2 digits with values from 00 to 99
  3619 				; pass the value in X and the line row in Y
  3620
  3621 681B			DisplayInfoByte99
  3622
  3623 				; add this check only if we are not sure about the values
  3624 681B E0 64			cpx #100
  3625 681D 90 02			bcc NoOverflow
  3626 681F A2 63			ldx #99
  3627 6821			NoOverflow
  3628
  3629 6821 BD 00 92			lda TabBinaryToBCD,x
  3630 6824 AA				tax
  3631
  3632 				; display 2 digits
  3633 6825 4A				lsr
  3634 6826 4A				lsr
  3635 6827 4A				lsr
  3636 6828 4A				lsr
  3637 6829 09 10			ora #16			; add the "0" character value
  3638 682B 99 8E A1			sta DLInfoLine,y
  3639
  3640 682E 8A				txa
  3641 682F 29 0F			and #15
  3642 6831 09 10			ora #16			; add the "0" character value
  3643 6833 99 8F A1			sta DLInfoLine+1,y
  3644
  3645 6836 60				rts
  3646
  3647
  3648 				;================================================================================
  3649 				; display 2 digits with values from 00 to FF
  3650 				; pass the value in A and the line row in Y
  3651
  3652 6837			DisplayDebugInfoHexFF
  3653 6837 8D 46 68			sta DDIH_save_value+1
  3654
  3655 				; display 2 digits (from 0 to F)
  3656 683A 4A				lsr
  3657 683B 4A				lsr
  3658 683C 4A				lsr
  3659 683D 4A				lsr
  3660 683E AA				tax
  3661 683F BD 64 92			lda TabHexNibbleToScreenDigit,x
  3662 6842 99 8E A1			sta DLInfoLine,y
  3663
  3664 6845			DDIH_save_value
  3665 6845 A9 FF			lda #$FF
  3666
  3667 6847 29 0F			and #15
  3668 6849 AA				tax
  3669 684A BD 64 92			lda TabHexNibbleToScreenDigit,x
  3670 684D 99 8F A1			sta DLInfoLine+1,y
  3671
  3672 6850 60				rts
  3673
  3674
  3675 				;================================================================================
  3676 				; get 2 digits with values from 00 to FF
  3677 				; pass the value in A
  3678 				; return digits in m_leftDigit and m_rightDigit
  3679
  3680 6851			GetDebugInfoHexFF
  3681 6851 A8				tay
  3682
  3683 				; display 2 digits (from 0 to F)
  3684 6852 4A				lsr
  3685 6853 4A				lsr
  3686 6854 4A				lsr
  3687 6855 4A				lsr
  3688 6856 AA				tax
  3689 6857 BD 64 92			lda TabHexNibbleToScreenDigit,x
  3690 685A 85 AE			sta m_leftDigit
  3691
  3692 685C 98				tya
  3693
  3694 685D 29 0F			and #15
  3695 685F AA				tax
  3696 6860 BD 64 92			lda TabHexNibbleToScreenDigit,x
  3697 6863 85 AF			sta m_rightDigit
  3698
  3699 6865 60				rts
  3700
  3701
  3702 				;================================================================================
  3703
  3704 6866			START_LEVELS_AREA
  3705 6866				icl "padlvls.asm"
Source: D:\!Delphi\mads\examples\games\pad\padlvls.asm
     1
     2 				; arkanoid game area: (28 x 32 "chars")
     3 				; - 2 lines of text
     4 				; - 1 line for the top tube
     5 				; - 18 lines of 13 bricks (plus the left and right tubes, half width of a brick each)
     6 				; - 8 empty lines
     7 				; - 1 line for the paddle
     8 				; - 1 empty line
     9 				; - 1 line for the extra paddles (players)
    10
    11 				; bricks definition: (13x18 bricks, 18 lines of colors)
    12 				; 1: normal brick (one hit, plain color)
    13 				; 2: "gold" brick (restored after some seconds)
    14 				; 3: normal brick + bonus (one hit, plain color)
    15 				; 9 --> 14: "hard" brick need from 1 to 6 hits ($A .. $E)
    16 				; 15: "cross" brick, unbreakable ($F)
    17
    18 				; 15 different bricks, 30 chars
    19 				; current list:
    20 				; - dark blue [0]
    21 				; - grey [1]
    22 				; - white dli, white [2,3]
    23 				; - "checkered" dli, white [4,5]
    24 				; - "diagonal" dli, white [6,7]
    25 				; - "pad" dli, white [8,9]
    26 				; - black (empty) [10] ($A)
    27 				; - "hard" dli, white [11,12] ($B,$C)
    28 				; - "cross" dli, white [13,14] ($D,$E)
    29
    30 				; normal brick colors: (NTSC)
    31 				; - white: $0E
    32 				; - orange: $2A
    33 				; - cyan: $AC
    34 				; - green: $CA
    35 				; - red: $36
    36 				; - blue: $86
    37 				; - violet: $58
    38 				; - yellow: $1E
    39 				; + grey: $08
    40 				; + gold: $E8
    41
    42 				; background colors:
    43 				; +colpf0 for backg 0, diagonal (+grey): $84, $94
    44 				; -colpf0 for backg 1, lines: $34, $44, -$84, $94, -$A4
    45 				; +colpf0 for backg 2, lines+squares: $34, $44, -$84, $94, -$A4
    46 				; colpf0 for backg 3, mountains: $34, $44, -$54, -$64, -$74, -$84, $94
    47
    48 				; +colpf0 for backg 4, hex line: $34, $44, -$54, -$74, -$84, $94
    49 				; +colpf0 for backg 5, hex column filled: $34, $44, $54, -$64, -$74, $84, $94
    50 				; -colpf0 for backg 6, hex column filled (+grey): $34, $44, $84, $94
    51 				; -colpf0 for backg 7, hex circle: $34, $44, $84, $94
    52
    53
    54 				;================================================================================
    55
    56 				; current level table (all levels are copied here first)
    57 				; 13*18 --> 234 + 20*2 + 3 = 277 bytes per level (x36 = 9972)
    58
    59 6866			TabLevel
    60 6866 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    61 6873 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    62 6880 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    63 688D 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    64 689A 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    65
    66 68A7 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    67 68B4 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    68 68C1 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    69 68CE 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    70 68DB 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    71
    72 68E8 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    73 68F5 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    74 6902 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    75 690F 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    76 691C 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    77
    78 6929 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    79 6936 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    80 6943 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
    81
    82 6950			TabDLI_COLPF2
    83 6950 00 00			.byte 0,0						; 2 lines (first 2 border lines)
    84 6952 01 01 01 01 01 01 + 	.byte 1,1,1,1,1, 1,1,1,1,1
    85 695C 01 01 01 01 01 01 + 	.byte 1,1,1,1,1, 1,1,1			; 18 lines of bricks
    86 6964 00 00 00 00 00 00 + 	.byte 0,0,0,0,0, 0,0,0			; 8 lines
    87
    88 696C			TabDLI_COLPF1
    89 696C 00 00			.byte 0,0						; 2 lines (first 2 border lines)
    90 696E 01 01 01 01 01 01 + 	.byte 1,1,1,1,1, 1,1,1,1,1
    91 6978 01 01 01 01 01 01 + 	.byte 1,1,1,1,1, 1,1,1			; 18 lines of bricks
    92 6980 00 00 00 00 00 00 + 	.byte 0,0,0,0,0, 0,0,0			; 8 lines
    93
    94
    95 				;================================================================================
    96
    97 6988			TabLevelAddress_LSB
    98 6988 F6				.byte <lv01
    99 6989 07 89			.byte <lv14, <lv08
   100 698B 74 5F 20			.byte <lv07, <lv06, <lv02
   101 698E 4A 46 C8 31			.byte <lv04, <lv20, <lv10, <lv18
   102 6992 70 B3 5B 1C 18		.byte <lv22, <lv09, <lv21, <lv16, <lv30
   103 6997 C4 03 9A 57 81 D9		.byte <lv25, <lv28, <lv23, <lv32, <lv34, <lv26
   104 699D F2 96 EE AF 35 6C + 	.byte <lv13, <lv35, <lv27, <lv24, <lv03, <lv33, <lv31
   105
   106 69A4			TabLevelAddress_MSB
   107 69A4 69				.byte >lv01
   108 69A5 78 71			.byte >lv14, >lv08
   109 69A7 70 6F 6C			.byte >lv07, >lv06, >lv02
   110 69AA 6E 7B 74 7A			.byte >lv04, >lv20, >lv10, >lv18
   111 69AE 7D 73 7C 79 86		.byte >lv22, >lv09, >lv21, >lv16, >lv30
   112 69B3 81 85 7F 89 8B 82		.byte >lv25, >lv28, >lv23, >lv32, >lv34, >lv26
   113 69B9 76 8C 83 80 6D 8A + 	.byte >lv13, >lv35, >lv27, >lv24, >lv03, >lv33, >lv31
   114
   115
   116 				;================================================================================
   117
   118 69C0			TabLevelExtraAddress_LSB
   119 69C0 0B B3 9E 20 4A		.byte <lv01b, <lv09, <lv08b, <lv02, <lv04
   120 69C5 85 5F C4 5B 07 74		.byte <lv22b, <lv06, <lv25, <lv21, <lv14, <lv07
   121 69CB 1C 31 57 D9 35 96		.byte <lv16, <lv18, <lv32, <lv26, <lv03, <lv35
   122 69D1 81 AF 03 6C 46 DD		.byte <lv34, <lv24, <lv28, <lv33, <lv20, <lv10b
   123 69D7 EE 9A F2 42			.byte <lv27, <lv23, <lv13, <lv31b
   124
   125 69DB			TabLevelExtraAddress_MSB
   126 69DB 6B 73 72 6C 6E		.byte >lv01b, >lv09, >lv08b, >lv02, >lv04
   127 69E0 7E 6F 81 7C 78 70		.byte >lv22b, >lv06, >lv25, >lv21, >lv14, >lv07
   128 69E6 79 7A 89 82 6D 8C		.byte >lv16, >lv18, >lv32, >lv26, >lv03, >lv35
   129 69EC 8B 80 85 8A 7B 75		.byte >lv34, >lv24, >lv28, >lv33, >lv20, >lv10b
   130 69F2 83 7F 76 88			.byte >lv27, >lv23, >lv13, >lv31b
   131
   132
   133 				;================================================================================
   134 				; all levels definitions
   135 				;================================================================================
   136
   137 69F6			lv01
   138 69F6 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   139 6A03 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   140 6A10 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   141 6A1D 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   142 6A2A EA EA EA EA EA EA + 	.by +$EA,0,0,0,0,0,0,0,0,0,0,0,0,0
   143
   144 6A37 23 23 23 23 23 23 + 	.by +$20,3,3,3,3,3,3,3,3,3,3,3,3,3
   145 6A44 21 21 21 21 21 21 + 	.by +$20,1,1,1,1,1,1,1,1,1,1,1,1,1
   146 6A51 23 23 23 23 23 23 + 	.by +$20,3,3,3,3,3,3,3,3,3,3,3,3,3
   147 6A5E 21 21 21 21 21 21 + 	.by +$20,1,1,1,1,1,1,1,1,1,1,1,1,1
   148 6A6B 23 23 23 23 23 23 + 	.by +$20,3,3,3,3,3,3,3,3,3,3,3,3,3
   149
   150 6A78 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   151 6A85 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   152 6A92 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   153 6A9F 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   154 6AAC 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   155
   156 6AB9 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   157 6AC6 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   158 6AD3 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   159
   160 				;----------------------------------------
   161 				.if .def PAL_VERSION
   162 				; colpf2
   163 6AE0 7E 7E			.byte $7E,$7E
   164 6AE2 00 00 00 00 00 26 + 	.byte 0,0,0,0,0, $26,$EE,$76,$48,$BA
   165 6AEC 00 00 00 00 00 00 + 	.byte 0,0,0,0,0, 0,0,0
   166 				; colpf1
   167 6AF4 78 78			.byte $78,$78
   168 6AF6 08 08 08 08 08 08 + 	.byte 8,8,8,8,8, 8,8,8,8,8
   169 6B00 08 08 08 08 08 08 + 	.byte 8,8,8,8,8, 8,8,8
   170
   171 				; background index and color (colpf0)
   172 6B08 00 84			.byte 0, $84
   173 				;----------------------------------------
   174 				.else
   175 				; colpf2
   176 					.byte $8E,$8E
   177 					.byte 0,0,0,0,0, $36,$1E,$86,$58,$CA
   178 					.byte 0,0,0,0,0, 0,0,0
   179 				; colpf1
   180 					.byte $88,$88
   181 					.byte 8,8,8,8,8, 8,8,8,8,8
   182 					.byte 8,8,8,8,8, 8,8,8
   183
   184 				; background index and color (colpf0)
   185 					.byte 0, $94
   186 				.endif
   187 				;----------------------------------------
   188
   189 				; number of valid bricks
   190 6B0A 4E				.byte 78
   191
   192 				;================================================================================
   193
   194 6B0B			lv01b
   195 6B0B 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   196 6B18 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   197 6B25 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   198 6B32 DF DF DF DF DF DF + 	.byte $DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF
   199 6B3F 23 23 23 31 23 23 + 	.byte $23,$23,$23,$31,$23,$23,$00,$13,$13,$31,$13,$13,$13
   200
   201 6B4C 23 23 31 31 23 23 + 	.byte $23,$23,$31,$31,$23,$23,$00,$13,$13,$31,$31,$13,$13
   202 6B59 23 31 31 31 31 31 + 	.byte $23,$31,$31,$31,$31,$31,$00,$31,$31,$31,$31,$31,$13
   203 6B66 31 31 31 31 31 31 + 	.byte $31,$31,$31,$31,$31,$31,$00,$31,$31,$31,$31,$31,$31
   204 6B73 23 31 31 31 31 31 + 	.byte $23,$31,$31,$31,$31,$31,$00,$31,$31,$31,$31,$31,$13
   205 6B80 23 23 31 31 23 23 + 	.byte $23,$23,$31,$31,$23,$23,$00,$13,$13,$31,$31,$13,$13
   206
   207 6B8D 23 23 23 31 23 23 + 	.byte $23,$23,$23,$31,$23,$23,$00,$13,$13,$31,$13,$13,$13
   208 6B9A EA EA EA EA EA EA + 	.byte $EA,$EA,$EA,$EA,$EA,$EA,$52,$EA,$EA,$EA,$EA,$EA,$EA
   209 6BA7 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   210 6BB4 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   211 6BC1 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   212
   213 6BCE 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   214 6BDB 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   215 6BE8 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   216
   217 				;----------------------------------------
   218 				.if .def PAL_VERSION
   219 				; colpf2
   220 6BF5 9E 9E			.byte $9E,$9E
   221 6BF7 00 00 00 EE 26 26 + 	.byte $00,$00,$00,$EE,$26, $26,$26,$26,$26,$26
   222 6C01 26 00 00 00 00 00 + 	.byte $26,$00,$00,$00,$00, $00,$00,$00
   223 				; colpf1
   224 6C09 98 98			.byte $98,$98
   225 6C0B 08 08 08 1A 88 88 + 	.byte $08,$08,$08,$1A,$88, $88,$88,$88,$88,$88
   226 6C15 88 08 08 08 08 08 + 	.byte $88,$08,$08,$08,$08, $08,$08,$08
   227
   228 				; background index and color (colpf0)
   229 6C1D 05 94			.byte 5, $94
   230 				;----------------------------------------
   231 				.else
   232 				; colpf2
   233 					.byte $AE,$AE
   234 					.byte $00,$00,$00,$1E,$36, $36,$36,$36,$36,$36
   235 					.byte $36,$00,$00,$00,$00, $00,$00,$00
   236 				; colpf1
   237 					.byte $A8,$A8
   238 					.byte $08,$08,$08,$2A,$98, $98,$98,$98,$98,$98
   239 					.byte $98,$08,$08,$08,$08, $08,$08,$08
   240
   241 				; background index and color (colpf0)
   242 					.byte 5, $A4
   243 				.endif
   244 				;----------------------------------------
   245
   246 				; number of valid bricks
   247 6C1F 60				.byte 96
   248
   249 				;================================================================================
   250
   251 6C20			lv02
   252 6C20 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   253 6C2D 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   254 6C3A 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   255 6C47 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,$CC,0,0,0,0,0,0
   256 6C54 00 00 00 11 11 13 + 	.byte 0,0,0,$11,$11,$13,$31,$23,$21,$21,0,0,0
   257
   258 6C61 00 00 11 11 13 31 + 	.byte 0,0,$11,$11,$13,$31,$31,$31,$21,$21,$23,0,0
   259 6C6E 00 00 11 13 31 31 + 	.byte 0,0,$11,$13,$31,$31,$33,$31,$31,$23,$21,0,0
   260 6C7B 00 11 13 11 31 31 + 	.byte 0,$11,$13,$11,$31,$31,$31,$31,$33,$21,$21,$21,0
   261 6C88 00 13 11 11 31 31 + 	.byte 0,$13,$11,$11,$31,$31,$31,$33,$31,$21,$21,$21,0
   262 6C95 00 11 11 11 31 31 + 	.byte 0,$11,$11,$11,$31,$31,$33,$31,$31,$21,$21,$23,0
   263
   264 6CA2 00 CC 00 00 CC 00 + 	.byte 0,$CC,0,0,$CC,0,$CC,0,$CC,0,0,$CC,0
   265 6CAF 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,$CC,0,0,0,0,0,0
   266 6CBC 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,$CC,0,0,0,0,0,0
   267 6CC9 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,$CC,0,0,0,0,0,0
   268 6CD6 00 00 00 00 BF 00 + 	.byte 0,0,0,0,$BF,0,$BF,0,0,0,0,0,0
   269
   270 6CE3 00 00 00 00 BF BF + 	.byte 0,0,0,0,$BF,$BF,$BF,0,0,0,0,0,0
   271 6CF0 00 00 00 00 00 BF + 	.byte 0,0,0,0,0,$BF,0,0,0,0,0,0,0
   272 6CFD 00 00 00 00 00 00 + 	.byte 0,0,0,0,0,0,0,0,0,0,0,0,0
   273
   274 				;----------------------------------------
   275 				.if .def PAL_VERSION
   276 				; colpf2
   277 6D0A 2E 2E			.byte $2E,$2E
   278 6D0C 00 00 00 00 BC BA + 	.byte 0,0,0,0,$BC, $BA,$BA,$BA,$BA,$BA
   279 6D16 00 00 00 00 EE EE + 	.byte 0,0,0,0,$EE, $EE,$EE,0
   280
   281 				; colpf1
   282 6D1E 28 28			.byte $28,$28
   283 6D20 08 08 08 08 76 76 + 	.byte 8,8,8,8,$76, $76,$76,$76,$76,$76
   284 6D2A 08 08 08 08 E8 E8 + 	.byte 8,8,8,8,$E8, $E8,$E8,8
   285
   286 				; background index and color (colpf0)
   287 6D32 02 24			.byte 2, $24
   288 				;----------------------------------------
   289 				.else
   290 				; colpf2
   291 					.byte $3E,$3E
   292 					.byte 0,0,0,0,$CC, $CA,$CA,$CA,$CA,$CA
   293 					.byte 0,0,0,0,$EE, $EE,$EE,0
   294
   295 				; colpf1
   296 					.byte $38,$38
   297 					.byte 8,8,8,8,$86, $86,$86,$86,$86,$86
   298 					.byte 8,8,8,8,$E8, $E8,$E8,8
   299
   300 				; background index and color (colpf0)
   301 					.byte 2, $34
   302 				.endif
   303 				;----------------------------------------
   304
   305 				; number of valid bricks
   306 6D34 43				.byte 67
   307
   308 				;================================================================================
   309
   310 6D35			lv03
   311 6D35 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   312 6D42 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   313 6D4F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   314 6D5C 00 CA 23 CA 21 CA + 	.byte $00,$CA,$23,$CA,$21,$CA,$21,$CA,$21,$CA,$23,$CA,$00
   315 6D69 00 BF BF BF BF BF + 	.byte $00,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$BF,$00
   316
   317 6D76 00 21 00 21 00 23 + 	.byte $00,$21,$00,$21,$00,$23,$00,$21,$00,$21,$00,$21,$00
   318 6D83 00 BF 00 BF 00 BF + 	.byte $00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00
   319 6D90 00 BF 00 BF 00 BF + 	.byte $00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00
   320 6D9D 00 21 00 23 00 21 + 	.byte $00,$21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00
   321 6DAA 00 BF 00 BF 00 BF + 	.byte $00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00
   322
   323 6DB7 00 BF 00 BF 00 BF + 	.byte $00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00
   324 6DC4 00 23 00 21 00 23 + 	.byte $00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$23,$00
   325 6DD1 00 BF 00 BF 00 BF + 	.byte $00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$00,$00
   326 6DDE 00 BF 00 BF 00 BF + 	.byte $00,$BF,$00,$BF,$00,$BF,$00,$BF,$00,$00,$00,$00,$00
   327 6DEB 00 BF 00 BF 00 BF + 	.byte $00,$BF,$00,$BF,$00,$BF,$00,$00,$00,$00,$00,$00,$00
   328
   329 6DF8 00 BF 00 BF 00 00 + 	.byte $00,$BF,$00,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00
   330 6E05 00 BF 00 00 00 00 + 	.byte $00,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   331 6E12 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   332
   333 				;----------------------------------------
   334 				.if .def PAL_VERSION
   335 				; colpf2
   336 6E1F 7E 7E			.byte $7E,$7E
   337 6E21 00 00 00 BA EE 9C + 	.byte $00,$00,$00,$BA,$EE, $9C,$EE,$EE,$48,$EE
   338 6E2B EE 26 EE EE EE EE + 	.byte $EE,$26,$EE,$EE,$EE, $EE,$EE,$00
   339 				; colpf1
   340 6E33 78 78			.byte $78,$78
   341 6E35 E8 E8 E8 08 E8 E8 + 	.byte $E8,$E8,$E8,$08,$E8, $E8,$E8,$E8,$E8,$E8
   342 6E3F E8 E8 E8 E8 E8 E8 + 	.byte $E8,$E8,$E8,$E8,$E8, $E8,$E8,$E8
   343
   344 				; background index and color (colpf0)
   345 6E47 03 84			.byte 3, $84
   346 				;----------------------------------------
   347 				.else
   348 				; colpf2
   349 					.byte $8E,$8E
   350 					.byte $00,$00,$00,$CA,$EE, $AC,$EE,$EE,$58,$EE
   351 					.byte $EE,$36,$EE,$EE,$EE, $EE,$EE,$00
   352 				; colpf1
   353 					.byte $88,$88
   354 					.byte $E8,$E8,$E8,$08,$E8, $E8,$E8,$E8,$E8,$E8
   355 					.byte $E8,$E8,$E8,$E8,$E8, $E8,$E8,$E8
   356
   357 				; background index and color (colpf0)
   358 					.byte 5, $94
   359 				.endif
   360 				;----------------------------------------
   361
   362 				; number of valid bricks
   363 6E49 1D				.byte 29
   364
   365 				;================================================================================
   366
   367 6E4A			lv04
   368 6E4A 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   369 6E57 00 00 00 23 00 00 + 	.byte $00,$00,$00,$23,$00,$00,$00,$00,$00,$23,$00,$00,$00
   370 6E64 00 00 00 23 00 00 + 	.byte $00,$00,$00,$23,$00,$00,$00,$00,$00,$23,$00,$00,$00
   371 6E71 00 00 00 00 23 00 + 	.byte $00,$00,$00,$00,$23,$00,$00,$00,$23,$00,$00,$00,$00
   372 6E7E 00 00 00 00 23 00 + 	.byte $00,$00,$00,$00,$23,$00,$00,$00,$23,$00,$00,$00,$00
   373
   374 6E8B 00 00 00 CA CA CA + 	.byte $00,$00,$00,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$00,$00,$00
   375 6E98 00 00 00 CA CA CA + 	.byte $00,$00,$00,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$00,$00,$00
   376 6EA5 00 00 CA CA 23 CA + 	.byte $00,$00,$CA,$CA,$23,$CA,$CA,$CA,$23,$CA,$CA,$00,$00
   377 6EB2 00 00 CA CA 23 CA + 	.byte $00,$00,$CA,$CA,$23,$CA,$CA,$CA,$23,$CA,$CA,$00,$00
   378 6EBF 00 CA CA CA CA CA + 	.byte $00,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$00
   379
   380 6ECC 00 CA CA CA CA CA + 	.byte $00,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$00
   381 6ED9 00 CA CA CA CA CA + 	.byte $00,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$00
   382 6EE6 00 CA 00 CA CA CA + 	.byte $00,$CA,$00,$CA,$CA,$CA,$CA,$CA,$CA,$CA,$00,$CA,$00
   383 6EF3 00 CA 00 CA 00 00 + 	.byte $00,$CA,$00,$CA,$00,$00,$00,$00,$00,$CA,$00,$CA,$00
   384 6F00 00 CA 00 CA 00 00 + 	.byte $00,$CA,$00,$CA,$00,$00,$00,$00,$00,$CA,$00,$CA,$00
   385
   386 6F0D 00 00 00 00 CA CA + 	.byte $00,$00,$00,$00,$CA,$CA,$00,$CA,$CA,$00,$00,$00,$00
   387 6F1A 00 00 00 00 CA CA + 	.byte $00,$00,$00,$00,$CA,$CA,$00,$CA,$CA,$00,$00,$00,$00
   388 6F27 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   389
   390 				;----------------------------------------
   391 				.if .def PAL_VERSION
   392 				; colpf2
   393 6F34 7E 7E			.byte $7E,$7E
   394 6F36 00 EE EE EE EE 00 + 	.byte $00,$EE,$EE,$EE,$EE, $00,$00,$26,$26,$26
   395 6F40 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00, $00,$00,$00
   396 				; colpf1
   397 6F48 78 78			.byte $78,$78
   398 6F4A 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
   399 6F54 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08
   400
   401 				; background index and color (colpf0)
   402 6F5C 05 84			.byte 5, $84
   403 				;----------------------------------------
   404 				.else
   405 				; colpf2
   406 					.byte $8E,$8E
   407 					.byte $00,$1E,$1E,$1E,$1E, $00,$00,$36,$36,$36
   408 					.byte $00,$00,$00,$00,$00, $00,$00,$00
   409 				; colpf1
   410 					.byte $88,$88
   411 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
   412 					.byte $08,$08,$08,$08,$08, $08,$08,$08
   413
   414 				; background index and color (colpf0)
   415 					.byte 5, $94
   416 				.endif
   417 				;----------------------------------------
   418
   419 				; number of valid bricks
   420 6F5E 62				.byte 98
   421
   422 				;================================================================================
   423 				/*
   424 				lv05
   425 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   426 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   427 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   428 					.byte $00,$00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$00,$00
   429 					.byte $00,$CF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$CF,$00
   430
   431 					.byte $00,$CF,$CF,$00,$CF,$00,$00,$00,$CF,$00,$CF,$CF,$00
   432 					.byte $00,$00,$00,$00,$00,$00,$23,$00,$00,$00,$00,$00,$00
   433 					.byte $00,$CF,$00,$00,$00,$CF,$23,$CF,$00,$00,$00,$CF,$00
   434 					.byte $00,$00,$00,$CF,$00,$00,$23,$00,$00,$CF,$00,$00,$00
   435 					.byte $00,$00,$00,$00,$00,$00,$23,$00,$00,$00,$00,$00,$00
   436
   437 					.byte $00,$00,$00,$CF,$00,$00,$23,$00,$00,$CF,$00,$00,$00
   438 					.byte $00,$CF,$00,$00,$00,$CF,$23,$CF,$00,$00,$00,$CF,$00
   439 					.byte $00,$00,$00,$00,$00,$00,$23,$00,$00,$00,$00,$00,$00
   440 					.byte $00,$CF,$CF,$00,$CF,$00,$00,$00,$CF,$00,$CF,$CF,$00
   441 					.byte $00,$CF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$CF,$00
   442
   443 					.byte $00,$00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$00,$00
   444 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   445 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   446
   447 				;----------------------------------------
   448 				.if .def PAL_VERSION
   449 				; colpf2
   450 					.byte $2E,$2E
   451 					.byte $00,$00,$00,$00,$00, $00,$0E,$1A,$9C,$BA
   452 					.byte $26,$76,$48,$00,$00, $00,$00,$00
   453 				; colpf1
   454 					.byte $28,$28
   455 					.byte $E8,$E8,$E8,$E8,$E8, $E8,$E8,$E8,$E8,$E8
   456 					.byte $E8,$E8,$E8,$E8,$E8, $E8,$E8,$E8
   457
   458 				; background index and color (colpf0)
   459 					.byte 2, $24
   460 				;----------------------------------------
   461 				.else
   462 				; colpf2
   463 					.byte $3E,$3E
   464 					.byte $00,$00,$00,$00,$00, $00,$0E,$2A,$AC,$CA
   465 					.byte $36,$86,$58,$00,$00, $00,$00,$00
   466 				; colpf1
   467 					.byte $38,$38
   468 					.byte $E8,$E8,$E8,$E8,$E8, $E8,$E8,$E8,$E8,$E8
   469 					.byte $E8,$E8,$E8,$E8,$E8, $E8,$E8,$E8
   470
   471 				; background index and color (colpf0)
   472 					.byte 2, $34
   473 				.endif
   474 				;----------------------------------------
   475
   476 				; number of valid bricks
   477 					.byte 7
   478 				*/
   478
   479 				;================================================================================
   480
   481 6F5F			lv06
   482 6F5F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   483 6F6C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   484 6F79 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   485 6F86 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   486 6F93 00 21 21 21 00 11 + 	.byte $00,$21,$21,$21,$00,$11,$11,$11,$00,$21,$21,$21,$00
   487
   488 6FA0 00 21 21 21 00 11 + 	.byte $00,$21,$21,$21,$00,$11,$11,$11,$00,$21,$21,$21,$00
   489 6FAD 00 21 21 21 00 11 + 	.byte $00,$21,$21,$21,$00,$11,$13,$11,$00,$21,$21,$21,$00
   490 6FBA 00 21 21 21 00 11 + 	.byte $00,$21,$21,$21,$00,$11,$11,$11,$00,$21,$21,$21,$00
   491 6FC7 00 21 23 21 00 11 + 	.byte $00,$21,$23,$21,$00,$11,$11,$11,$00,$21,$23,$21,$00
   492 6FD4 00 21 21 21 00 11 + 	.byte $00,$21,$21,$21,$00,$11,$11,$11,$00,$21,$21,$21,$00
   493
   494 6FE1 00 21 21 21 00 11 + 	.byte $00,$21,$21,$21,$00,$11,$11,$11,$00,$21,$21,$21,$00
   495 6FEE 00 21 23 21 00 11 + 	.byte $00,$21,$23,$21,$00,$11,$11,$11,$00,$21,$23,$21,$00
   496 6FFB 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   497 7008 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   498 7015 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   499
   500 7022 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   501 702F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   502 703C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   503
   504 				;----------------------------------------
   505 				.if .def PAL_VERSION
   506 				; colpf2
   507 7049 7E 7E			.byte $7E,$7E
   508 704B 00 00 00 00 EE 48 + 	.byte $00,$00,$00,$00,$EE, $48,$88,$26,$BA,$9C
   509 7055 1A 0E 00 00 00 00 + 	.byte $1A,$0E,$00,$00,$00, $00,$00,$00
   510 				; colpf1
   511 705D 78 78			.byte $78,$78
   512 705F 08 08 08 08 0E 1A + 	.byte $08,$08,$08,$08,$0E, $1A,$9C,$BA,$26,$88
   513 7069 48 EE 08 08 08 08 + 	.byte $48,$EE,$08,$08,$08, $08,$08,$08
   514
   515 				; background index and color (colpf0)
   516 7071 05 84			.byte 5, $84
   517 				;----------------------------------------
   518 				.else
   519 				; colpf2
   520 					.byte $8E,$8E
   521 					.byte $00,$00,$00,$00,$1E, $58,$98,$36,$CA,$AC
   522 					.byte $2A,$0E,$00,$00,$00, $00,$00,$00
   523 				; colpf1
   524 					.byte $88,$88
   525 					.byte $08,$08,$08,$08,$0E, $2A,$AC,$CA,$36,$98
   526 					.byte $58,$1E,$08,$08,$08, $08,$08,$08
   527
   528 				; background index and color (colpf0)
   529 					.byte 5, $94
   530 				.endif
   531 				;----------------------------------------
   532
   533 				; number of valid bricks
   534 7073 48				.byte 72
   535
   536 				;================================================================================
   537
   538 7074			lv07
   539 7074 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   540 7081 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   541 708E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   542 709B 23 21 21 21 21 21 + 	.byte $23,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
   543 70A8 DF 00 00 00 00 00 + 	.byte $DF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DF
   544
   545 70B5 23 21 21 21 21 21 + 	.byte $23,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$23
   546 70C2 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   547 70CF 23 EB EB EB EB EB + 	.byte $23,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$23
   548 70DC DF 00 00 00 00 00 + 	.byte $DF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DF
   549 70E9 23 21 21 21 21 21 + 	.byte $23,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$23
   550
   551 70F6 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   552 7103 23 EB EB EB EB EB + 	.byte $23,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$23
   553 7110 DF 00 00 00 00 00 + 	.byte $DF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DF
   554 711D 23 21 21 21 21 21 + 	.byte $23,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$23
   555 712A 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   556
   557 7137 23 21 21 21 21 21 + 	.byte $23,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
   558 7144 DF 00 00 00 00 00 + 	.byte $DF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DF
   559 7151 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   560
   561 				;----------------------------------------
   562 				.if .def PAL_VERSION
   563 				; colpf2
   564 715E 9E 9E			.byte $9E,$9E
   565 7160 00 00 00 88 EE 88 + 	.byte $00,$00,$00,$88,$EE, $88,$00,$1A,$EE,$0E
   566 716A 00 9C EE 26 00 26 + 	.byte $00,$9C,$EE,$26,$00, $26,$EE,$00
   567 				; colpf1
   568 7172 98 98			.byte $98,$98
   569 7174 08 08 08 08 1A 08 + 	.byte $08,$08,$08,$08,$1A, $08,$08,$08,$1A,$08
   570 717E 08 08 1A 08 08 08 + 	.byte $08,$08,$1A,$08,$08, $08,$1A,$08
   571
   572 				; background index and color (colpf0)
   573 7186 05 94			.byte 5, $94
   574 				;----------------------------------------
   575 				.else
   576 				; colpf2
   577 					.byte $AE,$AE
   578 					.byte $00,$00,$00,$98,$1E, $98,$00,$2A,$1E,$0E
   579 					.byte $00,$AC,$1E,$36,$00, $36,$1E,$00
   580 				; colpf1
   581 					.byte $A8,$A8
   582 					.byte $08,$08,$08,$08,$2A, $08,$08,$08,$2A,$08
   583 					.byte $08,$08,$2A,$08,$08, $08,$2A,$08
   584
   585 				; background index and color (colpf0)
   586 					.byte 5, $A4
   587 				.endif
   588 				;----------------------------------------
   589
   590 				; number of valid bricks
   591 7188 5B				.byte 91
   592
   593 				;================================================================================
   594
   595 7189			lv08
   596 7189 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   597 7196 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   598 71A3 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   599 71B0 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$CF,$00,$00,$00,$00,$00,$00
   600 71BD 00 00 00 00 23 23 + 	.byte $00,$00,$00,$00,$23,$23,$00,$23,$23,$00,$00,$00,$00
   601
   602 71CA 00 00 23 23 00 00 + 	.byte $00,$00,$23,$23,$00,$00,$CF,$00,$00,$23,$23,$00,$00
   603 71D7 13 13 00 00 23 23 + 	.byte $13,$13,$00,$00,$23,$23,$00,$23,$23,$00,$00,$13,$13
   604 71E4 00 00 23 23 00 00 + 	.byte $00,$00,$23,$23,$00,$00,$CF,$00,$00,$23,$23,$00,$00
   605 71F1 13 13 00 00 23 23 + 	.byte $13,$13,$00,$00,$23,$23,$00,$23,$23,$00,$00,$13,$13
   606 71FE 00 00 23 23 00 00 + 	.byte $00,$00,$23,$23,$00,$00,$CF,$00,$00,$23,$23,$00,$00
   607
   608 720B 13 13 00 00 23 23 + 	.byte $13,$13,$00,$00,$23,$23,$00,$23,$23,$00,$00,$13,$13
   609 7218 00 00 23 23 00 00 + 	.byte $00,$00,$23,$23,$00,$00,$CF,$00,$00,$23,$23,$00,$00
   610 7225 13 13 00 00 23 23 + 	.byte $13,$13,$00,$00,$23,$23,$00,$23,$23,$00,$00,$13,$13
   611 7232 00 00 23 23 00 00 + 	.byte $00,$00,$23,$23,$00,$00,$CF,$00,$00,$23,$23,$00,$00
   612 723F 13 13 00 00 23 23 + 	.byte $13,$13,$00,$00,$23,$23,$00,$23,$23,$00,$00,$13,$13
   613
   614 724C 00 00 23 23 00 00 + 	.byte $00,$00,$23,$23,$00,$00,$00,$00,$00,$23,$23,$00,$00
   615 7259 23 23 00 00 00 00 + 	.byte $23,$23,$00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$23
   616 7266 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   617
   618 				;----------------------------------------
   619 				.if .def PAL_VERSION
   620 				; colpf2
   621 7273 3E 3E			.byte $3E,$3E
   622 7275 00 00 00 00 0E 0E + 	.byte $00,$00,$00,$00,$0E, $0E,$1A,$1A,$EE,$EE
   623 727F BA BA 26 26 76 76 + 	.byte $BA,$BA,$26,$26,$76, $76,$76,$00
   624 				; colpf1
   625 7287 38 38			.byte $38,$38
   626 7289 08 08 08 E8 08 E8 + 	.byte $08,$08,$08,$E8,$08, $E8,$0E,$E8,$1A,$E8
   627 7293 EE E8 BA E8 26 08 + 	.byte $EE,$E8,$BA,$E8,$26, $08,$08,$08
   628
   629 				; background index and color (colpf0)
   630 729B 05 34			.byte 5, $34
   631 				;----------------------------------------
   632 				.else
   633 				; colpf2
   634 					.byte $4E,$4E
   635 					.byte $00,$00,$00,$00,$0E, $0E,$2A,$2A,$1E,$1E
   636 					.byte $CA,$CA,$36,$36,$86, $86,$86,$00
   637 				; colpf1
   638 					.byte $48,$48
   639 					.byte $08,$08,$08,$E8,$08, $E8,$0E,$E8,$2A,$E8
   640 					.byte $1E,$E8,$CA,$E8,$36, $08,$08,$08
   641
   642 				; background index and color (colpf0)
   643 					.byte 5, $44
   644 				.endif
   645 				;----------------------------------------
   646
   647 				; number of valid bricks
   648 729D 48				.byte 72
   649
   650 				;================================================================================
   651
   652 729E			lv08b
   653 729E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   654 72AB 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   655 72B8 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   656 72C5 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$CF,$00,$00,$00,$00,$00,$00
   657 72D2 00 00 00 00 23 21 + 	.byte $00,$00,$00,$00,$23,$21,$00,$23,$21,$00,$00,$00,$00
   658
   659 72DF 00 00 23 21 00 00 + 	.byte $00,$00,$23,$21,$00,$00,$CF,$00,$00,$23,$21,$00,$00
   660 72EC 13 11 00 00 21 21 + 	.byte $13,$11,$00,$00,$21,$21,$00,$21,$21,$00,$00,$13,$11
   661 72F9 00 00 21 21 00 00 + 	.byte $00,$00,$21,$21,$00,$00,$CF,$00,$00,$21,$21,$00,$00
   662 7306 11 11 00 00 21 23 + 	.byte $11,$11,$00,$00,$21,$23,$00,$21,$23,$00,$00,$11,$11
   663 7313 00 00 21 23 00 00 + 	.byte $00,$00,$21,$23,$00,$00,$CF,$00,$00,$21,$23,$00,$00
   664
   665 7320 11 13 00 00 21 21 + 	.byte $11,$13,$00,$00,$21,$21,$00,$21,$21,$00,$00,$11,$13
   666 732D 00 00 21 21 00 00 + 	.byte $00,$00,$21,$21,$00,$00,$CF,$00,$00,$21,$21,$00,$00
   667 733A 11 11 00 00 23 21 + 	.byte $11,$11,$00,$00,$23,$21,$00,$23,$21,$00,$00,$11,$11
   668 7347 00 00 23 21 00 00 + 	.byte $00,$00,$23,$21,$00,$00,$CF,$00,$00,$23,$21,$00,$00
   669 7354 13 11 00 00 23 23 + 	.byte $13,$11,$00,$00,$23,$23,$00,$23,$23,$00,$00,$13,$11
   670
   671 7361 00 00 23 23 00 00 + 	.byte $00,$00,$23,$23,$00,$00,$00,$00,$00,$23,$23,$00,$00
   672 736E 23 23 00 00 00 00 + 	.byte $23,$23,$00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$23
   673 737B 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   674
   675 				;----------------------------------------
   676 				.if .def PAL_VERSION
   677 				; colpf2
   678 7388 3E 3E			.byte $3E,$3E
   679 738A 00 00 00 00 0E 0E + 	.byte $00,$00,$00,$00,$0E, $0E,$1A,$1A,$EE,$EE
   680 7394 BA BA 26 26 88 88 + 	.byte $BA,$BA,$26,$26,$88, $88,$88,$00
   681 				; colpf1
   682 739C 38 38			.byte $38,$38
   683 739E 08 08 08 E8 08 E8 + 	.byte $08,$08,$08,$E8,$08, $E8,$0E,$E8,$1A,$E8
   684 73A8 EE E8 BA E8 26 08 + 	.byte $EE,$E8,$BA,$E8,$26, $08,$08,$08
   685
   686 				; background index and color (colpf0)
   687 73B0 05 34			.byte 5, $34
   688 				;----------------------------------------
   689 				.else
   690 				; colpf2
   691 					.byte $4E,$4E
   692 					.byte $00,$00,$00,$00,$0E, $0E,$2A,$2A,$1E,$1E
   693 					.byte $CA,$CA,$36,$36,$98, $98,$98,$00
   694 				; colpf1
   695 					.byte $48,$48
   696 					.byte $08,$08,$08,$E8,$08, $E8,$0E,$E8,$2A,$E8
   697 					.byte $1E,$E8,$CA,$E8,$36, $08,$08,$08
   698
   699 				; background index and color (colpf0)
   700 					.byte 5, $44
   701 				.endif
   702 				;----------------------------------------
   703
   704 				; number of valid bricks
   705 73B2 48				.byte 72
   706
   707 				;================================================================================
   708
   709 73B3			lv09
   710 73B3 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   711 73C0 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   712 73CD 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   713 73DA 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   714 73E7 21 21 21 21 21 21 + 	.byte $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
   715
   716 73F4 23 23 23 23 23 23 + 	.byte $23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23
   717 7401 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   718 740E 21 21 CF 00 CF 23 + 	.byte $21,$21,$CF,$00,$CF,$23,$21,$23,$CF,$00,$CF,$23,$21
   719 741B 21 21 CF 00 CF 23 + 	.byte $21,$21,$CF,$00,$CF,$23,$23,$23,$CF,$00,$CF,$23,$21
   720 7428 21 21 CF 00 CF 23 + 	.byte $21,$21,$CF,$00,$CF,$23,$23,$23,$CF,$00,$CF,$23,$21
   721
   722 7435 21 21 CF 00 CF 23 + 	.byte $21,$21,$CF,$00,$CF,$23,$21,$23,$CF,$00,$CF,$23,$21
   723 7442 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   724 744F 21 21 21 21 21 21 + 	.byte $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
   725 745C 21 21 21 21 21 21 + 	.byte $21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21
   726 7469 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   727
   728 7476 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   729 7483 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   730 7490 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   731
   732 				;----------------------------------------
   733 				.if .def PAL_VERSION
   734 				; colpf2
   735 749D 9E 9E			.byte $9E,$9E
   736 749F 00 00 00 00 0E 0E + 	.byte $00,$00,$00,$00,$0E, $0E,$00,$26,$26,$26
   737 74A9 26 00 EE EE 00 00 + 	.byte $26,$00,$EE,$EE,$00, $00,$00,$00
   738 				; colpf1
   739 74B1 98 98			.byte $98,$98
   740 74B3 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$E8,$E8,$E8
   741 74BD E8 08 08 08 08 08 + 	.byte $E8,$08,$08,$08,$08, $08,$08,$08
   742
   743 				; background index and color (colpf0)
   744 74C5 02 94			.byte 2, $94
   745 				;----------------------------------------
   746 				.else
   747 				; colpf2
   748 					.byte $AE,$AE
   749 					.byte $00,$00,$00,$00,$0E, $0E,$00,$36,$36,$36
   750 					.byte $36,$00,$1E,$1E,$00, $00,$00,$00
   751 				; colpf1
   752 					.byte $A8,$A8
   753 					.byte $08,$08,$08,$08,$08, $08,$08,$E8,$E8,$E8
   754 					.byte $E8,$08,$08,$08,$08, $08,$08,$08
   755
   756 				; background index and color (colpf0)
   757 					.byte 2, $A4
   758 				.endif
   759 				;----------------------------------------
   760
   761 				; number of valid bricks
   762 74C7 50				.byte 80
   763
   764 				;================================================================================
   765
   766 74C8			lv10
   767 74C8 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   768 74D5 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   769 74E2 00 00 00 00 31 33 + 	.byte $00,$00,$00,$00,$31,$33,$31,$33,$31,$00,$00,$00,$00
   770 74EF 00 00 00 00 DF DF + 	.byte $00,$00,$00,$00,$DF,$DF,$DF,$DF,$DF,$00,$00,$00,$00
   771 74FC 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   772
   773 7509 00 00 31 33 31 31 + 	.byte $00,$00,$31,$33,$31,$31,$31,$33,$31,$31,$31,$00,$00
   774 7516 00 00 DF DF DF DF + 	.byte $00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00
   775 7523 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   776 7530 00 31 31 31 33 31 + 	.byte $00,$31,$31,$31,$33,$31,$31,$31,$31,$31,$33,$31,$00
   777 753D 00 DF DF DF DF DF + 	.byte $00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00
   778
   779 754A 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   780 7557 00 00 31 31 33 31 + 	.byte $00,$00,$31,$31,$33,$31,$31,$31,$33,$31,$31,$00,$00
   781 7564 00 00 DF DF DF DF + 	.byte $00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00
   782 7571 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   783 757E 00 00 00 31 31 31 + 	.byte $00,$00,$00,$31,$31,$31,$33,$31,$31,$31,$00,$00,$00
   784
   785 758B 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
   786 7598 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   787 75A5 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   788
   789 				;----------------------------------------
   790 				.if .def PAL_VERSION
   791 				; colpf2
   792 75B2 2E 2E			.byte $2E,$2E
   793 75B4 00 00 00 EE 00 00 + 	.byte $00,$00,$00,$EE,$00, $00,$EE,$00,$00,$EE
   794 75BE 00 00 EE 00 00 EE + 	.byte $00,$00,$EE,$00,$00,$EE, $00,$00
   795 				; colpf1
   796 75C6 28 28			.byte $28,$28
   797 75C8 08 08 08 1A 08 08 + 	.byte $08,$08,$08,$1A,$08, $08,$1A,$08,$08,$1A
   798 75D2 08 08 1A 08 08 1A + 	.byte $08,$08,$1A,$08,$08, $1A,$08,$08
   799
   800 				; background index and color (colpf0)
   801 75DA 05 24			.byte 5, $24
   802 				;----------------------------------------
   803 				.else
   804 				; colpf2
   805 					.byte $3E,$3E
   806 					.byte $00,$00,$00,$1E,$00, $00,$1E,$00,$00,$1E
   807 					.byte $00,$00,$1E,$00,$00,$1E, $00,$00
   808 				; colpf1
   809 					.byte $38,$38
   810 					.byte $08,$08,$08,$2A,$08, $08,$2A,$08,$08,$2A
   811 					.byte $08,$08,$2A,$08,$08, $2A,$08,$08
   812
   813 				; background index and color (colpf0)
   814 					.byte 5, $34
   815 				.endif
   816 				;----------------------------------------
   817
   818 				; number of valid bricks
   819 75DC 29				.byte 41
   820
   821 				;================================================================================
   822
   823 75DD			lv10b
   824 75DD 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   825 75EA 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   826 75F7 00 00 00 00 21 23 + 	.byte $00,$00,$00,$00,$21,$23,$21,$23,$21,$00,$00,$00,$00
   827 7604 00 00 00 00 DF DF + 	.byte $00,$00,$00,$00,$DF,$DF,$DF,$DF,$DF,$00,$00,$00,$00
   828 7611 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   829
   830 761E 00 00 21 23 21 21 + 	.byte $00,$00,$21,$23,$21,$21,$21,$23,$21,$21,$21,$00,$00
   831 762B 00 00 EA EA EA EA + 	.byte $00,$00,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$00,$00
   832 7638 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   833 7645 00 21 21 21 23 21 + 	.byte $00,$21,$21,$21,$23,$21,$21,$21,$21,$21,$23,$21,$00
   834 7652 00 EA EA EA EA EA + 	.byte $00,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$00
   835
   836 765F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   837 766C 00 00 21 21 23 21 + 	.byte $00,$00,$21,$21,$23,$21,$21,$21,$23,$21,$21,$00,$00
   838 7679 00 00 EA EA EA EA + 	.byte $00,$00,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$00,$00
   839 7686 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   840 7693 00 00 00 21 21 21 + 	.byte $00,$00,$00,$21,$21,$21,$23,$21,$21,$21,$00,$00,$00
   841
   842 76A0 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
   843 76AD 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   844 76BA 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   845
   846 				;----------------------------------------
   847 				.if .def PAL_VERSION
   848 				; colpf2
   849 76C7 2E 2E			.byte $2E,$2E
   850 76C9 00 00 9C EE 00 88 + 	.byte $00,$00,$9C,$EE,$00, $88,$EE,$00,$9C,$EE
   851 76D3 00 88 EE 00 9C EE + 	.byte $00,$88,$EE,$00,$9C, $EE,$00,$00
   852 				; colpf1
   853 76DB 28 28			.byte $28,$28
   854 76DD 08 08 08 1A 08 08 + 	.byte $08,$08,$08,$1A,$08, $08,$08,$08,$08,$08
   855 76E7 08 08 08 08 08 1A + 	.byte $08,$08,$08,$08,$08, $1A,$08,$08
   856
   857 				; background index and color (colpf0)
   858 76EF 05 24			.byte 5, $24
   859 				;----------------------------------------
   860 				.else
   861 				; colpf2
   862 					.byte $3E,$3E
   863 					.byte $00,$00,$AC,$1E,$00, $98,$1E,$00,$AC,$1E
   864 					.byte $00,$98,$1E,$00,$AC, $1E,$00,$00
   865 				; colpf1
   866 					.byte $38,$38
   867 					.byte $08,$08,$08,$2A,$08, $08,$08,$08,$08,$08
   868 					.byte $08,$08,$08,$08,$08, $2A,$08,$08
   869
   870 				; background index and color (colpf0)
   871 					.byte 5, $34
   872 				.endif
   873 				;----------------------------------------
   874
   875 				; number of valid bricks
   876 76F1 46				.byte 70
   877
   878 				;================================================================================
   879 				/*
   880 				lv11
   881 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   882 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   883 					.byte $00,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$00
   884 					.byte $00,$EF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EF,$00
   885 					.byte $00,$EF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EF,$00
   886
   887 					.byte $00,$EF,$00,$00,$00,$00,$21,$00,$00,$00,$00,$EF,$00
   888 					.byte $00,$EF,$00,$00,$00,$21,$11,$21,$00,$00,$00,$EF,$00
   889 					.byte $00,$EF,$00,$00,$21,$11,$31,$11,$21,$00,$00,$EF,$00
   890 					.byte $00,$EF,$00,$21,$11,$31,$11,$31,$11,$21,$00,$EF,$00
   891 					.byte $00,$00,$21,$31,$31,$21,$EC,$21,$31,$31,$21,$00,$00
   892
   893 					.byte $00,$EF,$00,$21,$11,$31,$11,$31,$11,$21,$00,$EF,$00
   894 					.byte $00,$EF,$00,$00,$21,$11,$31,$11,$21,$00,$00,$EF,$00
   895 					.byte $00,$EF,$00,$00,$00,$21,$11,$21,$00,$00,$00,$EF,$00
   896 					.byte $00,$EF,$00,$00,$00,$00,$21,$00,$00,$00,$00,$EF,$00
   897 					.byte $00,$EF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EF,$00
   898
   899 					.byte $00,$EF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EF,$00
   900 					.byte $00,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$00
   901 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   902
   903 				;----------------------------------------
   904 				.if .def PAL_VERSION
   905 				; colpf2
   906 					.byte $7E,$7E
   907 					.byte $00,$00,$00,$00,$00, $36,$36,$36,$36,$36
   908 					.byte $36,$36,$36,$36,$00, $00,$00,$00
   909 				; colpf1
   910 					.byte $78,$78
   911 					.byte $08,$08,$2A,$2A,$2A, $2A,$2A,$2A,$2A,$08
   912 					.byte $2A,$2A,$2A,$2A,$2A, $2A,$2A,$08
   913
   914 				; background index and color (colpf0)
   915 					.byte 5, $84
   916 				;----------------------------------------
   917 				.else
   918 				; colpf2
   919 					.byte $8E,$8E
   920 					.byte $00,$00,$00,$00,$00, $36,$36,$36,$36,$36
   921 					.byte $36,$36,$36,$36,$00, $00,$00,$00
   922 				; colpf1
   923 					.byte $88,$88
   924 					.byte $08,$08,$2A,$2A,$2A, $2A,$2A,$2A,$2A,$08
   925 					.byte $2A,$2A,$2A,$2A,$2A, $2A,$2A,$08
   926
   927 				; background index and color (colpf0)
   928 					.byte 5, $94
   929 				.endif
   930 				;----------------------------------------
   931
   932 				; number of valid bricks
   933 					.byte 41
   934 				*/
   934
   935 				;================================================================================
   936 				/*
   937 				lv12
   938 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   939 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   940 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   941 					.byte $21,$21,$21,$21,$21,$21,$21,$23,$21,$21,$21,$21,$21
   942 					.byte $31,$DF,$DF,$DF,$DF,$31,$DF,$31,$DF,$DF,$DF,$DF,$31
   943
   944 					.byte $31,$DF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DF,$31
   945 					.byte $31,$DF,$21,$00,$00,$00,$00,$00,$00,$00,$21,$DF,$33
   946 					.byte $31,$DF,$21,$23,$00,$00,$00,$00,$00,$23,$21,$DF,$31
   947 					.byte $31,$DF,$33,$23,$23,$00,$00,$00,$23,$23,$33,$DF,$31
   948 					.byte $00,$31,$DF,$33,$23,$23,$00,$23,$23,$33,$DF,$31,$00
   949
   950 					.byte $00,$00,$31,$DF,$33,$23,$21,$23,$33,$DF,$31,$00,$00
   951 					.byte $00,$00,$00,$33,$DF,$33,$21,$33,$DF,$31,$00,$00,$00
   952 					.byte $00,$00,$00,$00,$31,$DF,$31,$DF,$31,$00,$00,$00,$00
   953 					.byte $00,$00,$00,$00,$00,$31,$23,$31,$00,$00,$00,$00,$00
   954 					.byte $00,$00,$00,$00,$00,$00,$31,$00,$00,$00,$00,$00,$00
   955
   956 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   957 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   958 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   959
   960 				;----------------------------------------
   961 				.if .def PAL_VERSION
   962 				; colpf2
   963 					.byte $2E,$2E
   964 					.byte $00,$00,$00,$BA,$EE, $EE,$EE,$EE,$EE,$EE
   965 					.byte $EE,$EE,$EE,$BA,$EE, $00,$00,$00
   966 				; colpf1
   967 					.byte $28,$28
   968 					.byte $08,$08,$08,$08,$1A, $1A,$1A,$1A,$1A,$1A
   969 					.byte $1A,$1A,$1A,$1A,$1A, $08,$08,$08
   970
   971 				; background index and color (colpf0)
   972 					.byte 3, $24
   973 				;----------------------------------------
   974 				.else
   975 				; colpf2
   976 					.byte $3E,$3E
   977 					.byte $00,$00,$00,$CA,$1E, $1E,$1E,$1E,$1E,$1E
   978 					.byte $1E,$1E,$1E,$CA,$1E, $00,$00,$00
   979 				; colpf1
   980 					.byte $38,$38
   981 					.byte $08,$08,$08,$08,$2A, $2A,$2A,$2A,$2A,$2A
   982 					.byte $2A,$2A,$2A,$2A,$2A, $08,$08,$08
   983
   984 				; background index and color (colpf0)
   985 					.byte 3, $34
   986 				.endif
   987 				;----------------------------------------
   988
   989 				; number of valid bricks
   990 					.byte 64
   991 				*/
   991
   992 				;================================================================================
   993
   994 76F2			lv13
   995 76F2 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   996 76FF 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   997 770C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   998 7719 00 00 CF 00 CF 00 + 	.byte $00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$00
   999 7726 00 00 CF 00 CF 00 + 	.byte $00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$00
  1000
  1001 7733 00 00 CF 00 CF 00 + 	.byte $00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$23,$21,$00,$00
  1002 7740 00 00 CF 00 CF 00 + 	.byte $00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$00
  1003 774D 00 00 CF 00 CF 00 + 	.byte $00,$00,$CF,$00,$CF,$00,$CF,$23,$21,$21,$21,$00,$00
  1004 775A 00 00 CF 00 CF 00 + 	.byte $00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$00
  1005 7767 00 00 CF 00 CF 23 + 	.byte $00,$00,$CF,$00,$CF,$23,$21,$21,$21,$21,$21,$00,$00
  1006
  1007 7774 00 00 CF 00 CF 00 + 	.byte $00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$00
  1008 7781 00 00 CF 23 21 21 + 	.byte $00,$00,$CF,$23,$21,$21,$21,$21,$21,$21,$21,$00,$00
  1009 778E 00 00 CF 00 CF 00 + 	.byte $00,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$CF,$00,$00
  1010 779B 00 00 23 21 21 21 + 	.byte $00,$00,$23,$21,$21,$21,$21,$21,$21,$21,$21,$00,$00
  1011 77A8 00 00 CC CC CC CC + 	.byte $00,$00,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$00,$00
  1012
  1013 77B5 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1014 77C2 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1015 77CF 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1016
  1017 				;----------------------------------------
  1018 				.if .def PAL_VERSION
  1019 				; colpf2
  1020 77DC 2E 2E			.byte $2E,$2E
  1021 77DE 00 00 00 00 00 88 + 	.byte $00,$00,$00,$00,$00, $88,$00,$BA,$00,$26
  1022 77E8 00 48 00 EE 00 00 + 	.byte $00,$48,$00,$EE,$00, $00,$00,$00
  1023 				; colpf1
  1024 77F0 28 28			.byte $28,$28
  1025 77F2 08 08 08 E8 E8 E8 + 	.byte $08,$08,$08,$E8,$E8, $E8,$E8,$E8,$E8,$E8
  1026 77FC E8 E8 E8 08 08 08 + 	.byte $E8,$E8,$E8,$08,$08, $08,$08,$08
  1027
  1028 				; background index and color (colpf0)
  1029 7804 04 24			.byte 4, $24
  1030 				;----------------------------------------
  1031 				.else
  1032 				; colpf2
  1033 					.byte $3E,$3E
  1034 					.byte $00,$00,$00,$00,$00, $98,$00,$CA,$00,$36
  1035 					.byte $00,$58,$00,$1E,$00, $00,$00,$00
  1036 				; colpf1
  1037 					.byte $38,$38
  1038 					.byte $08,$08,$08,$E8,$E8, $E8,$E8,$E8,$E8,$E8
  1039 					.byte $E8,$E8,$E8,$08,$08, $08,$08,$08
  1040
  1041 				; background index and color (colpf0)
  1042 					.byte 4, $34
  1043 				.endif
  1044 				;----------------------------------------
  1045
  1046 				; number of valid bricks
  1047 7806 26				.byte 38
  1048
  1049 				;================================================================================
  1050
  1051 7807			lv14
  1052 7807 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1053 7814 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1054 7821 EB 21 21 21 EB 00 + 	.byte $EB,$21,$21,$21,$EB,$00,$00,$00,$00,$00,$00,$00,$00
  1055 782E EB 21 21 21 EB 00 + 	.byte $EB,$21,$21,$21,$EB,$00,$00,$00,$00,$00,$00,$00,$00
  1056 783B 00 EB 23 EB 00 00 + 	.byte $00,$EB,$23,$EB,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1057
  1058 7848 00 EB 23 EB 00 00 + 	.byte $00,$EB,$23,$EB,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1059 7855 00 00 EB 00 00 00 + 	.byte $00,$00,$EB,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1060 7862 00 00 EB 00 EB 21 + 	.byte $00,$00,$EB,$00,$EB,$21,$21,$21,$EB,$00,$00,$00,$00
  1061 786F 00 00 00 00 EB 21 + 	.byte $00,$00,$00,$00,$EB,$21,$21,$21,$EB,$00,$00,$00,$00
  1062 787C 00 00 00 00 00 EB + 	.byte $00,$00,$00,$00,$00,$EB,$23,$EB,$00,$00,$00,$00,$00
  1063
  1064 7889 00 00 00 00 00 EB + 	.byte $00,$00,$00,$00,$00,$EB,$23,$EB,$00,$00,$00,$00,$00
  1065 7896 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$EB,$00,$00,$00,$00,$00,$00
  1066 78A3 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$EB,$00,$EB,$21,$21,$21,$EB
  1067 78B0 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$EB,$21,$21,$21,$EB
  1068 78BD 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$EB,$21,$EB,$00
  1069
  1070 78CA 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$EB,$23,$EB,$00
  1071 78D7 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EB,$00,$00
  1072 78E4 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EB,$00,$00
  1073
  1074 				;----------------------------------------
  1075 				.if .def PAL_VERSION
  1076 				; colpf2
  1077 78F1 2E 2E			.byte $2E,$2E
  1078 78F3 00 00 9E 9C 9C 9C + 	.byte $00,$00,$9E,$9C,$9C, $9C,$00,$EE,$EE,$EE
  1079 78FD EE 00 BE BC BA BA + 	.byte $EE,$00,$BE,$BC,$BA, $BA,$00,$00
  1080 				; colpf1
  1081 7905 28 28			.byte $28,$28
  1082 7907 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1083 7911 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08
  1084
  1085 				; background index and color (colpf0)
  1086 7919 05 24			.byte 5, $24
  1087 				;----------------------------------------
  1088 				.else
  1089 				; colpf2
  1090 					.byte $3E,$3E
  1091 					.byte $00,$00,$AE,$AC,$AC, $AC,$00,$1E,$1E,$1E
  1092 					.byte $1E,$00,$CE,$CC,$CA, $CA,$00,$00
  1093 				; colpf1
  1094 					.byte $38,$38
  1095 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1096 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1097
  1098 				; background index and color (colpf0)
  1099 					.byte 5, $34
  1100 				.endif
  1101 				;----------------------------------------
  1102
  1103 				; number of valid bricks
  1104 791B 36				.byte 54
  1105
  1106 				;================================================================================
  1107 				/*
  1108 				lv15
  1109 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1110 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1111 					.byte $00,$00,$00,$00,$00,$00,$DF,$00,$00,$00,$00,$00,$00
  1112 					.byte $00,$00,$00,$00,$00,$00,$21,$00,$00,$00,$00,$00,$00
  1113 					.byte $00,$00,$00,$00,$DF,$00,$DF,$00,$DF,$00,$00,$00,$00
  1114
  1115 					.byte $00,$00,$00,$00,$23,$00,$21,$00,$21,$00,$00,$00,$00
  1116 					.byte $00,$00,$EC,$21,$EC,$21,$EC,$21,$EC,$21,$EC,$00,$00
  1117 					.byte $00,$00,$21,$00,$21,$00,$21,$00,$23,$00,$21,$00,$00
  1118 					.byte $00,$00,$DF,$00,$DF,$00,$DF,$00,$DF,$00,$DF,$00,$00
  1119 					.byte $00,$00,$DF,$31,$DF,$33,$DF,$31,$DF,$31,$DF,$00,$00
  1120
  1121 					.byte $00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00
  1122 					.byte $00,$00,$EC,$00,$00,$00,$00,$00,$00,$00,$EC,$00,$00
  1123 					.byte $00,$00,$21,$23,$21,$23,$21,$21,$21,$21,$23,$00,$00
  1124 					.byte $00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00
  1125 					.byte $00,$00,$00,$EC,$00,$00,$00,$00,$00,$EC,$00,$00,$00
  1126
  1127 					.byte $00,$00,$00,$21,$23,$21,$21,$23,$21,$21,$00,$00,$00
  1128 					.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
  1129 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1130
  1131 				;----------------------------------------
  1132 				.if .def PAL_VERSION
  1133 				; colpf2
  1134 					.byte $2E,$2E
  1135 					.byte $00,$00,$EE,$9C,$EE, $BA,$EE,$48,$EE,$EE
  1136 					.byte $EE,$00,$BA,$EE,$00, $1A,$EE,$00
  1137 				; colpf1
  1138 					.byte $28,$28
  1139 					.byte $08,$08,$1A,$08,$1A, $08,$08,$08,$1A,$1A
  1140 					.byte $1A,$08,$08,$1A,$08, $08,$1A,$08
  1141
  1142 				; background index and color (colpf0)
  1143 					.byte 7, $24
  1144 				;----------------------------------------
  1145 				.else
  1146 				; colpf2
  1147 					.byte $3E,$3E
  1148 					.byte $00,$00,$1E,$AC,$1E, $CA,$1E,$58,$1E,$1E
  1149 					.byte $1E,$00,$CA,$1E,$00, $2A,$1E,$00
  1150 				; colpf1
  1151 					.byte $38,$38
  1152 					.byte $08,$08,$2A,$08,$2A, $08,$08,$08,$2A,$2A
  1153 					.byte $2A,$08,$08,$2A,$08, $08,$2A,$08
  1154
  1155 				; background index and color (colpf0)
  1156 					.byte 7, $34
  1157 				.endif
  1158 				;----------------------------------------
  1159
  1160 				; number of valid bricks
  1161 					.byte 37
  1162 				*/
  1162
  1163 				;================================================================================
  1164
  1165 791C			lv16
  1166 791C 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$21,$00,$00,$00,$00,$00
  1167 7929 00 00 00 00 00 23 + 	.byte $00,$00,$00,$00,$00,$23,$EF,$21,$00,$00,$00,$00,$00
  1168 7936 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$21,$00,$00,$00,$00,$00
  1169 7943 00 00 00 00 00 23 + 	.byte $00,$00,$00,$00,$00,$23,$EF,$21,$00,$00,$00,$00,$00
  1170 7950 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$21,$00,$00,$00,$00,$00
  1171
  1172 795D 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$23,$00,$00,$00,$00,$00
  1173 796A 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$21,$00,$00,$00,$00,$00
  1174 7977 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$23,$00,$00,$00,$00,$00
  1175 7984 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$21,$00,$00,$00,$00,$00
  1176 7991 00 00 00 00 00 23 + 	.byte $00,$00,$00,$00,$00,$23,$EF,$21,$00,$00,$00,$00,$00
  1177
  1178 799E 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$21,$00,$00,$00,$00,$00
  1179 79AB 00 00 00 00 00 23 + 	.byte $00,$00,$00,$00,$00,$23,$EF,$21,$00,$00,$00,$00,$00
  1180 79B8 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$21,$00,$00,$00,$00,$00
  1181 79C5 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$23,$00,$00,$00,$00,$00
  1182 79D2 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$21,$00,$00,$00,$00,$00
  1183
  1184 79DF 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$EF,$23,$00,$00,$00,$00,$00
  1185 79EC 00 00 00 00 00 EB + 	.byte $00,$00,$00,$00,$00,$EB,$EB,$EB,$00,$00,$00,$00,$00
  1186 79F9 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1187
  1188 				;----------------------------------------
  1189 				.if .def PAL_VERSION
  1190 				; colpf2
  1191 7A06 7E 7E			.byte $7E,$7E
  1192 7A08 9C 9C EE EE 48 48 + 	.byte $9C,$9C,$EE,$EE,$48, $48,$88,$88,$26,$26
  1193 7A12 BA BA 9C 9C EE EE + 	.byte $BA,$BA,$9C,$9C,$EE, $EE,$00,$00
  1194 				; colpf1
  1195 7A1A 78 78			.byte $78,$78
  1196 7A1C 1A 1A 1A 1A 1A 1A + 	.byte $1A,$1A,$1A,$1A,$1A, $1A,$1A,$1A,$1A,$1A
  1197 7A26 1A 1A 1A 1A 1A 1A + 	.byte $1A,$1A,$1A,$1A,$1A, $1A,$08,$00
  1198
  1199 				; background index and color (colpf0)
  1200 7A2E 07 84			.byte 7, $84
  1201 				;----------------------------------------
  1202 				.else
  1203 				; colpf2
  1204 					.byte $8E,$8E
  1205 					.byte $AC,$AC,$1E,$1E,$58, $58,$98,$98,$36,$36
  1206 					.byte $CA,$CA,$AC,$AC,$1E, $1E,$00,$00
  1207 				; colpf1
  1208 					.byte $88,$88
  1209 					.byte $2A,$2A,$2A,$2A,$2A, $2A,$2A,$2A,$2A,$2A
  1210 					.byte $2A,$2A,$2A,$2A,$2A, $2A,$08,$00
  1211
  1212 				; background index and color (colpf0)
  1213 					.byte 7, $94
  1214 				.endif
  1215 				;----------------------------------------
  1216
  1217 				; number of valid bricks
  1218 7A30 23				.byte 35
  1219
  1220 				;================================================================================
  1221 				/*
  1222 				lv17
  1223 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1224 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1225 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1226 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1227 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1228
  1229 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1230 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1231 					.byte $DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF
  1232 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1233 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1234
  1235 					.byte $00,$00,$ED,$00,$ED,$00,$ED,$00,$ED,$00,$ED,$00,$00
  1236 					.byte $00,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$00
  1237 					.byte $00,$00,$ED,$00,$ED,$00,$ED,$00,$ED,$00,$ED,$00,$00
  1238 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1239 					.byte $00,$ED,$00,$ED,$00,$ED,$00,$ED,$00,$ED,$00,$ED,$00
  1240
  1241 					.byte $00,$23,$00,$21,$00,$23,$00,$23,$00,$21,$00,$23,$00
  1242 					.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1243 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1244
  1245 				;----------------------------------------
  1246 				.if .def PAL_VERSION
  1247 				; colpf2
  1248 					.byte $9E,$9E
  1249 					.byte $00,$00,$00,$00,$00, $00,$00,$EE,$00,$00
  1250 					.byte $00,$26,$00,$00,$00, $76,$00,$00
  1251 				; colpf1
  1252 					.byte $98,$98
  1253 					.byte $08,$08,$08,$08,$08, $08,$08,$1A,$08,$08
  1254 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1255
  1256 				; background index and color (colpf0)
  1257 					.byte 5, $94
  1258 				;----------------------------------------
  1259 				.else
  1260 				; colpf2
  1261 					.byte $AE,$AE
  1262 					.byte $00,$00,$00,$00,$00, $00,$00,$1E,$00,$00
  1263 					.byte $00,$36,$00,$00,$00, $86,$00,$00
  1264 				; colpf1
  1265 					.byte $A8,$A8
  1266 					.byte $08,$08,$08,$08,$08, $08,$08,$2A,$08,$08
  1267 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1268
  1269 				; background index and color (colpf0)
  1270 					.byte 5, $A4
  1271 				.endif
  1272 				;----------------------------------------
  1273
  1274 				; number of valid bricks
  1275 					.byte 27
  1276 				*/
  1276
  1277 				;================================================================================
  1278
  1279 7A31			lv18
  1280 7A31 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1281 7A3E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1282 7A4B 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1283 7A58 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1284 7A65 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$DF,$00,$00,$00,$00,$00,$00
  1285
  1286 7A72 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$ED,$21,$00,$00,$00,$00,$00
  1287 7A7F 00 00 00 00 21 13 + 	.byte $00,$00,$00,$00,$21,$13,$21,$13,$21,$00,$00,$00,$00
  1288 7A8C 00 00 00 21 21 11 + 	.byte $00,$00,$00,$21,$21,$11,$23,$11,$21,$21,$00,$00,$00
  1289 7A99 00 00 00 21 21 21 + 	.byte $00,$00,$00,$21,$21,$21,$21,$21,$21,$21,$00,$00,$00
  1290 7AA6 00 00 00 21 33 21 + 	.byte $00,$00,$00,$21,$33,$21,$21,$21,$33,$21,$00,$00,$00
  1291
  1292 7AB3 00 00 00 21 21 21 + 	.byte $00,$00,$00,$21,$21,$21,$21,$21,$21,$21,$00,$00,$00
  1293 7AC0 00 00 00 00 21 33 + 	.byte $00,$00,$00,$00,$21,$33,$21,$33,$21,$00,$00,$00,$00
  1294 7ACD 00 00 00 00 21 21 + 	.byte $00,$00,$00,$00,$21,$21,$21,$21,$21,$00,$00,$00,$00
  1295 7ADA 00 00 00 00 00 21 + 	.byte $00,$00,$00,$00,$00,$21,$21,$21,$00,$00,$00,$00,$00
  1296 7AE7 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1297
  1298 7AF4 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1299 7B01 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1300 7B0E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1301
  1302 				;----------------------------------------
  1303 				.if .def PAL_VERSION
  1304 				; colpf2
  1305 7B1B 7E 7E			.byte $7E,$7E
  1306 7B1D 00 00 00 00 EE BA + 	.byte $00,$00,$00,$00,$EE, $BA,$BA,$26,$26,$26
  1307 7B27 26 26 26 26 00 00 + 	.byte $26,$26,$26,$26,$00, $00,$00,$00
  1308 				; colpf1
  1309 7B2F 78 78			.byte $78,$78
  1310 7B31 08 08 08 08 1A 08 + 	.byte $08,$08,$08,$08,$1A, $08,$BC,$BA,$08,$EE
  1311 7B3B 08 EE 08 08 08 08 + 	.byte $08,$EE,$08,$08,$08, $08,$08,$08
  1312
  1313 				; background index and color (colpf0)
  1314 7B43 05 84			.byte 5, $84
  1315 				;----------------------------------------
  1316 				.else
  1317 				; colpf2
  1318 					.byte $8E,$8E
  1319 					.byte $00,$00,$00,$00,$1E, $CA,$CA,$36,$36,$36
  1320 					.byte $36,$36,$36,$36,$00, $00,$00,$00
  1321 				; colpf1
  1322 					.byte $88,$88
  1323 					.byte $08,$08,$08,$08,$2A, $08,$CC,$CA,$08,$1E
  1324 					.byte $08,$1E,$08,$08,$08, $08,$08,$08
  1325
  1326 				; background index and color (colpf0)
  1327 					.byte 5, $94
  1328 				.endif
  1329 				;----------------------------------------
  1330
  1331 				; number of valid bricks
  1332 7B45 31				.byte 49
  1333
  1334 				;================================================================================
  1335 				/*
  1336 				lv19
  1337 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1338 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1339 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1340 					.byte $00,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$00
  1341 					.byte $00,$CB,$21,$21,$23,$21,$21,$21,$21,$23,$21,$CB,$00
  1342
  1343 					.byte $00,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$CB,$00
  1344 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1345 					.byte $00,$CB,$CB,$CB,$CB,$CB,$00,$CB,$CB,$CB,$CB,$CB,$00
  1346 					.byte $00,$CB,$23,$21,$21,$CB,$00,$CB,$23,$21,$21,$CB,$00
  1347 					.byte $00,$CB,$CB,$CB,$CB,$CB,$00,$CB,$CB,$CB,$CB,$CB,$00
  1348
  1349 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1350 					.byte $00,$CB,$CB,$CB,$00,$CB,$CB,$CB,$00,$CB,$CB,$CB,$00
  1351 					.byte $00,$CB,$23,$CB,$00,$CB,$23,$CB,$00,$CB,$23,$CB,$00
  1352 					.byte $00,$CB,$CB,$CB,$00,$CB,$CB,$CB,$00,$CB,$CB,$CB,$00
  1353 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1354
  1355 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1356 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1357 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1358
  1359 				;----------------------------------------
  1360 				.if .def PAL_VERSION
  1361 				; colpf2
  1362 					.byte $7E,$7E
  1363 					.byte $00,$00,$00,$00,$EE, $00,$00,$00,$9C,$00
  1364 					.byte $00,$00,$26,$00,$00, $00,$00,$00
  1365 				; colpf1
  1366 					.byte $78,$78
  1367 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1368 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1369
  1370 				; background index and color (colpf0)
  1371 					.byte 5, $84
  1372 				;----------------------------------------
  1373 				.else
  1374 				; colpf2
  1375 					.byte $8E,$8E
  1376 					.byte $00,$00,$00,$00,$1E, $00,$00,$00,$AC,$00
  1377 					.byte $00,$00,$36,$00,$00, $00,$00,$00
  1378 				; colpf1
  1379 					.byte $88,$88
  1380 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1381 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1382
  1383 				; background index and color (colpf0)
  1384 					.byte 5, $94
  1385 				.endif
  1386 				;----------------------------------------
  1387
  1388 				; number of valid bricks
  1389 					.byte 90
  1390 				*/
  1390
  1391 				;================================================================================
  1392
  1393 7B46			lv20
  1394 7B46 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1395 7B53 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1396 7B60 00 00 00 EF EF 00 + 	.byte $00,$00,$00,$EF,$EF,$00,$00,$00,$EF,$EF,$00,$00,$00
  1397 7B6D 00 00 00 00 00 EF + 	.byte $00,$00,$00,$00,$00,$EF,$00,$EF,$00,$00,$00,$00,$00
  1398 7B7A 00 00 00 00 00 23 + 	.byte $00,$00,$00,$00,$00,$23,$21,$23,$00,$00,$00,$00,$00
  1399
  1400 7B87 00 00 00 00 21 21 + 	.byte $00,$00,$00,$00,$21,$21,$21,$21,$21,$00,$00,$00,$00
  1401 7B94 00 00 00 00 23 21 + 	.byte $00,$00,$00,$00,$23,$21,$11,$21,$23,$00,$00,$00,$00
  1402 7BA1 00 EF EF EF EF 21 + 	.byte $00,$EF,$EF,$EF,$EF,$21,$23,$21,$EF,$EF,$EF,$EF,$00
  1403 7BAE EF 00 00 00 21 21 + 	.byte $EF,$00,$00,$00,$21,$21,$21,$21,$21,$00,$00,$00,$EF
  1404 7BBB 00 00 00 00 00 23 + 	.byte $00,$00,$00,$00,$00,$23,$21,$23,$00,$00,$00,$00,$00
  1405
  1406 7BC8 00 00 EF EF EF 21 + 	.byte $00,$00,$EF,$EF,$EF,$21,$21,$21,$EF,$EF,$EF,$00,$00
  1407 7BD5 00 EF 00 00 21 21 + 	.byte $00,$EF,$00,$00,$21,$21,$21,$21,$21,$00,$00,$EF,$00
  1408 7BE2 00 00 00 00 00 23 + 	.byte $00,$00,$00,$00,$00,$23,$21,$23,$00,$00,$00,$00,$00
  1409 7BEF 00 00 00 EF EF 21 + 	.byte $00,$00,$00,$EF,$EF,$21,$21,$21,$EF,$EF,$00,$00,$00
  1410 7BFC 00 00 EF 00 00 21 + 	.byte $00,$00,$EF,$00,$00,$21,$21,$21,$00,$00,$EF,$00,$00
  1411
  1412 7C09 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$23,$00,$00,$00,$00,$00,$00
  1413 7C16 00 00 00 00 EF EF + 	.byte $00,$00,$00,$00,$EF,$EF,$00,$EF,$EF,$00,$00,$00,$00
  1414 7C23 00 00 00 EF 00 00 + 	.byte $00,$00,$00,$EF,$00,$00,$00,$00,$00,$EF,$00,$00,$00
  1415
  1416 				;----------------------------------------
  1417 				.if .def PAL_VERSION
  1418 				; colpf2
  1419 7C30 3E 3E			.byte $3E,$3E
  1420 7C32 00 00 00 00 9C 9C + 	.byte $00,$00,$00,$00,$9C, $9C,$9C,$EE,$BA,$EE
  1421 7C3C BA EE BA EE BA BA + 	.byte $BA,$EE,$BA,$EE,$BA, $BA,$00,$00
  1422 				; colpf1
  1423 7C44 38 38			.byte $38,$38
  1424 7C46 08 08 1A 1A 08 08 + 	.byte $08,$08,$1A,$1A,$08, $08,$BA,$1A,$1A,$08
  1425 7C50 1A 1A 08 1A 1A 08 + 	.byte $1A,$1A,$08,$1A,$1A, $08,$1A,$1A
  1426
  1427 				; background index and color (colpf0)
  1428 7C58 05 34			.byte 5, $34
  1429 				;----------------------------------------
  1430 				.else
  1431 				; colpf2
  1432 					.byte $4E,$4E
  1433 					.byte $00,$00,$00,$00,$AC, $AC,$AC,$1E,$CA,$1E
  1434 					.byte $CA,$1E,$CA,$1E,$CA, $CA,$00,$00
  1435 				; colpf1
  1436 					.byte $48,$48
  1437 					.byte $08,$08,$2A,$2A,$08, $08,$CA,$2A,$2A,$08
  1438 					.byte $2A,$2A,$08,$2A,$2A, $08,$2A,$2A
  1439
  1440 				; background index and color (colpf0)
  1441 					.byte 5, $44
  1442 				.endif
  1443 				;----------------------------------------
  1444
  1445 				; number of valid bricks
  1446 7C5A 2A				.byte 42
  1447
  1448 				;================================================================================
  1449
  1450 7C5B			lv21
  1451 7C5B 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1452 7C68 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1453 7C75 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$00,$DF,$DF,$DF,$00,$00,$00
  1454 7C82 00 00 DF 31 31 33 + 	.byte $00,$00,$DF,$31,$31,$33,$DF,$31,$33,$31,$DF,$00,$00
  1455 7C8F 00 00 DF 31 31 31 + 	.byte $00,$00,$DF,$31,$31,$31,$DF,$33,$31,$31,$DF,$00,$00
  1456
  1457 7C9C 00 00 DF 33 31 11 + 	.byte $00,$00,$DF,$33,$31,$11,$DF,$11,$31,$31,$DF,$00,$00
  1458 7CA9 00 00 DF 31 33 11 + 	.byte $00,$00,$DF,$31,$33,$11,$DF,$11,$31,$33,$DF,$00,$00
  1459 7CB6 00 00 00 13 11 11 + 	.byte $00,$00,$00,$13,$11,$11,$23,$11,$11,$11,$00,$00,$00
  1460 7CC3 00 00 11 11 13 11 + 	.byte $00,$00,$11,$11,$13,$11,$21,$11,$11,$11,$13,$00,$00
  1461 7CD0 00 21 23 EA 21 21 + 	.byte $00,$21,$23,$EA,$21,$21,$EA,$23,$21,$EA,$21,$21,$00
  1462
  1463 7CDD 21 EA 21 EA 21 23 + 	.byte $21,$EA,$21,$EA,$21,$23,$EA,$21,$21,$EA,$21,$EA,$21
  1464 7CEA 23 EA 21 EA 21 21 + 	.byte $23,$EA,$21,$EA,$21,$21,$EA,$23,$21,$EA,$23,$EA,$21
  1465 7CF7 21 21 EA 21 EA EA + 	.byte $21,$21,$EA,$21,$EA,$EA,$21,$EA,$EA,$23,$EA,$21,$21
  1466 7D04 00 21 23 21 EA EA + 	.byte $00,$21,$23,$21,$EA,$EA,$21,$EA,$EA,$21,$21,$21,$00
  1467 7D11 00 00 00 21 21 21 + 	.byte $00,$00,$00,$21,$21,$21,$23,$21,$23,$21,$00,$00,$00
  1468
  1469 7D1E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$21,$00,$00,$00,$00,$00,$00
  1470 7D2B 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$21,$11,$21,$00,$00,$00,$00
  1471 7D38 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1472
  1473 				;----------------------------------------
  1474 				.if .def PAL_VERSION
  1475 				; colpf2
  1476 7D45 7E 7E			.byte $7E,$7E
  1477 7D47 00 00 EE EE EE EE + 	.byte $00,$00,$EE,$EE,$EE, $EE,$EE,$26,$26,$26
  1478 7D51 26 26 26 26 26 EE + 	.byte $26,$26,$26,$26,$26, $EE,$26,$00
  1479 				; colpf1
  1480 7D59 78 78			.byte $78,$78
  1481 7D5B 08 08 1A 1A 1A 1A + 	.byte $08,$08,$1A,$1A,$1A, $1A,$1A,$9C,$EE,$08
  1482 7D65 08 08 08 08 EE 08 + 	.byte $08,$08,$08,$08,$EE, $08,$EE,$08
  1483
  1484 				; background index and color (colpf0)
  1485 7D6D 02 84			.byte 2, $84
  1486 				;----------------------------------------
  1487 				.else
  1488 				; colpf2
  1489 					.byte $8E,$8E
  1490 					.byte $00,$00,$1E,$1E,$1E, $1E,$1E,$36,$36,$36
  1491 					.byte $36,$36,$36,$36,$36, $1E,$36,$00
  1492 				; colpf1
  1493 					.byte $88,$88
  1494 					.byte $08,$08,$2A,$2A,$2A, $2A,$2A,$AC,$CA,$08
  1495 					.byte $08,$08,$08,$08,$1E, $08,$1E,$08
  1496
  1497 				; background index and color (colpf0)
  1498 					.byte 2, $94
  1499 				.endif
  1500 				;----------------------------------------
  1501
  1502 				; number of valid bricks
  1503 7D6F 70				.byte 112
  1504
  1505 				;================================================================================
  1506
  1507 7D70			lv22
  1508 7D70 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1509 7D7D 00 21 00 23 00 21 + 	.byte $00,$21,$00,$23,$00,$21,$00,$21,$00,$23,$00,$21,$00
  1510 7D8A 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1511 7D97 00 21 00 21 00 23 + 	.byte $00,$21,$00,$21,$00,$23,$00,$23,$00,$21,$00,$21,$00
  1512 7DA4 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1513
  1514 7DB1 00 23 00 21 00 21 + 	.byte $00,$23,$00,$21,$00,$21,$00,$21,$00,$21,$00,$23,$00
  1515 7DBE 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1516 7DCB 00 21 00 23 00 21 + 	.byte $00,$21,$00,$23,$00,$21,$00,$21,$00,$23,$00,$21,$00
  1517 7DD8 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1518 7DE5 00 21 00 21 00 23 + 	.byte $00,$21,$00,$21,$00,$23,$00,$23,$00,$21,$00,$21,$00
  1519
  1520 7DF2 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1521 7DFF 00 23 00 21 00 21 + 	.byte $00,$23,$00,$21,$00,$21,$00,$21,$00,$21,$00,$23,$00
  1522 7E0C 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1523 7E19 00 21 00 23 00 21 + 	.byte $00,$21,$00,$23,$00,$21,$00,$21,$00,$23,$00,$21,$00
  1524 7E26 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1525
  1526 7E33 00 21 00 21 00 23 + 	.byte $00,$21,$00,$21,$00,$23,$00,$23,$00,$21,$00,$21,$00
  1527 7E40 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1528 7E4D 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1529
  1530 				;----------------------------------------
  1531 				.if .def PAL_VERSION
  1532 				; colpf2
  1533 7E5A 7E 7E			.byte $7E,$7E
  1534 7E5C 00 EE 00 1A 00 9C + 	.byte $00,$EE,$00,$1A,$00, $9C,$00,$BA,$00,$26
  1535 7E66 00 88 00 48 00 EE + 	.byte $00,$88,$00,$48,$00, $EE,$00,$00
  1536 				; colpf1
  1537 7E6E 78 78			.byte $78,$78
  1538 7E70 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1539 7E7A 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08
  1540
  1541 				; background index and color (colpf0)
  1542 7E82 05 84			.byte 5, $84
  1543 				;----------------------------------------
  1544 				.else
  1545 				; colpf2
  1546 					.byte $8E,$8E
  1547 					.byte $00,$1E,$00,$2A,$00, $AC,$00,$CA,$00,$36
  1548 					.byte $00,$98,$00,$58,$00, $1E,$00,$00
  1549 				; colpf1
  1550 					.byte $88,$88
  1551 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1552 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1553
  1554 				; background index and color (colpf0)
  1555 					.byte 5, $94
  1556 				.endif
  1557 				;----------------------------------------
  1558
  1559 				; number of valid bricks
  1560 7E84 30				.byte 48
  1561
  1562 				;================================================================================
  1563
  1564 7E85			lv22b
  1565 7E85 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1566 7E92 00 21 00 23 00 21 + 	.byte $00,$21,$00,$23,$00,$21,$00,$21,$00,$23,$00,$21,$00
  1567 7E9F 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1568 7EAC 00 21 00 21 00 23 + 	.byte $00,$21,$00,$21,$00,$23,$00,$23,$00,$21,$00,$21,$00
  1569 7EB9 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1570
  1571 7EC6 00 23 00 21 00 21 + 	.byte $00,$23,$00,$21,$00,$21,$00,$21,$00,$21,$00,$23,$00
  1572 7ED3 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1573 7EE0 00 21 00 23 00 21 + 	.byte $00,$21,$00,$23,$00,$21,$00,$21,$00,$23,$00,$21,$00
  1574 7EED 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1575 7EFA 00 21 00 21 00 23 + 	.byte $00,$21,$00,$21,$00,$23,$00,$23,$00,$21,$00,$21,$00
  1576
  1577 7F07 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1578 7F14 00 23 00 21 00 21 + 	.byte $00,$23,$00,$21,$00,$21,$00,$21,$00,$21,$00,$23,$00
  1579 7F21 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1580 7F2E 00 21 00 23 00 21 + 	.byte $00,$21,$00,$23,$00,$21,$00,$21,$00,$23,$00,$21,$00
  1581 7F3B 00 52 00 52 00 52 + 	.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1582
  1583 7F48 00 21 00 21 00 23 + 	.byte $00,$21,$00,$21,$00,$23,$00,$23,$00,$21,$00,$21,$00
  1584 7F55 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1585 7F62 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1586
  1587 				;----------------------------------------
  1588 				.if .def PAL_VERSION
  1589 				; colpf2
  1590 7F6F 7E 7E			.byte $7E,$7E
  1591 7F71 00 EE 00 1A 00 9C + 	.byte $00,$EE,$00,$1A,$00, $9C,$00,$BA,$00,$26
  1592 7F7B 00 88 00 48 00 EE + 	.byte $00,$88,$00,$48,$00, $EE,$00,$00
  1593 				; colpf1
  1594 7F83 78 78			.byte $78,$78
  1595 7F85 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1596 7F8F 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08
  1597
  1598 				; background index and color (colpf0)
  1599 7F97 05 84			.byte 5, $84
  1600 				;----------------------------------------
  1601 				.else
  1602 				; colpf2
  1603 					.byte $8E,$8E
  1604 					.byte $00,$1E,$00,$2A,$00, $AC,$00,$CA,$00,$36
  1605 					.byte $00,$98,$00,$58,$00, $1E,$00,$00
  1606 				; colpf1
  1607 					.byte $88,$88
  1608 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1609 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1610
  1611 				; background index and color (colpf0)
  1612 					.byte 5, $94
  1613 				.endif
  1614 				;----------------------------------------
  1615
  1616 				; number of valid bricks
  1617 7F99 30				.byte 48
  1618
  1619 				;================================================================================
  1620
  1621 7F9A			lv23
  1622 7F9A 00 EF 00 00 EF 23 + 	.byte $00,$EF,$00,$00,$EF,$23,$21,$21,$EF,$00,$00,$EF,$00
  1623 7FA7 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$EF,$00
  1624 7FB4 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$21,$23,$EF,$00,$00,$EF,$00
  1625 7FC1 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$EF,$00
  1626 7FCE 00 EF 00 00 EF 23 + 	.byte $00,$EF,$00,$00,$EF,$23,$21,$21,$EF,$00,$00,$EF,$00
  1627
  1628 7FDB 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$EF,$00
  1629 7FE8 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$21,$23,$EF,$00,$00,$EF,$00
  1630 7FF5 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$EF,$00
  1631 8002 00 EF 00 00 EF 23 + 	.byte $00,$EF,$00,$00,$EF,$23,$21,$21,$EF,$00,$00,$EF,$00
  1632 800F 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$EF,$00
  1633
  1634 801C 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$21,$23,$EF,$00,$00,$EF,$00
  1635 8029 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$EF,$00
  1636 8036 00 EF 00 00 EF 23 + 	.byte $00,$EF,$00,$00,$EF,$23,$21,$21,$EF,$00,$00,$EF,$00
  1637 8043 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$EF,$00
  1638 8050 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$21,$23,$EF,$00,$00,$EF,$00
  1639
  1640 805D 00 EF 00 00 EF 21 + 	.byte $00,$EF,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$EF,$00
  1641 806A 00 EA EA EA EA 00 + 	.byte $00,$EA,$EA,$EA,$EA,$00,$00,$00,$EA,$EA,$EA,$EA,$00
  1642 8077 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1643
  1644 				;----------------------------------------
  1645 				.if .def PAL_VERSION
  1646 				; colpf2
  1647 8084 7E 7E			.byte $7E,$7E
  1648 8086 9C 9C BA BA BA 48 + 	.byte $9C,$9C,$BA,$BA,$BA, $48,$48,$48,$EE,$EE
  1649 8090 EE 88 88 88 26 26 + 	.byte $EE,$88,$88,$88,$26, $26,$26,$00
  1650 				; colpf1
  1651 8098 78 78			.byte $78,$78
  1652 809A 1A 1A 1A 1A 1A 1A + 	.byte $1A,$1A,$1A,$1A,$1A, $1A,$1A,$1A,$1A,$1A
  1653 80A4 1A 1A 1A 1A 1A 1A + 	.byte $1A,$1A,$1A,$1A,$1A, $1A,$08,$08
  1654
  1655 				; background index and color (colpf0)
  1656 80AC 05 84			.byte 5, $84
  1657 				;----------------------------------------
  1658 				.else
  1659 				; colpf2
  1660 					.byte $8E,$8E
  1661 					.byte $AC,$AC,$CA,$CA,$CA, $58,$58,$58,$1E,$1E
  1662 					.byte $1E,$98,$98,$98,$36, $36,$36,$00
  1663 				; colpf1
  1664 					.byte $88,$88
  1665 					.byte $2A,$2A,$2A,$2A,$2A, $2A,$2A,$2A,$2A,$2A
  1666 					.byte $2A,$2A,$2A,$2A,$2A, $2A,$08,$08
  1667
  1668 				; background index and color (colpf0)
  1669 					.byte 5, $94
  1670 				.endif
  1671 				;----------------------------------------
  1672
  1673 				; number of valid bricks
  1674 80AE 38				.byte 56
  1675
  1676 				;================================================================================
  1677
  1678 80AF			lv24
  1679 80AF 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1680 80BC 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1681 80C9 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1682 80D6 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00
  1683 80E3 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$00
  1684
  1685 80F0 00 00 00 00 EC EC + 	.byte $00,$00,$00,$00,$EC,$EC,$EC,$EC,$EC,$EC,$00,$21,$00
  1686 80FD 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$23,$00
  1687 810A 00 DF DF DF DF DF + 	.byte $00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00,$DF,$00
  1688 8117 00 DF 00 00 00 00 + 	.byte $00,$DF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DF,$00
  1689 8124 00 DF 00 23 13 23 + 	.byte $00,$DF,$00,$23,$13,$23,$33,$23,$13,$23,$00,$DF,$00
  1690
  1691 8131 00 DF 00 00 00 00 + 	.byte $00,$DF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DF,$00
  1692 813E 00 DF 00 00 00 DF + 	.byte $00,$DF,$00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00
  1693 814B 00 23 00 00 00 00 + 	.byte $00,$23,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1694 8158 00 21 00 EC EC EC + 	.byte $00,$21,$00,$EC,$EC,$EC,$EC,$EC,$EC,$00,$00,$00,$00
  1695 8165 00 23 00 00 00 00 + 	.byte $00,$23,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1696
  1697 8172 00 DF DF DF DF DF + 	.byte $00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
  1698 817F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1699 818C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1700
  1701 				;----------------------------------------
  1702 				.if .def PAL_VERSION
  1703 				; colpf2
  1704 8199 9E 9E			.byte $9E,$9E
  1705 819B 00 00 00 EE 26 26 + 	.byte $00,$00,$00,$EE,$26, $26,$26,$EE,$EE,$EE
  1706 81A5 EE EE BA BA BA EE + 	.byte $EE,$EE,$BA,$BA,$BA, $EE,$00,$00
  1707 				; colpf1
  1708 81AD 98 98			.byte $98,$98
  1709 81AF 08 08 08 1A 1A 08 + 	.byte $08,$08,$08,$1A,$1A, $08,$1A,$1A,$1A,$1A
  1710 81B9 1A 1A 1A 08 1A 1A + 	.byte $1A,$1A,$1A,$08,$1A, $1A,$08,$08
  1711
  1712 				; background index and color (colpf0)
  1713 81C1 05 94			.byte 5, $94
  1714 				;----------------------------------------
  1715 				.else
  1716 				; colpf2
  1717 					.byte $AE,$AE
  1718 					.byte $00,$00,$00,$1E,$36, $36,$36,$1E,$1E,$1E
  1719 					.byte $1E,$1E,$CA,$CA,$CA, $1E,$00,$00
  1720 				; colpf1
  1721 					.byte $A8,$A8
  1722 					.byte $08,$08,$08,$2A,$2A, $08,$2A,$2A,$2A,$2A
  1723 					.byte $2A,$2A,$2A,$08,$2A, $2A,$08,$08
  1724
  1725 				; background index and color (colpf0)
  1726 					.byte 5, $A4
  1727 				.endif
  1728 				;----------------------------------------
  1729
  1730 				; number of valid bricks
  1731 81C3 19				.byte 25
  1732
  1733 				;================================================================================
  1734
  1735 81C4			lv25
  1736 81C4 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1737 81D1 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1738 81DE 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1739 81EB 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1740 81F8 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1741
  1742 8205 00 21 21 EA EA EA + 	.byte $00,$21,$21,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$21,$21,$00
  1743 8212 13 21 21 13 11 13 + 	.byte $13,$21,$21,$13,$11,$13,$11,$13,$11,$13,$21,$21,$13
  1744 821F 31 33 31 31 31 31 + 	.byte $31,$33,$31,$31,$31,$31,$31,$31,$31,$31,$31,$33,$31
  1745 822C 11 21 21 31 31 31 + 	.byte $11,$21,$21,$31,$31,$31,$33,$31,$31,$31,$21,$21,$11
  1746 8239 11 21 23 11 13 11 + 	.byte $11,$21,$23,$11,$13,$11,$11,$11,$13,$11,$23,$21,$11
  1747
  1748 8246 23 21 21 EA EA EA + 	.byte $23,$21,$21,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$21,$21,$23
  1749 8253 21 23 21 EA EA EA + 	.byte $21,$23,$21,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$21,$23,$21
  1750 8260 00 21 21 EA EA EA + 	.byte $00,$21,$21,$EA,$EA,$EA,$EA,$EA,$EA,$EA,$21,$21,$00
  1751 826D 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1752 827A 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1753
  1754 8287 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1755 8294 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1756 82A1 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1757
  1758 				;----------------------------------------
  1759 				.if .def PAL_VERSION
  1760 				; colpf2
  1761 82AE 9E 9E			.byte $9E,$9E
  1762 82B0 00 00 00 00 00 1A + 	.byte $00,$00,$00,$00,$00, $1A,$EE,$00,$EE,$1A
  1763 82BA 26 26 26 00 00 00 + 	.byte $26,$26,$26,$00,$00, $00,$00,$00
  1764 				; colpf1
  1765 82C2 98 98			.byte $98,$98
  1766 82C4 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$9C,$08,$88,$9C
  1767 82CE 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08
  1768
  1769 				; background index and color (colpf0)
  1770 82D6 05 94			.byte 5, $94
  1771 				;----------------------------------------
  1772 				.else
  1773 				; colpf2
  1774 					.byte $AE,$AE
  1775 					.byte $00,$00,$00,$00,$00, $2A,$1E,$00,$1E,$2A
  1776 					.byte $36,$36,$36,$00,$00, $00,$00,$00
  1777 				; colpf1
  1778 					.byte $A8,$A8
  1779 					.byte $08,$08,$08,$08,$08, $08,$AC,$08,$98,$AC
  1780 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1781
  1782 				; background index and color (colpf0)
  1783 					.byte 5, $A4
  1784 				.endif
  1785 				;----------------------------------------
  1786
  1787 				; number of valid bricks
  1788 82D8 64				.byte 100
  1789
  1790 				;================================================================================
  1791
  1792 82D9			lv26
  1793 82D9 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1794 82E6 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1795 82F3 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1796 8300 00 EF 21 21 21 EF + 	.byte $00,$EF,$21,$21,$21,$EF,$00,$EF,$21,$23,$21,$EF,$00
  1797 830D 00 EF 21 23 21 EF + 	.byte $00,$EF,$21,$23,$21,$EF,$00,$EF,$21,$21,$21,$EF,$00
  1798
  1799 831A 00 EF 21 21 21 EF + 	.byte $00,$EF,$21,$21,$21,$EF,$00,$EF,$23,$21,$21,$EF,$00
  1800 8327 00 EF 23 21 23 EF + 	.byte $00,$EF,$23,$21,$23,$EF,$00,$EF,$21,$21,$23,$EF,$00
  1801 8334 00 00 EB EB EB 00 + 	.byte $00,$00,$EB,$EB,$EB,$00,$00,$00,$EB,$EB,$EB,$00,$00
  1802 8341 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1803 834E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1804
  1805 835B 00 EF 23 21 23 EF + 	.byte $00,$EF,$23,$21,$23,$EF,$00,$EF,$21,$21,$21,$EF,$00
  1806 8368 00 EF 21 21 21 EF + 	.byte $00,$EF,$21,$21,$21,$EF,$00,$EF,$23,$21,$23,$EF,$00
  1807 8375 00 EF 21 21 21 EF + 	.byte $00,$EF,$21,$21,$21,$EF,$00,$EF,$21,$21,$21,$EF,$00
  1808 8382 00 EF 23 21 21 EF + 	.byte $00,$EF,$23,$21,$21,$EF,$00,$EF,$21,$23,$21,$EF,$00
  1809 838F 00 00 EB EB EB 00 + 	.byte $00,$00,$EB,$EB,$EB,$00,$00,$00,$EB,$EB,$EB,$00,$00
  1810
  1811 839C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1812 83A9 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1813 83B6 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1814
  1815 				;----------------------------------------
  1816 				.if .def PAL_VERSION
  1817 				; colpf2
  1818 83C3 3E 3E			.byte $3E,$3E
  1819 83C5 00 00 00 9C 9A 78 + 	.byte $00,$00,$00,$9C,$9A, $78,$76,$48,$00,$00
  1820 83CF 9C 9A BC BA EE 00 + 	.byte $9C,$9A,$BC,$BA,$EE, $00,$00,$00
  1821 				; colpf1
  1822 83D7 38 38			.byte $38,$38
  1823 83D9 08 08 08 1A 1A 1A + 	.byte $08,$08,$08,$1A,$1A, $1A,$1A,$08,$08,$08
  1824 83E3 1A 1A 1A 1A 08 08 + 	.byte $1A,$1A,$1A,$1A,$08, $08,$08,$08
  1825
  1826 				; background index and color (colpf0)
  1827 83EB 05 34			.byte 5, $34
  1828 				;----------------------------------------
  1829 				.else
  1830 				; colpf2
  1831 					.byte $4E,$4E
  1832 					.byte $00,$00,$00,$AC,$AA, $88,$86,$58,$00,$00
  1833 					.byte $AC,$AA,$CC,$CA,$1E, $00,$00,$00
  1834 				; colpf1
  1835 					.byte $48,$48
  1836 					.byte $08,$08,$08,$2A,$2A, $2A,$2A,$08,$08,$08
  1837 					.byte $2A,$2A,$2A,$2A,$08, $08,$08,$08
  1838
  1839 				; background index and color (colpf0)
  1840 					.byte 5, $44
  1841 				.endif
  1842 				;----------------------------------------
  1843
  1844 				; number of valid bricks
  1845 83ED 3C				.byte 60
  1846
  1847 				;================================================================================
  1848
  1849 83EE			lv27
  1850 83EE 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1851 83FB 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1852 8408 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1853 8415 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1854 8422 00 00 00 00 EF 00 + 	.byte $00,$00,$00,$00,$EF,$00,$00,$00,$EF,$00,$00,$00,$00
  1855
  1856 842F 00 00 00 00 EF 23 + 	.byte $00,$00,$00,$00,$EF,$23,$23,$23,$EF,$00,$00,$00,$00
  1857 843C 00 00 00 00 EF 21 + 	.byte $00,$00,$00,$00,$EF,$21,$21,$21,$EF,$EF,$00,$00,$00
  1858 8449 00 00 00 00 EF 21 + 	.byte $00,$00,$00,$00,$EF,$21,$23,$21,$EF,$00,$EF,$00,$00
  1859 8456 00 00 00 00 EF 21 + 	.byte $00,$00,$00,$00,$EF,$21,$21,$21,$EF,$00,$EF,$00,$00
  1860 8463 00 00 00 00 EF 23 + 	.byte $00,$00,$00,$00,$EF,$23,$21,$23,$EF,$00,$EF,$00,$00
  1861
  1862 8470 00 00 00 00 EF 21 + 	.byte $00,$00,$00,$00,$EF,$21,$21,$21,$EF,$00,$EF,$00,$00
  1863 847D 00 00 00 00 EF 21 + 	.byte $00,$00,$00,$00,$EF,$21,$23,$21,$EF,$00,$EF,$00,$00
  1864 848A 00 00 00 00 EF 21 + 	.byte $00,$00,$00,$00,$EF,$21,$21,$21,$EF,$00,$EF,$00,$00
  1865 8497 00 00 00 00 EF 23 + 	.byte $00,$00,$00,$00,$EF,$23,$21,$23,$EF,$EF,$00,$00,$00
  1866 84A4 00 00 00 00 EF 21 + 	.byte $00,$00,$00,$00,$EF,$21,$23,$21,$EF,$00,$00,$00,$00
  1867
  1868 84B1 00 00 00 00 EC EC + 	.byte $00,$00,$00,$00,$EC,$EC,$EC,$EC,$EC,$00,$00,$00,$00
  1869 84BE 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1870 84CB 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1871
  1872 				;----------------------------------------
  1873 				.if .def PAL_VERSION
  1874 				; colpf2
  1875 84D8 2E 2E			.byte $2E,$2E
  1876 84DA 00 00 00 00 0E 0E + 	.byte $00,$00,$00,$00,$0E, $0E,$0E,$9C,$EE,$EE
  1877 84E4 EE EE 1C 1A 26 00 + 	.byte $EE,$EE,$1C,$1A,$26, $00,$00,$00
  1878 				; colpf1
  1879 84EC 28 28			.byte $28,$28
  1880 84EE 08 08 08 08 1A 1A + 	.byte $08,$08,$08,$08,$1A, $1A,$1A,$1A,$1A,$1A
  1881 84F8 1A 1A 1A 1A 1A 08 + 	.byte $1A,$1A,$1A,$1A,$1A, $08,$08,$08
  1882
  1883 				; background index and color (colpf0)
  1884 8500 05 24			.byte 5, $24
  1885 				;----------------------------------------
  1886 				.else
  1887 				; colpf2
  1888 					.byte $3E,$3E
  1889 					.byte $00,$00,$00,$00,$0E, $0E,$0E,$AC,$1E,$1E
  1890 					.byte $1E,$1E,$2C,$2A,$36, $00,$00,$00
  1891 				; colpf1
  1892 					.byte $38,$38
  1893 					.byte $08,$08,$08,$08,$2A, $2A,$2A,$2A,$2A,$2A
  1894 					.byte $2A,$2A,$2A,$2A,$2A, $08,$08,$08
  1895
  1896 				; background index and color (colpf0)
  1897 					.byte 5, $34
  1898 				.endif
  1899 				;----------------------------------------
  1900
  1901 				; number of valid bricks
  1902 8502 23				.byte 35
  1903
  1904 				;================================================================================
  1905
  1906 8503			lv28
  1907 8503 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1908 8510 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1909 851D 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1910 852A 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$EF,$00,$00,$00,$00,$00,$00
  1911 8537 00 00 00 00 00 EF + 	.byte $00,$00,$00,$00,$00,$EF,$21,$EF,$00,$00,$00,$00,$00
  1912
  1913 8544 00 00 00 00 EF 23 + 	.byte $00,$00,$00,$00,$EF,$23,$21,$23,$EF,$00,$00,$00,$00
  1914 8551 00 00 00 EF 21 21 + 	.byte $00,$00,$00,$EF,$21,$21,$23,$21,$21,$EF,$00,$00,$00
  1915 855E 00 00 EF 21 23 21 + 	.byte $00,$00,$EF,$21,$23,$21,$21,$21,$23,$21,$EF,$00,$00
  1916 856B 00 EB 23 21 21 21 + 	.byte $00,$EB,$23,$21,$21,$21,$21,$21,$21,$21,$23,$EB,$00
  1917 8578 00 00 21 21 21 EB + 	.byte $00,$00,$21,$21,$21,$EB,$EB,$EB,$21,$21,$EB,$00,$00
  1918
  1919 8585 00 00 23 21 21 EB + 	.byte $00,$00,$23,$21,$21,$EB,$00,$EB,$21,$23,$EB,$00,$00
  1920 8592 00 00 21 21 23 EB + 	.byte $00,$00,$21,$21,$23,$EB,$EB,$EB,$23,$21,$EB,$00,$00
  1921 859F 00 00 21 21 21 EB + 	.byte $00,$00,$21,$21,$21,$EB,$00,$EB,$21,$21,$EB,$00,$00
  1922 85AC 00 00 23 21 21 EB + 	.byte $00,$00,$23,$21,$21,$EB,$EB,$EB,$21,$23,$EB,$00,$00
  1923 85B9 00 00 21 21 23 21 + 	.byte $00,$00,$21,$21,$23,$21,$21,$21,$23,$21,$EB,$00,$00
  1924
  1925 85C6 00 00 21 21 21 21 + 	.byte $00,$00,$21,$21,$21,$21,$23,$21,$21,$21,$EB,$00,$00
  1926 85D3 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1927 85E0 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1928
  1929 				;----------------------------------------
  1930 				.if .def PAL_VERSION
  1931 				; colpf2
  1932 85ED 3E 3E			.byte $3E,$3E
  1933 85EF 00 00 00 EE 26 26 + 	.byte $00,$00,$00,$EE,$26, $26,$26,$28,$EE,$1A
  1934 85F9 EE 1A EE 1A EE 1A + 	.byte $EE,$1A,$EE,$1A,$EE, $1A,$00,$00
  1935 				; colpf1
  1936 8601 38 38			.byte $38,$38
  1937 8603 08 08 08 1A 1A 1A + 	.byte $08,$08,$08,$1A,$1A, $1A,$1A,$1A,$08,$08
  1938 860D 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08
  1939
  1940 				; background index and color (colpf0)
  1941 8615 05 34			.byte 5, $34
  1942 				;----------------------------------------
  1943 				.else
  1944 				; colpf2
  1945 					.byte $4E,$4E
  1946 					.byte $00,$00,$00,$1E,$36, $36,$36,$38,$1E,$2A
  1947 					.byte $1E,$2A,$1E,$2A,$1E, $2A,$00,$00
  1948 				; colpf1
  1949 					.byte $48,$48
  1950 					.byte $08,$08,$08,$2A,$2A, $2A,$2A,$2A,$08,$08
  1951 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1952
  1953 				; background index and color (colpf0)
  1954 					.byte 5, $44
  1955 				.endif
  1956 				;----------------------------------------
  1957
  1958 				; number of valid bricks
  1959 8617 58				.byte 88
  1960
  1961 				;================================================================================
  1962 				/*
  1963 				lv29
  1964 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1965 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1966 					.byte $23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23
  1967 					.byte $52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52
  1968 					.byte $00,$21,$00,$23,$00,$21,$00,$21,$00,$23,$00,$21,$00
  1969
  1970 					.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1971 					.byte $21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$21
  1972 					.byte $52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52
  1973 					.byte $00,$23,$00,$21,$00,$21,$00,$21,$00,$21,$00,$23,$00
  1974 					.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1975
  1976 					.byte $21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$21
  1977 					.byte $52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52
  1978 					.byte $00,$23,$00,$21,$00,$21,$00,$21,$00,$21,$00,$23,$00
  1979 					.byte $00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00
  1980 					.byte $23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23
  1981
  1982 					.byte $52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52
  1983 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1984 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  1985
  1986 				;----------------------------------------
  1987 				.if .def PAL_VERSION
  1988 				; colpf2
  1989 					.byte $7E,$7E
  1990 					.byte $00,$EE,$EE,$BA,$BA, $48,$48,$9C,$9C,$76
  1991 					.byte $76,$1A,$1A,$26,$26, $0E,$0E,$00
  1992 				; colpf1
  1993 					.byte $78,$78
  1994 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  1995 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  1996
  1997 				; background index and color (colpf0)
  1998 					.byte 1, $84
  1999 				;----------------------------------------
  2000 				.else
  2001 				; colpf2
  2002 					.byte $8E,$8E
  2003 					.byte $00,$1E,$1E,$CA,$CA, $58,$58,$AC,$AC,$86
  2004 					.byte $86,$2A,$2A,$36,$36, $0E,$0E,$00
  2005 				; colpf1
  2006 					.byte $88,$88
  2007 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2008 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  2009
  2010 				; background index and color (colpf0)
  2011 					.byte 1, $94
  2012 				.endif
  2013 				;----------------------------------------
  2014
  2015 				; number of valid bricks
  2016 					.byte 46
  2017 				*/
  2017
  2018 				;================================================================================
  2019
  2020 8618			lv30
  2021 8618 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2022 8625 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2023 8632 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2024 863F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2025 864C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2026
  2027 8659 00 52 52 52 52 52 + 	.byte $00,$52,$52,$52,$52,$52,$52,$52,$52,$52,$52,$52,$00
  2028 8666 00 52 00 00 00 00 + 	.byte $00,$52,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$00
  2029 8673 00 52 00 EB EB EB + 	.byte $00,$52,$00,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$00,$52,$00
  2030 8680 00 52 00 00 00 00 + 	.byte $00,$52,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$00
  2031 868D 00 52 00 EB EB EB + 	.byte $00,$52,$00,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$00,$52,$00
  2032
  2033 869A 00 52 00 00 00 00 + 	.byte $00,$52,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$00
  2034 86A7 00 52 00 EB EB EB + 	.byte $00,$52,$00,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$00,$52,$00
  2035 86B4 00 52 00 00 00 00 + 	.byte $00,$52,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$00
  2036 86C1 00 52 00 EB EB EB + 	.byte $00,$52,$00,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$00,$52,$00
  2037 86CE 00 52 00 00 00 00 + 	.byte $00,$52,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$00
  2038
  2039 86DB 00 52 52 52 52 52 + 	.byte $00,$52,$52,$52,$52,$52,$52,$52,$52,$52,$52,$52,$00
  2040 86E8 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2041 86F5 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2042
  2043 				;----------------------------------------
  2044 				.if .def PAL_VERSION
  2045 				; colpf2
  2046 8702 7E 7E			.byte $7E,$7E
  2047 8704 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00, $00,$00,$00,$00,$00
  2048 870E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00, $00,$00,$00
  2049 				; colpf1
  2050 8716 78 78			.byte $78,$78
  2051 8718 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2052 8722 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08
  2053
  2054 				; background index and color (colpf0)
  2055 872A 05 84			.byte 5, $84
  2056 				;----------------------------------------
  2057 				.else
  2058 				; colpf2
  2059 					.byte $8E,$8E
  2060 					.byte $00,$00,$00,$00,$00, $00,$00,$00,$00,$00
  2061 					.byte $00,$00,$00,$00,$00, $00,$00,$00
  2062 				; colpf1
  2063 					.byte $88,$88
  2064 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2065 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  2066
  2067 				; background index and color (colpf0)
  2068 					.byte 5, $94
  2069 				.endif
  2070 				;----------------------------------------
  2071
  2072 				; number of valid bricks
  2073 872C 1C				.byte 28
  2074
  2075 				;================================================================================
  2076
  2077 872D			lv31
  2078 872D 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2079 873A 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2080 8747 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2081 8754 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2082 8761 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2083
  2084 876E 00 00 52 EB 52 EB + 	.byte $00,$00,$52,$EB,$52,$EB,$52,$EB,$52,$EB,$52,$00,$00
  2085 877B 00 00 23 00 21 00 + 	.byte $00,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$00
  2086 8788 00 00 52 00 52 00 + 	.byte $00,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$00
  2087 8795 00 00 21 00 23 00 + 	.byte $00,$00,$21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$00
  2088 87A2 00 00 52 00 52 00 + 	.byte $00,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$00
  2089
  2090 87AF 00 00 23 00 21 00 + 	.byte $00,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$00
  2091 87BC 00 00 52 00 52 00 + 	.byte $00,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$00
  2092 87C9 00 00 21 00 23 00 + 	.byte $00,$00,$21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$00
  2093 87D6 00 00 52 EB 52 EB + 	.byte $00,$00,$52,$EB,$52,$EB,$52,$EB,$52,$EB,$52,$00,$00
  2094 87E3 00 00 23 21 21 23 + 	.byte $00,$00,$23,$21,$21,$23,$21,$23,$21,$21,$23,$00,$00
  2095
  2096 87F0 00 00 EB EB EB EB + 	.byte $00,$00,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$00,$00
  2097 87FD 00 00 DF DF DF DF + 	.byte $00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00
  2098 880A 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2099
  2100 				;----------------------------------------
  2101 				.if .def PAL_VERSION
  2102 				; colpf2
  2103 8817 7E 7E			.byte $7E,$7E
  2104 8819 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00, $00,$26,$00,$48,$00
  2105 8823 9C 00 BA 00 EE 00 + 	.byte $9C,$00,$BA,$00,$EE, $00,$EE,$00
  2106 				; colpf1
  2107 882B 78 78			.byte $78,$78
  2108 882D 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2109 8837 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$1A,$08
  2110
  2111 				; background index and color (colpf0)
  2112 883F 05 84			.byte 5, $84
  2113 				;----------------------------------------
  2114 				.else
  2115 				; colpf2
  2116 					.byte $8E,$8E
  2117 					.byte $00,$00,$00,$00,$00, $00,$36,$00,$58,$00
  2118 					.byte $AC,$00,$CA,$00,$1E, $00,$1E,$00
  2119 				; colpf1
  2120 					.byte $88,$88
  2121 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2122 					.byte $08,$08,$08,$08,$08, $08,$2A,$08
  2123
  2124 				; background index and color (colpf0)
  2125 					.byte 5, $94
  2126 				.endif
  2127 				;----------------------------------------
  2128
  2129 				; number of valid bricks
  2130 8841 2E				.byte 46
  2131
  2132 				;================================================================================
  2133
  2134 8842			lv31b
  2135 8842 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2136 884F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2137 885C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2138 8869 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2139 8876 00 00 52 EB 52 EB + 	.byte $00,$00,$52,$EB,$52,$EB,$52,$EB,$52,$EB,$52,$00,$00
  2140
  2141 8883 00 00 23 00 21 00 + 	.byte $00,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$00
  2142 8890 00 00 52 00 52 00 + 	.byte $00,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$00
  2143 889D 00 00 21 00 23 00 + 	.byte $00,$00,$21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$00
  2144 88AA 00 00 52 00 52 00 + 	.byte $00,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$00
  2145 88B7 00 00 23 00 21 00 + 	.byte $00,$00,$23,$00,$21,$00,$23,$00,$21,$00,$23,$00,$00
  2146
  2147 88C4 00 00 52 00 52 00 + 	.byte $00,$00,$52,$00,$52,$00,$52,$00,$52,$00,$52,$00,$00
  2148 88D1 00 00 21 00 23 00 + 	.byte $00,$00,$21,$00,$23,$00,$21,$00,$23,$00,$21,$00,$00
  2149 88DE 00 00 52 EB 52 EB + 	.byte $00,$00,$52,$EB,$52,$EB,$52,$EB,$52,$EB,$52,$00,$00
  2150 88EB 00 00 23 21 21 23 + 	.byte $00,$00,$23,$21,$21,$23,$21,$23,$21,$21,$23,$00,$00
  2151 88F8 00 00 EB EB EB EB + 	.byte $00,$00,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$00,$00
  2152
  2153 8905 00 00 DF DF DF DF + 	.byte $00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00
  2154 8912 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2155 891F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2156
  2157 				;----------------------------------------
  2158 				.if .def PAL_VERSION
  2159 				; colpf2
  2160 892C 7E 7E			.byte $7E,$7E
  2161 892E 00 00 00 00 00 26 + 	.byte $00,$00,$00,$00,$00, $26,$00,$48,$00,$9C
  2162 8938 00 BA 00 EE 00 EE + 	.byte $00,$BA,$00,$EE,$00, $EE,$00,$00
  2163 				; colpf1
  2164 8940 78 78			.byte $78,$78
  2165 8942 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2166 894C 08 08 08 08 08 1A + 	.byte $08,$08,$08,$08,$08, $1A,$08,$08
  2167
  2168 				; background index and color (colpf0)
  2169 8954 05 84			.byte 5, $84
  2170 				;----------------------------------------
  2171 				.else
  2172 				; colpf2
  2173 					.byte $8E,$8E
  2174 					.byte $00,$00,$00,$00,$00, $36,$00,$58,$00,$AC
  2175 					.byte $00,$CA,$00,$1E,$00, $1E,$00,$00
  2176 				; colpf1
  2177 					.byte $88,$88
  2178 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2179 					.byte $08,$08,$08,$08,$08, $2A,$08,$08
  2180
  2181 				; background index and color (colpf0)
  2182 					.byte 5, $94
  2183 				.endif
  2184 				;----------------------------------------
  2185
  2186 				; number of valid bricks
  2187 8956 2E				.byte 46
  2188
  2189 				;================================================================================
  2190
  2191 8957			lv32
  2192 8957 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2193 8964 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2194 8971 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2195 897E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2196 898B 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2197
  2198 8998 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2199 89A5 00 EB EB EB EB EB + 	.byte $00,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$00
  2200 89B2 00 EB EB 21 21 21 + 	.byte $00,$EB,$EB,$21,$21,$21,$21,$21,$21,$21,$EB,$EB,$00
  2201 89BF 00 EB 21 EB 21 21 + 	.byte $00,$EB,$21,$EB,$21,$21,$21,$21,$21,$EB,$21,$EB,$00
  2202 89CC 00 EB 21 21 EB 33 + 	.byte $00,$EB,$21,$21,$EB,$33,$21,$33,$EB,$21,$21,$EB,$00
  2203
  2204 89D9 00 EB 21 21 21 33 + 	.byte $00,$EB,$21,$21,$21,$33,$33,$33,$21,$21,$21,$EB,$00
  2205 89E6 00 EB 21 21 21 33 + 	.byte $00,$EB,$21,$21,$21,$33,$33,$33,$21,$21,$21,$EB,$00
  2206 89F3 00 EB 21 21 21 21 + 	.byte $00,$EB,$21,$21,$21,$21,$33,$21,$21,$21,$21,$EB,$00
  2207 8A00 00 EB 21 21 21 21 + 	.byte $00,$EB,$21,$21,$21,$21,$21,$21,$21,$21,$21,$EB,$00
  2208 8A0D 00 EB 23 23 23 23 + 	.byte $00,$EB,$23,$23,$23,$23,$23,$23,$23,$23,$23,$EB,$00
  2209
  2210 8A1A 00 EB EB EB EB EB + 	.byte $00,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$EB,$00
  2211 8A27 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2212 8A34 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2213
  2214 				;----------------------------------------
  2215 				.if .def PAL_VERSION
  2216 				; colpf2
  2217 8A41 7E 7E			.byte $7E,$7E
  2218 8A43 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00, $00,$00,$26,$26,$26
  2219 8A4D 26 26 26 26 EE 00 + 	.byte $26,$26,$26,$26,$EE, $00,$00,$00
  2220 				; colpf1
  2221 8A55 78 78			.byte $78,$78
  2222 8A57 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2223 8A61 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08
  2224
  2225 				; background index and color (colpf0)
  2226 8A69 02 84			.byte 2, $84
  2227 				;----------------------------------------
  2228 				.else
  2229 				; colpf2
  2230 					.byte $8E,$8E
  2231 					.byte $00,$00,$00,$00,$00, $00,$00,$36,$36,$36
  2232 					.byte $36,$36,$36,$36,$1E, $00,$00,$00
  2233 				; colpf1
  2234 					.byte $88,$88
  2235 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2236 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  2237
  2238 				; background index and color (colpf0)
  2239 					.byte 5, $94
  2240 				.endif
  2241 				;----------------------------------------
  2242
  2243 				; number of valid bricks
  2244 8A6B 6E				.byte 110
  2245
  2246 				;================================================================================
  2247
  2248 8A6C			lv33
  2249 8A6C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2250 8A79 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2251 8A86 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2252 8A93 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2253 8AA0 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2254
  2255 8AAD 00 EF 00 00 00 00 + 	.byte $00,$EF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$EF,$00
  2256 8ABA 00 21 EF EF EF EF + 	.byte $00,$21,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$EF,$21,$00
  2257 8AC7 00 21 21 21 21 21 + 	.byte $00,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$00
  2258 8AD4 00 23 23 23 23 23 + 	.byte $00,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$23,$00
  2259 8AE1 00 21 21 21 21 21 + 	.byte $00,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$00
  2260
  2261 8AEE 00 21 21 21 21 21 + 	.byte $00,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$21,$00
  2262 8AFB 00 21 EF EF EF 21 + 	.byte $00,$21,$EF,$EF,$EF,$21,$21,$21,$EF,$EF,$EF,$21,$00
  2263 8B08 00 EF 00 00 EF 23 + 	.byte $00,$EF,$00,$00,$EF,$23,$23,$23,$EF,$00,$00,$EF,$00
  2264 8B15 00 00 00 00 EB EB + 	.byte $00,$00,$00,$00,$EB,$EB,$EB,$EB,$EB,$00,$00,$00,$00
  2265 8B22 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2266
  2267 8B2F 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2268 8B3C 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2269 8B49 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2270
  2271 				;----------------------------------------
  2272 				.if .def PAL_VERSION
  2273 				; colpf2
  2274 8B56 2E 2E			.byte $2E,$2E
  2275 8B58 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00, $00,$26,$28,$EE,$28
  2276 8B62 26 26 24 00 00 00 + 	.byte $26,$26,$24,$00,$00, $00,$00,$00
  2277 				; colpf1
  2278 8B6A 28 28			.byte $28,$28
  2279 8B6C 08 08 08 08 08 1A + 	.byte $08,$08,$08,$08,$08, $1A,$1A,$1A,$1A,$1A
  2280 8B76 1A 1A 1A 08 08 08 + 	.byte $1A,$1A,$1A,$08,$08, $08,$08,$08
  2281
  2282 				; background index and color (colpf0)
  2283 8B7E 05 34			.byte 5, $34
  2284 				;----------------------------------------
  2285 				.else
  2286 				; colpf2
  2287 					.byte $3E,$3E
  2288 					.byte $00,$00,$00,$00,$00, $00,$36,$38,$1E,$38
  2289 					.byte $36,$36,$34,$00,$00, $00,$00,$00
  2290 				; colpf1
  2291 					.byte $38,$38
  2292 					.byte $08,$08,$08,$08,$08, $2A,$2A,$2A,$2A,$2A
  2293 					.byte $2A,$2A,$2A,$08,$08, $08,$08,$08
  2294
  2295 				; background index and color (colpf0)
  2296 					.byte 5, $44
  2297 				.endif
  2298 				;----------------------------------------
  2299
  2300 				; number of valid bricks
  2301 8B80 3B				.byte 59
  2302
  2303 				;================================================================================
  2304
  2305 8B81			lv34
  2306 8B81 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2307 8B8E 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2308 8B9B 00 00 00 00 EA EA + 	.byte $00,$00,$00,$00,$EA,$EA,$EA,$00,$00,$00,$00,$00,$00
  2309 8BA8 00 00 00 EA 23 00 + 	.byte $00,$00,$00,$EA,$23,$00,$23,$EA,$00,$00,$00,$00,$00
  2310 8BB5 00 00 EA 21 21 21 + 	.byte $00,$00,$EA,$21,$21,$21,$21,$21,$EA,$00,$00,$00,$00
  2311
  2312 8BC2 00 00 EA 00 23 00 + 	.byte $00,$00,$EA,$00,$23,$00,$23,$00,$EA,$00,$00,$00,$00
  2313 8BCF 00 00 EA 21 21 21 + 	.byte $00,$00,$EA,$21,$21,$21,$21,$21,$EA,$00,$00,$00,$00
  2314 8BDC 00 00 EA 00 23 00 + 	.byte $00,$00,$EA,$00,$23,$00,$23,$00,$EA,$00,$00,$00,$00
  2315 8BE9 00 00 EA 21 21 21 + 	.byte $00,$00,$EA,$21,$21,$21,$21,$21,$EA,$00,$00,$00,$00
  2316 8BF6 00 00 00 EA 23 00 + 	.byte $00,$00,$00,$EA,$23,$00,$23,$EA,$00,$00,$00,$00,$00
  2317
  2318 8C03 00 00 00 00 EA EA + 	.byte $00,$00,$00,$00,$EA,$EA,$EA,$00,$00,$00,$00,$00,$00
  2319 8C10 00 00 00 00 00 EA + 	.byte $00,$00,$00,$00,$00,$EA,$00,$00,$00,$00,$00,$00,$00
  2320 8C1D 00 00 00 00 00 EA + 	.byte $00,$00,$00,$00,$00,$EA,$00,$00,$00,$00,$00,$00,$00
  2321 8C2A 00 00 00 00 00 DF + 	.byte $00,$00,$00,$00,$00,$DF,$00,$00,$00,$DF,$DF,$00,$00
  2322 8C37 00 00 00 00 00 DF + 	.byte $00,$00,$00,$00,$00,$DF,$00,$00,$DF,$DF,$DF,$DF,$00
  2323
  2324 8C44 00 00 00 00 00 DF + 	.byte $00,$00,$00,$00,$00,$DF,$00,$00,$DF,$DF,$DF,$DF,$00
  2325 8C51 00 00 00 00 00 DF + 	.byte $00,$00,$00,$00,$00,$DF,$00,$00,$DF,$DF,$DF,$DF,$00
  2326 8C5E 00 00 00 00 00 DF + 	.byte $00,$00,$00,$00,$00,$DF,$00,$00,$00,$DF,$DF,$00,$00
  2327
  2328 				;----------------------------------------
  2329 				.if .def PAL_VERSION
  2330 				; colpf2
  2331 8C6B 2E 2E			.byte $2E,$2E
  2332 8C6D 00 00 00 88 9C 88 + 	.byte $00,$00,$00,$88,$9C, $88,$9C,$88,$9C,$88
  2333 8C77 00 00 00 EE EE EE + 	.byte $00,$00,$00,$EE,$EE, $EE,$EE,$EE
  2334 				; colpf1
  2335 8C7F 28 28			.byte $28,$28
  2336 8C81 08 08 08 08 08 08 + 	.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2337 8C8B 08 08 08 1A 1A 1A + 	.byte $08,$08,$08,$1A,$1A, $1A,$1A,$1A
  2338
  2339 				; background index and color (colpf0)
  2340 8C93 05 24			.byte 5, $24
  2341 				;----------------------------------------
  2342 				.else
  2343 				; colpf2
  2344 					.byte $3E,$3E
  2345 					.byte $00,$00,$00,$98,$AC, $98,$AC,$98,$AC,$98
  2346 					.byte $00,$00,$00,$1E,$1E, $1E,$1E,$1E
  2347 				; colpf1
  2348 					.byte $38,$38
  2349 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2350 					.byte $08,$08,$08,$2A,$2A, $2A,$2A,$2A
  2351
  2352 				; background index and color (colpf0)
  2353 					.byte 5, $34
  2354 				.endif
  2355 				;----------------------------------------
  2356
  2357 				; number of valid bricks
  2358 8C95 2D				.byte 45
  2359
  2360 				;================================================================================
  2361
  2362 8C96			lv35
  2363 8C96 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2364 8CA3 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2365 8CB0 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2366 8CBD 00 00 00 DF 31 DF + 	.byte $00,$00,$00,$DF,$31,$DF,$23,$DF,$31,$DF,$00,$00,$00
  2367 8CCA 00 00 00 DF 33 DF + 	.byte $00,$00,$00,$DF,$33,$DF,$21,$DF,$33,$DF,$00,$00,$00
  2368
  2369 8CD7 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
  2370 8CE4 00 00 00 23 00 00 + 	.byte $00,$00,$00,$23,$00,$00,$00,$00,$00,$21,$00,$00,$00
  2371 8CF1 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
  2372 8CFE 00 00 00 21 00 00 + 	.byte $00,$00,$00,$21,$00,$00,$00,$00,$00,$23,$00,$00,$00
  2373 8D0B 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
  2374
  2375 8D18 00 00 00 23 00 00 + 	.byte $00,$00,$00,$23,$00,$00,$00,$00,$00,$21,$00,$00,$00
  2376 8D25 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
  2377 8D32 00 00 00 21 00 00 + 	.byte $00,$00,$00,$21,$00,$00,$00,$00,$00,$23,$00,$00,$00
  2378 8D3F 00 00 00 DF DF DF + 	.byte $00,$00,$00,$DF,$DF,$DF,$DF,$DF,$DF,$DF,$00,$00,$00
  2379 8D4C 00 00 00 DF 31 DF + 	.byte $00,$00,$00,$DF,$31,$DF,$23,$DF,$31,$DF,$00,$00,$00
  2380
  2381 8D59 00 00 00 DF 33 DF + 	.byte $00,$00,$00,$DF,$33,$DF,$21,$DF,$33,$DF,$00,$00,$00
  2382 8D66 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2383 8D73 00 00 00 00 00 00 + 	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2384
  2385 				;----------------------------------------
  2386 				.if .def PAL_VERSION
  2387 				; colpf2
  2388 8D80 7E 7E			.byte $7E,$7E
  2389 8D82 00 00 00 EE EE EE + 	.byte $00,$00,$00,$EE,$EE, $EE,$9C,$EE,$BA,$EE
  2390 8D8C 26 EE 88 EE EE EE + 	.byte $26,$EE,$88,$EE,$EE, $EE,$00,$00
  2391 				; colpf1
  2392 8D94 78 78			.byte $78,$78
  2393 8D96 08 08 08 1A 1A 1A + 	.byte $08,$08,$08,$1A,$1A, $1A,$08,$1A,$08,$1A
  2394 8DA0 08 1A 08 1A 1A 1A + 	.byte $08,$1A,$08,$1A,$1A, $1A,$08,$08
  2395
  2396 				; background index and color (colpf0)
  2397 8DA8 03 84			.byte 3, $84
  2398 				;----------------------------------------
  2399 				.else
  2400 				; colpf2
  2401 					.byte $8E,$8E
  2402 					.byte $00,$00,$00,$1E,$1E, $1E,$AC,$1E,$CA,$1E
  2403 					.byte $36,$1E,$98,$1E,$1E, $1E,$00,$00
  2404 				; colpf1
  2405 					.byte $88,$88
  2406 					.byte $08,$08,$08,$2A,$2A, $2A,$08,$2A,$08,$2A
  2407 					.byte $08,$2A,$08,$2A,$2A, $2A,$08,$08
  2408
  2409 				; background index and color (colpf0)
  2410 					.byte 3, $94
  2411 				.endif
  2412 				;----------------------------------------
  2413
  2414 				; number of valid bricks
  2415 8DAA 14				.byte 20
  2416
  2417 				/*
  2418 				;================================================================================
  2419
  2420 				lv00
  2421 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2422 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2423 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2424 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2425 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2426
  2427 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2428 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2429 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2430 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2431 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2432
  2433 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2434 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2435 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2436 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2437 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2438
  2439 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2440 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2441 					.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  2442
  2443 				;----------------------------------------
  2444 				.if .def PAL_VERSION
  2445 				; colpf2
  2446 					.byte $7E,$7E
  2447 					.byte $00,$00,$00,$00,$00, $00,$00,$00,$00,$00
  2448 					.byte $00,$00,$00,$00,$00, $00,$00,$00
  2449 				; colpf1
  2450 					.byte $78,$78
  2451 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2452 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  2453
  2454 				; background index and color (colpf0)
  2455 					.byte 5, $84
  2456 				;----------------------------------------
  2457 				.else
  2458 				; colpf2
  2459 					.byte $8E,$8E
  2460 					.byte $00,$00,$00,$00,$00, $00,$00,$00,$00,$00
  2461 					.byte $00,$00,$00,$00,$00, $00,$00,$00
  2462 				; colpf1
  2463 					.byte $88,$88
  2464 					.byte $08,$08,$08,$08,$08, $08,$08,$08,$08,$08
  2465 					.byte $08,$08,$08,$08,$08, $08,$08,$08
  2466
  2467 				; background index and color (colpf0)
  2468 					.byte 5, $94
  2469 				.endif
  2470 				;----------------------------------------
  2471
  2472 				; number of valid bricks
  2473 					.byte 1
  2474
  2475 				;================================================================================
  2476 				*/
  2476
  3706
  3707 8DAB			END_LEVELS_AREA
  3708
  3709
  3710 				;================================================================================
  3711
  3712 				; align to the start of a page
  3713 = 8DAB			?currentAddress = *
  3714 				.if ((<?currentAddress) != 0)
  3715 = 008D				?currentAddress = ?currentAddress/256
  3716 = 8E00				?currentAddress = ?currentAddress*256+256
  3717 8DAB				org ?currentAddress
  3718 				.endif
  3719
  3720 8E00			START_TABLES_AREA
  3721 8E00				icl "padtabs.asm"
Source: D:\!Delphi\mads\examples\games\pad\padtabs.asm
     1
     2 				; tables to get the low and high nibble of a byte (256 bytes each)
     3 8E00			TabGetLowNibble
     4 					.rept 16
     5 						:16 .BYTE #
     6 					.endr
Source: REPT
     5 8E00-9A23> 00 01 02 03 + 		:16 .BYTE #
     5 8E10 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8E20 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8E30 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8E40 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8E50 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8E60 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8E70 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8E80 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8E90 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8EA0 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8EB0 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8EC0 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8ED0 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8EE0 00 01 02 03 04 05 + 		:16 .BYTE #
     5 8EF0 00 01 02 03 04 05 + 		:16 .BYTE #
Source: D:\!Delphi\mads\examples\games\pad\padtabs.asm
     7
     8 8F00			TabGetHighNibble
     9 = 0000				?nibbleValue = 0
    10 					.rept 16
    11 						:16 .BYTE ?NIBBLEVALUE
    12 						?NIBBLEVALUE ++
    13 					.endr
Source: REPT
    11 8F00 00 00 00 00 00 00 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0001					?NIBBLEVALUE ++
    11 8F10 01 01 01 01 01 01 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0002					?NIBBLEVALUE ++
    11 8F20 02 02 02 02 02 02 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0003					?NIBBLEVALUE ++
    11 8F30 03 03 03 03 03 03 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0004					?NIBBLEVALUE ++
    11 8F40 04 04 04 04 04 04 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0005					?NIBBLEVALUE ++
    11 8F50 05 05 05 05 05 05 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0006					?NIBBLEVALUE ++
    11 8F60 06 06 06 06 06 06 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0007					?NIBBLEVALUE ++
    11 8F70 07 07 07 07 07 07 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0008					?NIBBLEVALUE ++
    11 8F80 08 08 08 08 08 08 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0009					?NIBBLEVALUE ++
    11 8F90 09 09 09 09 09 09 + 		:16 .BYTE ?NIBBLEVALUE
    11 = 000A					?NIBBLEVALUE ++
    11 8FA0 0A 0A 0A 0A 0A 0A + 		:16 .BYTE ?NIBBLEVALUE
    11 = 000B					?NIBBLEVALUE ++
    11 8FB0 0B 0B 0B 0B 0B 0B + 		:16 .BYTE ?NIBBLEVALUE
    11 = 000C					?NIBBLEVALUE ++
    11 8FC0 0C 0C 0C 0C 0C 0C + 		:16 .BYTE ?NIBBLEVALUE
    11 = 000D					?NIBBLEVALUE ++
    11 8FD0 0D 0D 0D 0D 0D 0D + 		:16 .BYTE ?NIBBLEVALUE
    11 = 000E					?NIBBLEVALUE ++
    11 8FE0 0E 0E 0E 0E 0E 0E + 		:16 .BYTE ?NIBBLEVALUE
    11 = 000F					?NIBBLEVALUE ++
    11 8FF0 0F 0F 0F 0F 0F 0F + 		:16 .BYTE ?NIBBLEVALUE
    11 = 0010					?NIBBLEVALUE ++
Source: D:\!Delphi\mads\examples\games\pad\padtabs.asm
    14
    15
    16 				; tables to convert a paddle value to a position in X (256 bytes each)
    17 				; GAME_AREA_SIZEX = 104 , paddle values: 228 --> 0 (from left to right) (255..229 [27])
    18 				; paddle xor 255: 27 --> 255 (from left to right) (0..26 [27])
    19
    20 				; TabPaddleConversionPercent100
    21 				; 	:27 .byte 0
    22 				; 	:10 .byte 0
    23 				; 	:104 .byte #, #		; 208 useful values (null: 48)
    24 				; 	:11 .byte 255
    25
    26 9000			TabPaddleConversionPercent75		; non linear
    27 9000 00 00 00 00 00 00 + 	:27 .byte 0
    28 901B 00 00 00 00 00 00 + 	:36 .byte 0
    29 903F 00 01 01 02 03 03 + 	:52 .byte #*2, #*2+1, #*2+1	; 104+52 useful values (null: 100)
    30 90DB FF FF FF FF FF FF + 	:37 .byte 255
    31
    32 				; TabPaddleConversionPercent50
    33 				; 	:27 .byte 0
    34 				; 	:62 .byte 0
    35 				; 	:104 .byte #			; 104 useful values (null: 152)
    36 				; 	:63 .byte 255
    37
    38 9100			TabPaddleConversionPercent25		; miss odd values
    39 9100 00 00 00 00 00 00 + 	:27 .byte 0
    40 911B 00 00 00 00 00 00 + 	:88 .byte 0
    41 9173 00 02 04 06 08 0A + 	:52 .byte #*2			; 52 useful values (null: 204)
    42 91A7 FF FF FF FF FF FF + 	:89 .byte 255
    43
    44
    45 				; (100 bytes)
    46 9200			TabBinaryToBCD
    47 9200 00 01 02 03 04 05 + 	.byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09
    48 920A 10 11 12 13 14 15 + 	.byte $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
    49 9214 20 21 22 23 24 25 + 	.byte $20, $21, $22, $23, $24, $25, $26, $27, $28, $29
    50 921E 30 31 32 33 34 35 + 	.byte $30, $31, $32, $33, $34, $35, $36, $37, $38, $39
    51 9228 40 41 42 43 44 45 + 	.byte $40, $41, $42, $43, $44, $45, $46, $47, $48, $49
    52 9232 50 51 52 53 54 55 + 	.byte $50, $51, $52, $53, $54, $55, $56, $57, $58, $59
    53 923C 60 61 62 63 64 65 + 	.byte $60, $61, $62, $63, $64, $65, $66, $67, $68, $69
    54 9246 70 71 72 73 74 75 + 	.byte $70, $71, $72, $73, $74, $75, $76, $77, $78, $79
    55 9250 80 81 82 83 84 85 + 	.byte $80, $81, $82, $83, $84, $85, $86, $87, $88, $89
    56 925A 90 91 92 93 94 95 + 	.byte $90, $91, $92, $93, $94, $95, $96, $97, $98, $99
    57
    58
    59 9264			TabHexNibbleToScreenDigit
    60 9264 10 11 12 13 14 15 + 	.sb "0123456789ABCDEF"
    61
    62
    63 				; tab_conv_mov
    64 				;     .byte 0,0,4,8,0,0,4,8
    65 				;     .byte 1,1,5,9,2,2,6,10
    66
    67 				; TabMouseMoveX
    68 				; 	.byte 0,8,4,0, 4,0,0,8, 8,0,0,4, 0,4,8,0
    69
    70 9274			TabNextValueMovingRight
    71 9274 02 00 03 01			.byte %10, %00, %11, %01
    72
    73 9278			TabNextValueMovingRightAmiga		; for the Amiga mouse (needs 11 values, max = %1010)
    74 9278 02 00 0A 00 00 00 + 	.byte %0010, %0000, %1010, %0000, %0000, %0000, %0000, %0000
    75 9280 00 00 08			.byte %0000, %0000, %1000
    76
    77 9283			TabNextValueMovingLeft
    78 9283 01 03 00 02			.byte %01, %11, %00, %10
    79
    80 9287			TabNextValueMovingLeftAmiga		; for the Amiga mouse (needs 11 values, max = %1010)
    81 9287 08 00 00 00 00 00 + 	.byte %1000, %0000, %0000, %0000, %0000, %0000, %0000, %0000
    82 928F 0A 00 02			.byte %1010, %0000, %0010
    83
    84
    85 				; (beware that 18*15 goes over one byte, but not 18*13)
    86 9292			TabMulBricksInX
    87 9292 00 0D 1A 27 34 41 + 	:BOTTOM_BRICK_NUM .byte <[#*NUM_BRICKS_X]
    88
    89 92A4			TabMulBytesLineLSB
    90 92A4 00 20 40 60 80 A0 + 	:BOTTOM_BRICK_NUM .byte <[#*BYTES_LINE]
    91 92B6			TabMulBytesLineMSB
    92 92B6 00 00 00 00 00 00 + 	:BOTTOM_BRICK_NUM .byte >[#*BYTES_LINE]
    93
    94
    95 92C8			TabBallShape1
    96 92C8 40				.byte %01000000
    97 92C9 E0				.byte %11100000
    98 92CA E0				.byte %11100000
    99 92CB E0				.byte %11100000
   100 92CC E0				.byte %11100000
   101 92CD 40				.byte %01000000
   102
   103 92CE			TabBallShape2
   104 92CE A0				.byte %10100000
   105 92CF 00				.byte %00000000
   106 92D0 00				.byte %00000000
   107 92D1 00				.byte %00000000
   108 92D2 00				.byte %00000000
   109 92D3 A0				.byte %10100000
   110
   111 				; TabCurrentPadShape
   112 				; 	:PAD_SIZEY .byte 0
   113
   114 92D4			TabNormalPadShape		; 8 double pixels (16)
   115 92D4 FF FF FF FF FF FF		.byte %11111111,%11111111,%11111111,%11111111,%11111111,%11111111
   116 92DA			TabSmallPadShape		; 4 double pixels (8)
   117 92DA F0 F0 F0 F0 F0 F0		.byte %11110000,%11110000,%11110000,%11110000,%11110000,%11110000
   118 92E0			TabLargePadShape		; 6 quad pixels (24)
   119 92E0 FC FC FC FC FC FC		.byte %11111100,%11111100,%11111100,%11111100,%11111100,%11111100
   120
   121 92E6			TabCurrentPadColor
   122 92E6 00 00 00 00 00 00		:PAD_SIZEY .byte 0
   123
   124 				.if .def PAL_VERSION
   125 92EC			TabNormalPadColor
   126 					;.by +$B0, 10,12,14,12,10,8
   127 92EC BA BC BE BC BA A8		.byte $BA, $BC, $BE, $BC, $BA, $A8
   128 92F2			TabSmallPadColor
   129 					;.by +$20, 10,12,14,12,10,8
   130 92F2 2A 2C 2E 2C 2A 38		.byte $2A, $2C, $2E, $2C, $2A, $38
   131 92F8			TabLargePadColor
   132 					;.by +$80, 10,12,14,12,10,8
   133 92F8 8A 8C 8E 8C 8A 98		.byte $8A, $8C, $8E, $8C, $8A, $98
   134
   135 				.else
   136
   137 				TabNormalPadColor
   138 					;.by +$C0, 10,12,14,12,10,8
   139 					.byte $CA, $CC, $CE, $CC, $CA, $B8
   140 				TabSmallPadColor
   141 					;.by +$30, 10,12,14,12,10,8
   142 					.byte $3A, $3C, $3E, $3C, $3A, $48
   143 				TabLargePadColor
   144 					;.by +$90, 10,12,14,12,10,8
   145 					.byte $9A, $9C, $9E, $9C, $9A, $A8
   146 				.endif
   147
   148 				    ;.byte $06,$08,$0E,$08,$08,$06,$06		; arkanoid gray degradation (7 lines)
   149
   150
   151 				; the direction tables should have a size of (PAD_SIZEX + BALL_SIZEX + 1)
   152 				; tab_pad_xdir
   153 				;     .byte 1,1, 1,1,1,1, 1,1,1,1
   154 				;     .byte 2,2,2,2, 2,2,2,2, 2,2
   155
   156 92FE			TabCurrentPadAngleIndex
   157 92FE 00 00 00 00 00 00 + 	:[PAD_LARGE_SIZEX+BALL_SIZEX+1] .byte 0
   158
   159 931A			TabNormalPadAngleIndex
   160 					;.byte 0,0, 0,1,1,1, 2,2,2,2
   161 					;.byte 2,2,2,2, 1,1,1,0, 0,0
   162 931A 00 00 01 01 02 02 + 	.byte 0,0, 1,1,2,2, 3,3,4,4
   163 9324 04 04 03 03 02 02 + 	.byte 4,4,3,3, 2,2,1,1, 0,0
   164
   165 932E			TabSmallPadAngleIndex
   166 					;.byte 0,0, 1,1, 2,2
   167 					;.byte 2,2, 1,1, 0,0
   168 932E 00 00 01 02 03 04		.byte 0,0, 1,2, 3,4
   169 9334 04 03 02 01 00 00		.byte 4,3, 2,1, 0,0
   170
   171 933A			TabLargePadAngleIndex
   172 					;.byte 0,0, 0,1,1,1,1, 2,2,2,2,2,2,2
   173 					;.byte 2,2,2,2,2,2,2, 1,1,1,1,0, 0,0
   174 933A 00 00 00 01 01 01 + 	.byte 0,0, 0,1,1,1,2, 2,2,3,3,3,4,4
   175 9348 04 04 03 03 03 02 + 	.byte 4,4,3,3,3,2,2, 2,1,1,1,0, 0,0
   176
   177
   178 				; .if .def PAL_VERSION
   179 				; ; speed 156 in Y (in 2:1 pixels), angles 22.5, 45 and 67,5 (this is for PAL)
   180 				; tab_pad_xstep1
   181 				; 	.byte 72, 55, 29
   182 				; tab_pad_xstep2
   183 				; 	.byte 16, 40, 217
   184 				; tab_pad_ystep1
   185 				; 	.byte 59, 110, 144
   186 				; tab_pad_ystep2
   187 				; 	.byte 179, 79, 32
   188 				; 
   189 				; .else
   190 				; 
   191 				; ; speed 130 in Y (in 2:1 pixels), angles 22.5, 45 and 67,5 (this is for NTSC)
   192 				; tab_pad_xstep1
   193 				; 	.byte 60, 45, 24
   194 				; tab_pad_xstep2
   195 				; 	.byte 13, 246, 224
   196 				; tab_pad_ystep1
   197 				; 	.byte 49, 91, 120
   198 				; tab_pad_ystep2
   199 				; 	.byte 192, 237, 27
   200 				; .endif
   201
   202
   203 				.if .def PAL_VERSION
   204 				; speed 222 in Y (in 2:1 pixels), angles 20, 32.5, 45, 57.5 and 70 (this is for PAL)
   205 				; (or angles from 0.0 to 90.0, with a step of 2.5 degrees)
   206 9356			tab_pad_xstep1
   207 					;.byte 102, 78, 42
   208 9356 68 5D 4E 3B 25		.byte $68, $5D, $4E, $3B, $25
   209 					;.byte $6F,$6E,$6E,$6E,$6D, $6C,$6B,$69,$68, $66,$64,$62,$60, $5D,$5A,$58,$55, $51,$4E,$4A,$47, $43,$3F,$3B,$37, $33,$2E,$2A,$25, $21,$1C,$18,$13, $0E,$09,$04,$00
   210 935B			tab_pad_xstep2
   211 					;.byte 141, 125, 122
   212 935B 4E 9E 7D A4 F7		.byte $4E, $9E, $7D, $A4, $F7
   213 					;.byte $00,$E5,$94,$0D,$50, $5E,$38,$DD,$4E, $8D,$9A,$75,$21, $9E,$ED,$10,$08, $D6,$7D,$FE,$59, $93,$AB,$A4,$80, $41,$E9,$7A,$F7, $61,$BB,$06,$46, $7D,$AD,$D7,$00
   214 9360			tab_pad_ystep1
   215 					;.byte 84, 156, 205
   216 9360 4B 77 9C BB D0		.byte $4B, $77, $9C, $BB, $D0
   217 					;.byte $00,$09,$13,$1C,$26, $30,$39,$42,$4B, $54,$5D,$66,$6F, $77,$7F,$87,$8E, $95,$9C,$A3,$AA, $B0,$B5,$BB,$C0, $C4,$C9,$CD,$D0, $D3,$D6,$D8,$DA, $DC,$DD,$DD,$DE
   218 9365			tab_pad_ystep2
   219 					;.byte 245, 250, 26
   220 9365 EE 48 FA 3C 9D		.byte $EE, $48, $FA, $3C, $9D
   221 					;.byte $00,$AF,$59,$FA,$8D, $0D,$75,$C2,$EE, $F5,$D2,$82,$00, $48,$55,$25,$B3, $FB,$FA,$AD,$10, $20,$DA,$3C,$42, $EB,$33,$1A,$9D, $BA,$6F,$BD,$A1, $1A,$28,$CA,$00
   222
   223 				.else
   224
   225 				; speed 185 in Y (in 2:1 pixels), angles 20, 32.5, 45, 57.5 and 70 (this is for NTSC)
   226 				; (or angles from 0.0 to 90.0, with a step of 2.5 degrees)
   227 				tab_pad_xstep1
   228 					;.byte 85, 65, 35
   229 					.byte $56, $4E, $41, $31, $23
   230 					;.byte $5C,$5C,$5C,$5B,$5B, $5A,$59,$58,.$56, _$55,$53,$52,$50, .$4E,$4B,$49,$46, $44,_$41,$3E,$3B, $38,$35,.$31,$2E, $2A,$27,_$23,.$1F, $1B,$17,$14,$10, $0C,$08,$04,$00
   231 				tab_pad_xstep2
   232 					;.byte 117, 104, 102
   233 					.byte $EC, $04, $68, $B3, $A3
   234 					;.byte $80,$69,$26,$B5,$18, $4F,$59,$38,.$EC, _$75,$D5,$0C,$1B, .$04,$C6,$63,$DC, $33,_$68,$7E,$75, $4F,$0E,.$B3,$40, $B6,$18,_$66,.$A3, $D1,$F1,$05,$10, $13,$10,$09,$00
   235 				tab_pad_ystep1
   236 					;.byte 70, 130, 170
   237 					.byte $3F, $63, $82, $9C, $AD
   238 					;.byte $00,$08,$10,$18,$20, $28,$2F,$37,.$3F, _$46,$4E,$55,$5C, .$63,$6A,$70,$76, $7C,_$82,$88,$8D, $92,$97,.$9C,$A0, $A4,$A7,_$AA,.$AD, $B0,$B2,$B4,$B6, $B7,$B8,$B8,$B9
   239 				tab_pad_ystep2
   240 					;.byte 204, 209, 235
   241 					.byte $46, $67, $D1, $07, $D8
   242 					;.byte $00,$12,$20,$26,$20, $0B,$E2,$A1,.$46, _$CC,$2F,$6C,$80, .$67,$1D,$9F,$EA, $FC,_$D1,$65,$B8, $C5,$8B,.$07,$37, $19,$AB,_$EB,.$D8, $70,$B2,$9D,$30, $6B,$4C,$D3,$00
   243 				.endif
   244
   245
   246 				; .if .def PAL_VERSION
   247 				; ; speed 252 in Y (in 2:1 pixels), angles 22.5, 45 and 67,5 (this is for PAL)
   248 				; .else
   249 				; ; speed 210 in Y (in 2:1 pixels), angles 22.5, 45 and 67,5 (this is for NTSC)
   250 				; .endif
   251
   252
   253 				; 8 chars for the background, plus 8 more for the shadow version
   254 936A			TabBackgroundCharDef
   255 936A 80 82 84 86 88 8A + 	.by +128, 0,2,4,6,8,10,12,14
   256
   257 				; 15 different bricks, 30 chars
   258 				; current list:
   259 				; - dark blue [0]
   260 				; - grey [1]
   261 				; - white dli, white [2,3]
   262 				; - "checkered" dli, white [4,5]
   263 				; - "diagonal" dli, white [6,7]
   264 				; - "pad" dli, white [8,9]
   265 				; - black (empty) [10] ($A)
   266 				; - "hard" dli, white [11,12] ($B,$C)
   267 				; - "cross" dli, white [13,14] ($D,$E)
   268
   269 9372			TabLeftBrickCharDef
   270 9372 AE B0 32 B2 34 B4 + 	.by +0, 46+128, 48+128, 50,50+128, 52,52+128, 54,54+128, 56,56+128
   271 937C 3A 46 C6 50 D0		.by +0, 58, 70,70+128, 80,80+128
   272 9381			TabRightBrickCharDef
   273 9381 AF B1 33 B3 35 B5 + 	.by +1, 46+128, 48+128, 50,50+128, 52,52+128, 54,54+128, 56,56+128
   274 938B 3B 47 C7 51 D1		.by +1, 58, 70,70+128, 80,80+128
   275
   276
   277 9390			tab_anim_lsb
   278 9390 00 00 00 00 00 00 + 	:MAX_ACTIVE_HIGHLIGHT_ANIMS .byte 0
   279 9398			tab_anim_msb
   280 9398 00 00 00 00 00 00 + 	:MAX_ACTIVE_HIGHLIGHT_ANIMS .byte 0
   281 93A0			tab_anim_ctd
   282 93A0 00 00 00 00 00 00 + 	:MAX_ACTIVE_HIGHLIGHT_ANIMS .byte 0
   283 93A8			tab_anim_end
   284 93A8 00 00 00 00 00 00 + 	:MAX_ACTIVE_HIGHLIGHT_ANIMS .byte 0
   285
   286
   287 93B0			TabRestoreBrick_lsb
   288 93B0 00 00 00 00 00 00 + 	:MAX_ACTIVE_RESTORE_BRICKS .byte 0
   289 93C8			TabRestoreBrick_msb
   290 93C8 00 00 00 00 00 00 + 	:MAX_ACTIVE_RESTORE_BRICKS .byte 0
   291 93E0			TabRestoreBrick_idx
   292 93E0 00 00 00 00 00 00 + 	:MAX_ACTIVE_RESTORE_BRICKS .byte 0
   293 93F8			TabRestoreBrick_end
   294 93F8 00 00 00 00 00 00 + 	:MAX_ACTIVE_RESTORE_BRICKS .byte 0
   295
   296
   297 9410			TabExitAnimationChar1
   298 9410 EE F0 F2			.by +128, 110, 112, 114
   299 9413			TabExitAnimationChar2
   300 9413 EF F1 F3			.by +128, 111, 113, 115
   301
   302 = 0003			EXIT_ANIMATION_FRAMES = 3
   303 				.if .def PAL_VERSION
   304 = 0003				EXIT_ANIMATION_TIME = 3
   305 				.else
   306 					EXIT_ANIMATION_TIME = 3
   307 				.endif
   308 					
   309
   310 9416			tab_bonus_color
   311 				.if .def PAL_VERSION
   312 9416 74 8A 06 12 1A 56 + 	.byte $74,$8A,$06,$12,$1A,$56,$4A,$B8,$34		; bonus: E D P R S X(M) B C F
   313 				.else
   314 					;.byte $84,$9A,$06,$C8,$28,$34,$5A				; bonus: E D P C S L B
   315 					.byte $84,$9A,$06,$22,$2A,$66,$5A,$C8,$44		; bonus: E D P R S X(M) B C F
   316 				.endif
   317
   318 941F			tab_bonus_lsb
   319 941F 3A 51 68 DB			.byte <TabBonusShape_E, <TabBonusShape_D, <TabBonusShape_P, <TabBonusShape_R
   320 9423 96 C4 AD 7F			.byte <TabBonusShape_S, <TabBonusShape_X, <TabBonusShape_B, <TabBonusShape_C
   321 9427 F2				.byte <TabBonusShape_F
   322 9428			tab_bonus_msb
   323 9428 94 94 94 94			.byte >TabBonusShape_E, >TabBonusShape_D, >TabBonusShape_P, >TabBonusShape_R
   324 942C 94 94 94 94			.byte >TabBonusShape_S, >TabBonusShape_X, >TabBonusShape_B, >TabBonusShape_C
   325 9430 94				.byte >TabBonusShape_F
   326
   327 9431			tab_bonus_prob
   328 9431 32				.byte 50
   329 9432 5A				.byte 50+40
   330 9433 5E				.byte 50+40+4
   331 9434 91				.byte 50+40+4+51
   332 9435 B0				.byte 50+40+4+51+31
   333 9436 B6				.byte 50+40+4+51+31+6
   334 9437 B8				.byte 50+40+4+51+31+6+2
   335 9438 EB				.byte 50+40+4+51+31+6+2+51
   336 9439 FF				.byte 50+40+4+51+31+6+2+51+20		; this must add to 255
   337
   338 = 0001			BONUS_TYPE_EXPAND = 1
   339 = 0002			BONUS_TYPE_DISRUPT = 2
   340 = 0003			BONUS_TYPE_PLAYER = 3
   341 = 0004			BONUS_TYPE_REDUCE = 4
   342 = 0005			BONUS_TYPE_SLOW = 5
   343 = 0006			BONUS_TYPE_MEGA = 6
   344 = 0007			BONUS_TYPE_BREAK = 7
   345 = 0008			BONUS_TYPE_CATCH = 8
   346 = 0009			BONUS_TYPE_FAST = 9
   347 				;BONUS_TYPE_LASER = 10
   348
   349
   350 				; arkanoid def: (probabilities distribution to fit in one byte: 256 = 42 x 6 + 4)
   351 				; (assuming the player and the break powerups have half the probability)
   352
   353 				; E: enlarge, expand (normal size: 1.8x bricks, expanded: 2.8x bricks)
   354 				; D: disrupt (multi ball, x3) (cannot get other powerups while this is active)
   355 				; P: extra player
   356 				; C: capture ball, catch (when the pad moves the ball movement is "elastic")
   357 				; S: slow ball
   358 				; L: laser (2 groups of shots alive at the same time max, when one shot collides
   359 				;	the other one can destroy the brick at the side, but doesn't continue going up,
   360 				;	also if the powerup is changed the shots disappear in mid air)
   361 				; B: next board, break (exit appears at the right side, stays forever)
   362
   363 				; arkanoid 2 adds:
   364 				; +B: break, open two exits (left and right)
   365 				; +D: disrupt, multi ball x8
   366 				; R: reduce pad to half size, score x2 (black)
   367 				; T: twin, two pads side by side (dark blue)
   368 				; I: illusion, ghost pads that follow the pad (dark green)
   369 				; N: new, splits ball x3 every time you lose one (light grey)
   370 				; M: mega, red ball that destroy every type of brick (purple)
   371 				; Flashing pill: 5 different effects
   372
   373 				; don't throw the same bonus when that power is still active (E,C,S,L, maybe D)
   374 				; don't throw the same bonus two times in a row (?)
   375
   376 943A			TabBonusShape_E
   377 943A FF C3 DF C7 DF DF + 	.byte 255,%11000011,%11011111,%11000111,%11011111,%11011111,%11000011,255 ; "E"
   378 9442 FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   379 944A FF C3 DF C7 DF DF + 	.byte 255,%11000011,%11011111,%11000111,%11011111,%11011111,%11000011
   380 9451			TabBonusShape_D
   381 9451 FF C7 DB DB DB DB + 	.byte 255,%11000111,%11011011,%11011011,%11011011,%11011011,%11000111,255 ; "D"
   382 9459 FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   383 9461 FF C7 DB DB DB DB + 	.byte 255,%11000111,%11011011,%11011011,%11011011,%11011011,%11000111
   384 9468			TabBonusShape_P
   385 9468 FF C7 DB DB C7 DF + 	.byte 255,199,219,219,199,223,223,255 ; "P"
   386 9470 FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   387 9478 FF C7 DB DB C7 DF + 	.byte 255,199,219,219,199,223,223
   388 947F			TabBonusShape_C
   389 947F FF E7 DB DF DF DB + 	.byte 255,%11100111,%11011011,%11011111,%11011111,%11011011,%11100111,255 ; "C"
   390 9487 FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   391 948F FF E7 DB DF DF DB + 	.byte 255,%11100111,%11011011,%11011111,%11011111,%11011011,%11100111
   392 9496			TabBonusShape_S
   393 9496 FF E3 DF E7 FB DB + 	.byte 255,%11100011,%11011111,%11100111,%11111011,%11011011,%11100111,255 ; "S"
   394 949E FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   395 94A6 FF E3 DF E7 FB DB + 	.byte 255,%11100011,%11011111,%11100111,%11111011,%11011011,%11100111
   396 				; TabBonusShape_L
   397 				; 	.byte 255,%11011111,%11011111,%11011111,%11011111,%11011111,%11000011,255 ; "L"
   398 				; 	.byte 255,255,255,255,255,255,255,255
   399 				; 	.byte 255,%11011111,%11011111,%11011111,%11011111,%11011111,%11000011
   400 94AD			TabBonusShape_B
   401 94AD FF C7 DB C7 DB DB + 	.byte 255,199,219,199,219,219,199,255 ; "B"
   402 94B5 FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   403 94BD FF C7 DB C7 DB DB + 	.byte 255,199,219,199,219,219,199
   404
   405 94C4			TabBonusShape_X
   406 94C4 FF DB DB E7 E7 DB + 	.byte 255,219,219,231,231,219,219,255 ; "X"
   407 94CC FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   408 94D4 FF DB DB E7 E7 DB + 	.byte 255,219,219,231,231,219,219
   409 				; TabBonusShape_J
   410 				; 	.byte 255,227,247,247,247,215,199,255 ; "J"
   411 				; 	.byte 255,255,255,255,255,255,255,255
   412 				; 	.byte 255,227,247,247,247,215,199
   413
   414 94DB			TabBonusShape_R
   415 94DB FF C7 DB DB C7 DB + 	.byte 255,%11000111,%11011011,%11011011,%11000111,%11011011,%11011011,255 ; "R"
   416 94E3 FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   417 94EB FF C7 DB DB C7 DB + 	.byte 255,%11000111,%11011011,%11011011,%11000111,%11011011,%11011011
   418 				; TabBonusShape_M
   419 				; 	.byte 255,%10111011,%10010011,%10000011,%10101011,%10111011,%10111011,255 ; "M"
   420 				; 	.byte 255,255,255,255,255,255,255,255
   421 				; 	.byte 255,%10111011,%10010011,%10000011,%10101011,%10111011,%10111011
   422 94F2			TabBonusShape_F
   423 94F2 FF C3 DF C7 DF DF + 	.byte 255,%11000011,%11011111,%11000111,%11011111,%11011111,%11011111,255 ; "E"
   424 94FA FF FF FF FF FF FF + 	.byte 255,255,255,255,255,255,255,255
   425 9502 FF C3 DF C7 DF DF + 	.byte 255,%11000011,%11011111,%11000111,%11011111,%11011111,%11011111
   426
   427
   428 9509			tab_lsb_snd
   429 9509 36 7A B2 EE 26		.byte  <snd_1, <snd_2, <snd_3, <snd_4, <snd_5
   430 950E 62 82 BE FE			.byte  <snd_6, <snd_7, <snd_8, <snd_9
   431
   432 9512			tab_msb_snd
   433 9512 95 95 95 95 96		.byte  >snd_1, >snd_2, >snd_3, >snd_4, >snd_5
   434 9517 96 96 96 96			.byte  >snd_6, >snd_7, >snd_8, >snd_9
   435
   436 951B			tab_snd_len
   437 					;.byte 20,14,15,14,15
   438 951B 11 0E 0F 0E 0F 08 + 	.byte 17,14,15,14,15, 8,15,16,16
   439
   440 9524			tab_snd_ctl
   441 					;.byte 5,0,0,0,5
   442 9524 04 00 00 00 04 04 + 	.byte 4,0,0,0,4, 4,0,4,4
   443
   444 952D			TabSoundPriority	; min priority should be 1 (0 would mean nothing is playing))
   445 952D 01 01 01 01 01 03 + 	.byte 1,1,1,1,1, 3,5,10,10
   446 					
   447 				; AUDCTL: +1: 15KHz main clock, +4: high pass filter in channels 1+3 (+2: 2+4 channels)
   448
   449 9536			snd_1		; hit pad
   450 					;.by +70, 4,0,3,0,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0
   451 					;.by +$A0, 1,2,3,4,5,4,4,3,3,3,2,2,2,2,1,1,1,1,1,0
   452 9536 FF FB FE FB FD FB + 	.by +251, 4,0,3,0,2,0,1,0,1,0,1,0,1,0,1,0,0
   453 9547 A1 A2 A3 A4 A5 A4 + 	.by +$A0, 1,2,3,4,5,4,4,3,3,3,2,2,2,1,1,1,0
   454
   455 					;.by +66, 4,0,3,0,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0
   456 					;.by +$A0, 1,2,3,4,5,4,4,3,3,3,2,2,2,2,1,1,1,1,1,0
   457 9558 FB F7 FA F7 F9 F7 + 	.by +247, 4,0,3,0,2,0,1,0,1,0,1,0,1,0,1,0,0
   458 9569 A1 A2 A3 A4 A5 A4 + 	.by +$A0, 1,2,3,4,5,4,4,3,3,3,2,2,2,1,1,1,0
   459
   460 957A			snd_2		; hit "easy"
   461 957A 4B 4B 96 96 4B 4B + 	.by +75, 0,0,75,75,0,0,75,75,0,0,75,75,0,0
   462 9588 A5 AB A9 A7 A6 A5 + 	.by +$A0, 5,11,9,7,6,5,4,4,3,2,2,1,1,0
   463 					
   464 9596 4B 4B 4B 4B 4B 4B + 	.by +75, 0,0,0,0,0,0,0,0,0,0,0,75,75,0
   465 95A4 A0 A0 A0 A0 A0 A0 + 	.by +$A0, 0,0,0,0,0,0,0,0,0,1,3,2,1,0
   466 					
   467 95B2			snd_3		; hit "hard"
   468 95B2 21 21 21 21 21 21 + 	.by +33, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   469 95C1 A9 A7 A6 A6 A5 A5 + 	.by +$A0, 9,7,6,6,5,5,4,4,3,3,2,2,1,1,0
   470
   471 95D0 16 16 16 16 16 16 + 	.by +22, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   472 95DF A9 A6 A6 A5 A5 A4 + 	.by +$A0, 9,6,6,5,5,4,4,3,3,2,2,1,1,0,0
   473
   474 95EE			snd_4		; hit "cross 1" (unbreakable)
   475 95EE 4B 4B 4B 4B 4B 4B + 	.by +75, 0,0,0,0,0,0,0,0,0,0,0,0,0,0
   476 95FC A9 A6 A4 A3 A3 A2 + 	.by +$A0, 9,6,4,3,3,2,2,1,3,2,2,1,1,0
   477
   478 960A 3C 3C 3C 3C 3C 3C + 	.by +60, 0,0,0,0,0,0,0,0,0,0,0,0,0,0
   479 9618 A7 A4 A3 A2 A2 A1 + 	.by +$A0, 7,4,3,2,2,1,1,0,2,1,1,0,0,0
   480
   481 9626			snd_5		; hit "gold" (restore brick)
   482 					;.by +55, 0,1,2,3,2,3,2,1,0,1,2,3,2,1,0
   483 					;.by +238, 0,4,8,13,8,13,8,4,0,4,8,13,8,4,0
   484 					;.by +242, 0,4,8,13,8,13,8,4,0,4,8,13,8,4,0
   485 					;.by +242, 0,2,4,6,4,6,4,2,0,2,4,6,4,2,0
   486 9626 F9 FB FD FF FD FF + 	.by +249, 0,2,4,6,4,6,4,2,0,2,4,6,4,2,0
   487 9635 A6 A8 A7 A7 A6 A6 + 	.by +$A0, 6,8,7,7,6,6,5,5,4,4,3,3,2,1,0
   488
   489 					;.by +48, 0,1,2,3,2,3,2,1,0,1,2,3,2,1,0
   490 					;.by +208, 0,4,9,13,9,13,9,4,0,4,9,13,9,4,0
   491 					;.by +212, 0,4,9,13,9,13,9,4,0,4,9,13,9,4,0
   492 					;.by +212, 0,2,4,6,4,6,4,2,0,2,4,6,4,2,0
   493 9644 DB DD DF E1 DF E1 + 	.by +219, 0,2,4,6,4,6,4,2,0,2,4,6,4,2,0
   494 9653 A3 A5 A5 A4 A4 A3 + 	.by +$A0, 3,5,5,4,4,3,3,2,2,1,1,1,1,1,0
   495
   496 9662			snd_6		; get bonus
   497 9662 0D 0C 0B 0A 09 08 + 	.by +6, 7,6,5,4,3,2,1,0
   498 966A 82 84 85 84 83 82 + 	.by +$80, 2,4,5,4,3,2,1,0
   499
   500 9672 F0 F2 F4 F6 F8 FA + 	.by +240, 0,2,4,6,8,10,12,0,
   501 967A A1 A2 A3 A3 A2 A2 + 	.by +$A0, 1,2,3,3,2,2,1,0
   502
   503 9682			snd_7		; destroy enemy
   504 9682 80 82 84 86 88 8A + 	.by +128, 0,2,4,6,8,10,12,14,16,18,20,22,24,26,0
   505 9691 06 08 07 06 05 05 + 	.by +$00, 6,8,7,6,5,5,4,4,3,3,2,2,1,1,0
   506
   507 96A0 7E 80 82 84 86 88 + 	.by +126, 0,2,4,6,8,10,12,14,16,18,20,22,24,26,0
   508 96AF 03 05 05 04 03 03 + 	.by +$00, 3,5,5,4,3,3,2,2,1,1,1,1,1,1,0
   509
   510 96BE			snd_8		; extra life
   511 96BE 18 18 18 16 16 16 + 	.by +22, 2,2,2,0,0,0,1,1,1,0,0,0,0,0,0,0
   512 96CE A5 A6 A5 A0 A0 A0 + 	.by +$A0, 5,6,5,0,0,0,4,5,4,0,0,0,3,4,3,0
   513
   514 96DE 16 16 16 14 14 14 + 	.by +20, 2,2,2,0,0,0,1,1,1,0,0,0,0,0,0,0
   515 96EE A5 A6 A5 A0 A0 A0 + 	.by +$A0, 5,6,5,0,0,0,4,5,4,0,0,0,3,4,3,0
   516
   517 96FE			snd_9		; ball lost (same as get life, change it!)
   518 96FE 0D 0D 0D 0C 0C 0C + 	.by +12, 1,1,1,0,0,0,7,7,7,0,0,0,14,14,14,0
   519 970E 87 86 85 80 80 80 + 	.by +$80, 7,6,5,0,0,0,6,5,4,0,0,0,5,4,3,0
   520
   521 971E 0B 0B 0B 0A 0A 0A + 	.by +10, 1,1,1,0,0,0,7,7,7,0,0,0,14,14,14,0
   522 972E 87 86 85 80 80 80 + 	.by +$80, 7,6,5,0,0,0,6,5,4,0,0,0,5,4,3,0
   523 					
   524
   525 				.if .def USE_ENEMY_CODE
   526
   527 				; ordered by type: red, blue (purple), green
   528 973E			TabEnemyColor
   529 				.if .def PAL_VERSION
   530 973E 36 68 B8			.byte $36, $68, $B8
   531 				.else
   532 					.byte $46, $78, $C8
   533 				.endif
   534
   535 9741			TabEnemyTopLimit
   536 9741 78 6C 6C			.byte ENEMY_LIMIT_BOTTOM-[30*2], [ENEMY_LIMIT_BOTTOM-8]-[32*2], [ENEMY_LIMIT_BOTTOM-16]-[28*2]
   537 9744			TabEnemyBottomLimit
   538 9744 B4 AC A4			.byte ENEMY_LIMIT_BOTTOM, [ENEMY_LIMIT_BOTTOM-8], [ENEMY_LIMIT_BOTTOM-16]
   539
   540 9747			TabEnemyHoverTime_LSB
   541 9747 64 96 C8			.byte <[4*FRAMES_ONE_SECOND/2], <[6*FRAMES_ONE_SECOND/2], <[8*FRAMES_ONE_SECOND/2]
   542 974A			TabEnemyHoverTime_MSB
   543 974A 00 00 00			.byte >[4*FRAMES_ONE_SECOND/2], >[6*FRAMES_ONE_SECOND/2], >[8*FRAMES_ONE_SECOND/2]
   544
   545 974D			TabEnemyDeltaMoveX
   546 974D 13 14 12			.byte 19, 20, 18
   547 9750			TabEnemyDeltaMoveY
   548 9750 1E 20 1C			.byte 30, 32, 28
   549
   550 				;TabRandomEnemyDirection
   551 				;	.byte 0,0,0, 1,1,1, 2,2,2,2, 3,3,3, 4,4,4
   552
   553 				;----------------------------------------
   554 9753			TabEnemyShapeP3
   555 				; 	.byte %00000000
   556 				; 	.byte %00000000
   557 				; 	.byte %00000000
   558 				; 	.byte %00000000
   559 				; 	.byte %00000000
   560
   561 				; 	.byte %00000000
   562 				; 	.byte %00000000
   563 9753 30				.byte %00110000
   564 9754 48				.byte %01001000
   565 9755 FC				.byte %11111100
   566
   567 9756 FC				.byte %11111100
   568 9757 78				.byte %01111000
   569 				; 	.byte %00000000
   570 				; 	.byte %00000000
   571
   572 9758			TabEnemyShapeM3M2M1
   573 9758 30				.byte %00110000
   574 9759 68				.byte %01101000
   575 975A 48				.byte %01001000
   576 975B 48				.byte %01001000
   577 975C 48				.byte %01001000
   578
   579 975D 48				.byte %01001000
   580 975E 48				.byte %01001000
   581 975F 84				.byte %10000100
   582 9760 78				.byte %01111000
   583 9761 00				.byte %00000000
   584
   585 9762 00				.byte %00000000
   586 9763 00				.byte %00000000
   587 9764 78				.byte %01111000
   588 9765 30				.byte %00110000
   589
   590 9766			TabEnemyAnimM3M2M1_S1
   591 9766 68				.byte %01101000
   592 9767 48				.byte %01001000
   593 9768 48				.byte %01001000
   594 9769 48				.byte %01001000
   595 976A 48				.byte %01001000
   596 976B 48				.byte %01001000
   597 976C 84				.byte %10000100
   598 					
   599 976D			TabEnemyAnimM3M2M1_S2
   600 976D 68				.byte %01101000
   601 976E 48				.byte %01001000
   602 976F 48				.byte %01001000
   603 9770 48				.byte %01001000
   604 9771 48				.byte %01001000
   605 9772 48				.byte %01001000
   606 9773 00				.byte %00000000
   607 					
   608 9774			TabEnemyAnimM3M2M1_S3
   609 9774 68				.byte %01101000
   610 9775 48				.byte %01001000
   611 9776 48				.byte %01001000
   612 9777 48				.byte %01001000
   613 9778 48				.byte %01001000
   614 9779 48				.byte %01001000
   615 977A 84				.byte %10000100
   616 					
   617 977B			TabEnemyAnimM3M2M1_S4
   618 977B 68				.byte %01101000
   619 977C 48				.byte %01001000
   620 977D 48				.byte %01001000
   621 977E 48				.byte %01001000
   622 977F 48				.byte %01001000
   623 9780 48				.byte %01001000
   624 9781 00				.byte %00000000
   625 					
   626 9782			TabEnemyAnimM3M2M1_S5
   627 9782 68				.byte %01101000
   628 9783 48				.byte %01001000
   629 9784 48				.byte %01001000
   630 9785 48				.byte %01001000
   631 9786 48				.byte %01001000
   632 9787 48				.byte %01001000
   633 9788 84				.byte %10000100
   634
   635 9789			TabEnemyAnimM3M2M1_S6
   636 9789 48				.byte %01001000
   637 978A 48				.byte %01001000
   638 978B 48				.byte %01001000
   639 978C 48				.byte %01001000
   640 978D 48				.byte %01001000
   641 978E 48				.byte %01001000
   642 978F 84				.byte %10000100
   643 9790			TabEnemyAnimM3M2M1_S7
   644 9790 68				.byte %01101000
   645 9791 68				.byte %01101000
   646 9792 68				.byte %01101000
   647 9793 68				.byte %01101000
   648 9794 68				.byte %01101000
   649 9795 68				.byte %01101000
   650 9796 84				.byte %10000100
   651 9797			TabEnemyAnimM3M2M1_S8
   652 9797 78				.byte %01111000
   653 9798 78				.byte %01111000
   654 9799 78				.byte %01111000
   655 979A 78				.byte %01111000
   656 979B 78				.byte %01111000
   657 979C 78				.byte %01111000
   658 979D 84				.byte %10000100
   659 979E			TabEnemyAnimM3M2M1_S9
   660 979E 58				.byte %01011000
   661 979F 58				.byte %01011000
   662 97A0 58				.byte %01011000
   663 97A1 58				.byte %01011000
   664 97A2 58				.byte %01011000
   665 97A3 58				.byte %01011000
   666 97A4 84				.byte %10000100
   667
   668 97A5			TabEnemyAnimM3M2M1_S10
   669 97A5 68				.byte %01101000
   670 97A6 48				.byte %01001000
   671 97A7 48				.byte %01001000
   672 97A8 48				.byte %01001000
   673 97A9 48				.byte %01001000
   674 97AA 48				.byte %01001000
   675 97AB 84				.byte %10000100
   676 					
   677 97AC			TabEnemyAnimM3M2M1_S11
   678 97AC 68				.byte %01101000
   679 97AD 48				.byte %01001000
   680 97AE 48				.byte %01001000
   681 97AF 48				.byte %01001000
   682 97B0 48				.byte %01001000
   683 97B1 48				.byte %01001000
   684 97B2 00				.byte %00000000
   685
   686 = 000B			ENEMY1_ANIM1_FRAMES = 11
   687 = 0007			ENEMY1_ANIM1_FRAME_SIZE = 7
   688
   689 97B3			TabEnemyAnimFrameTime
   690 97B3 06 06 06 1E 5A 03 + 	.byte 6, 6, 6, 30, 90, 3, 3, 1, 3, 90, 30
   691 					
   692 97BE			TabEnemyAnimM3M2M1_LSB
   693 					// .byte <[TabEnemyAnimM3M2M1_S1-1], <[TabEnemyAnimM3M2M1_S2-1], <[TabEnemyAnimM3M2M1_S3-1]
   694 					// .byte <[TabEnemyAnimM3M2M1_S4-1], <[TabEnemyAnimM3M2M1_S5-1], <[TabEnemyAnimM3M2M1_S6-1]
   695 					// .byte <[TabEnemyAnimM3M2M1_S7-1], <[TabEnemyAnimM3M2M1_S8-1], <[TabEnemyAnimM3M2M1_S8-1]
   696 					// .byte <[TabEnemyAnimM3M2M1_S10-1], <[TabEnemyAnimM3M2M1_S11-1]
   697 97BE 66 6D 74			.byte <TabEnemyAnimM3M2M1_S1, <TabEnemyAnimM3M2M1_S2, <TabEnemyAnimM3M2M1_S3
   698 97C1 7B 82 89			.byte <TabEnemyAnimM3M2M1_S4, <TabEnemyAnimM3M2M1_S5, <TabEnemyAnimM3M2M1_S6
   699 97C4 90 97 97			.byte <TabEnemyAnimM3M2M1_S7, <TabEnemyAnimM3M2M1_S8, <TabEnemyAnimM3M2M1_S8
   700 97C7 A5 AC			.byte <TabEnemyAnimM3M2M1_S10, <TabEnemyAnimM3M2M1_S11
   701 					
   702 97C9			TabEnemyAnimM3M2M1_MSB
   703 					// .byte >[TabEnemyAnimM3M2M1_S1-1], >[TabEnemyAnimM3M2M1_S2-1], >[TabEnemyAnimM3M2M1_S3-1]
   704 					// .byte >[TabEnemyAnimM3M2M1_S4-1], >[TabEnemyAnimM3M2M1_S5-1], >[TabEnemyAnimM3M2M1_S6-1]
   705 					// .byte >[TabEnemyAnimM3M2M1_S7-1], >[TabEnemyAnimM3M2M1_S8-1], >[TabEnemyAnimM3M2M1_S8-1]
   706 					// .byte >[TabEnemyAnimM3M2M1_S10-1], >[TabEnemyAnimM3M2M1_S11-1]
   707 97C9 97 97 97			.byte >TabEnemyAnimM3M2M1_S1, >TabEnemyAnimM3M2M1_S2, >TabEnemyAnimM3M2M1_S3
   708 97CC 97 97 97			.byte >TabEnemyAnimM3M2M1_S4, >TabEnemyAnimM3M2M1_S5, >TabEnemyAnimM3M2M1_S6
   709 97CF 97 97 97			.byte >TabEnemyAnimM3M2M1_S7, >TabEnemyAnimM3M2M1_S8, >TabEnemyAnimM3M2M1_S8
   710 97D2 97 97			.byte >TabEnemyAnimM3M2M1_S10, >TabEnemyAnimM3M2M1_S11
   711 					
   712 				;----------------------------------------
   713 97D4			TabExplosionAnimP3_S1
   714 97D4 00				.byte %00000000
   715 97D5 00				.byte %00000000
   716 97D6 00				.byte %00000000
   717 97D7 00				.byte %00000000
   718 97D8 00				.byte %00000000
   719 97D9 00				.byte %00000000
   720 97DA 00				.byte %00000000
   721 97DB 00				.byte %00000000
   722 97DC 00				.byte %00000000
   723 97DD 08				.byte %00001000
   724 97DE 3E				.byte %00111110
   725
   726 97DF 3E				.byte %00111110
   727 97E0 08				.byte %00001000
   728 97E1 00				.byte %00000000
   729 97E2 00				.byte %00000000
   730 97E3 00				.byte %00000000
   731 97E4 00				.byte %00000000
   732 97E5 00				.byte %00000000
   733 97E6 00				.byte %00000000
   734 97E7 00				.byte %00000000
   735 97E8 00				.byte %00000000
   736 97E9 00				.byte %00000000
   737
   738 97EA			TabExplosionAnimP3_S2
   739 97EA 00				.byte %00000000
   740 97EB 00				.byte %00000000
   741 97EC 00				.byte %00000000
   742 97ED 00				.byte %00000000
   743 97EE 00				.byte %00000000
   744 97EF 00				.byte %00000000
   745 97F0 08				.byte %00001000
   746 97F1 08				.byte %00001000
   747 97F2 14				.byte %00010100
   748 97F3 14				.byte %00010100
   749 97F4 00				.byte %00000000
   750
   751 97F5 00				.byte %00000000
   752 97F6 14				.byte %00010100
   753 97F7 14				.byte %00010100
   754 97F8 08				.byte %00001000
   755 97F9 08				.byte %00001000
   756 97FA 00				.byte %00000000
   757 97FB 00				.byte %00000000
   758 97FC 00				.byte %00000000
   759 97FD 00				.byte %00000000
   760 97FE 00				.byte %00000000
   761 97FF 00				.byte %00000000
   762
   763 9800			TabExplosionAnimP3_S3
   764 9800 00				.byte %00000000
   765 9801 00				.byte %00000000
   766 9802 00				.byte %00000000
   767 9803 00				.byte %00000000
   768 9804 08				.byte %00001000
   769 9805 08				.byte %00001000
   770 9806 22				.byte %00100010
   771 9807 22				.byte %00100010
   772 9808 00				.byte %00000000
   773 9809 00				.byte %00000000
   774 980A 00				.byte %00000000
   775
   776 980B 00				.byte %00000000
   777 980C 00				.byte %00000000
   778 980D 00				.byte %00000000
   779 980E 22				.byte %00100010
   780 980F 22				.byte %00100010
   781 9810 08				.byte %00001000
   782 9811 08				.byte %00001000
   783 9812 00				.byte %00000000
   784 9813 00				.byte %00000000
   785 9814 00				.byte %00000000
   786 9815 00				.byte %00000000
   787
   788 9816			TabExplosionAnimP3_S4
   789 9816 00				.byte %00000000
   790 9817 00				.byte %00000000
   791 9818 08				.byte %00001000
   792 9819 08				.byte %00001000
   793 981A 41				.byte %01000001
   794 981B 41				.byte %01000001
   795 981C 00				.byte %00000000
   796 981D 00				.byte %00000000
   797 981E 00				.byte %00000000
   798 981F 00				.byte %00000000
   799 9820 00				.byte %00000000
   800
   801 9821 00				.byte %00000000
   802 9822 00				.byte %00000000
   803 9823 00				.byte %00000000
   804 9824 00				.byte %00000000
   805 9825 00				.byte %00000000
   806 9826 41				.byte %01000001
   807 9827 41				.byte %01000001
   808 9828 08				.byte %00001000
   809 9829 08				.byte %00001000
   810 982A 00				.byte %00000000
   811 982B 00				.byte %00000000
   812
   813
   814 982C			TabExplosionAnimM3M2M1_S1
   815 982C 00				.byte %00000000
   816 982D 00				.byte %00000000
   817 982E 00				.byte %00000000
   818 982F 00				.byte %00000000
   819 9830 00				.byte %00000000
   820 9831 00				.byte %00000000
   821 9832 00				.byte %00000000
   822 9833 20				.byte %00100000
   823 9834 A8				.byte %10101000
   824 9835 88				.byte %10001000
   825 9836 00				.byte %00000000
   826
   827 9837 00				.byte %00000000
   828 9838 88				.byte %10001000
   829 9839 A8				.byte %10101000
   830 983A 20				.byte %00100000
   831 983B 00				.byte %00000000
   832 983C 00				.byte %00000000
   833 983D 00				.byte %00000000
   834 983E 00				.byte %00000000
   835 983F 00				.byte %00000000
   836 9840 00				.byte %00000000
   837 9841 00				.byte %00000000
   838
   839 9842			TabExplosionAnimM3M2M1_S2
   840 9842 00				.byte %00000000
   841 9843 00				.byte %00000000
   842 9844 00				.byte %00000000
   843 9845 00				.byte %00000000
   844 9846 20				.byte %00100000
   845 9847 20				.byte %00100000
   846 9848 88				.byte %10001000
   847 9849 88				.byte %10001000
   848 984A 00				.byte %00000000
   849 984B 00				.byte %00000000
   850 984C 00				.byte %00000000
   851
   852 984D 00				.byte %00000000
   853 984E 00				.byte %00000000
   854 984F 00				.byte %00000000
   855 9850 88				.byte %10001000
   856 9851 88				.byte %10001000
   857 9852 20				.byte %00100000
   858 9853 20				.byte %00100000
   859 9854 00				.byte %00000000
   860 9855 00				.byte %00000000
   861 9856 00				.byte %00000000
   862 9857 00				.byte %00000000
   863
   864 9858			TabExplosionAnimM3M2M1_S3
   865 9858 00				.byte %00000000
   866 9859 00				.byte %00000000
   867 985A 20				.byte %00100000
   868 985B 20				.byte %00100000
   869 985C 88				.byte %10001000
   870 985D 88				.byte %10001000
   871 985E 00				.byte %00000000
   872 985F 00				.byte %00000000
   873 9860 00				.byte %00000000
   874 9861 00				.byte %00000000
   875 9862 00				.byte %00000000
   876
   877 9863 00				.byte %00000000
   878 9864 00				.byte %00000000
   879 9865 00				.byte %00000000
   880 9866 00				.byte %00000000
   881 9867 00				.byte %00000000
   882 9868 88				.byte %10001000
   883 9869 88				.byte %10001000
   884 986A 20				.byte %00100000
   885 986B 20				.byte %00100000
   886 986C 00				.byte %00000000
   887 986D 00				.byte %00000000
   888
   889 986E			TabExplosionAnimM3M2M1_S4
   890 986E 20				.byte %00100000
   891 986F 20				.byte %00100000
   892 9870 88				.byte %10001000
   893 9871 88				.byte %10001000
   894 9872 00				.byte %00000000
   895 9873 00				.byte %00000000
   896 9874 00				.byte %00000000
   897 9875 00				.byte %00000000
   898 9876 00				.byte %00000000
   899 9877 00				.byte %00000000
   900 9878 00				.byte %00000000
   901
   902 9879 00				.byte %00000000
   903 987A 00				.byte %00000000
   904 987B 00				.byte %00000000
   905 987C 00				.byte %00000000
   906 987D 00				.byte %00000000
   907 987E 00				.byte %00000000
   908 987F 00				.byte %00000000
   909 9880 88				.byte %10001000
   910 9881 88				.byte %10001000
   911 9882 20				.byte %00100000
   912 9883 20				.byte %00100000
   913
   914
   915 9884			TabExplosionAnimOffsetM3
   916 9884 03 02 01 00			.byte 3, 2, 1, 0
   917 9888			TabExplosionAnimOffsetM2
   918 9888 01 02 03 04			.byte 1, 2, 3, 4
   919 988C			TabExplosionAnimOffsetM1
   920 988C 01 02 03 04			.byte 1, 2, 3, 4
   921 					
   922 = 0004			EXPLOSION1_ANIM1_FRAMES = 4
   923 = 0016			EXPLOSION1_ANIM1_FRAME_SIZE = 22
   924
   925 9890			TabExplosionAnimFrameTime
   926 9890 03 03 03 04			.byte 3, 3, 3, 4
   927 					
   928 9894			TabExplosionAnimP3_LSB
   929 					// .byte <[TabExplosionAnimP3_S1-1], <[TabExplosionAnimP3_S2-1], <[TabExplosionAnimP3_S3-1], <[TabExplosionAnimP3_S4-1]
   930 9894 D4 EA 00 16			.byte <TabExplosionAnimP3_S1, <TabExplosionAnimP3_S2, <TabExplosionAnimP3_S3, <TabExplosionAnimP3_S4
   931 					
   932 9898			TabExplosionAnimP3_MSB
   933 					// .byte >[TabExplosionAnimP3_S1-1], >[TabExplosionAnimP3_S2-1], >[TabExplosionAnimP3_S3-1], >[TabExplosionAnimP3_S4-1]
   934 9898 97 97 98 98			.byte >TabExplosionAnimP3_S1, >TabExplosionAnimP3_S2, >TabExplosionAnimP3_S3, >TabExplosionAnimP3_S4
   935 					
   936 989C			TabExplosionAnimM3M2M1_LSB
   937 					// .byte <[TabExplosionAnimM3M2M1_S1-1], <[TabExplosionAnimM3M2M1_S2-1], <[TabExplosionAnimM3M2M1_S3-1], <[TabExplosionAnimM3M2M1_S4-1]
   938 989C 2C 42 58 6E			.byte <TabExplosionAnimM3M2M1_S1, <TabExplosionAnimM3M2M1_S2, <TabExplosionAnimM3M2M1_S3, <TabExplosionAnimM3M2M1_S4
   939 					
   940 98A0			TabExplosionAnimM3M2M1_MSB
   941 					// .byte >[TabExplosionAnimM3M2M1_S1-1], >[TabExplosionAnimM3M2M1_S2-1], >[TabExplosionAnimM3M2M1_S3-1], >[TabExplosionAnimM3M2M1_S4-1]
   942 98A0 98 98 98 98			.byte >TabExplosionAnimM3M2M1_S1, >TabExplosionAnimM3M2M1_S2, >TabExplosionAnimM3M2M1_S3, >TabExplosionAnimM3M2M1_S4
   943 					
   944 				;----------------------------------------
   945 				.if .def PAL_VERSION
   946 = 0055			ENEMY1_SINE_TAB_SIZE = 85
   947 				.else
   948 				ENEMY1_SINE_TAB_SIZE = 102
   949 				.endif
   950
   951 98A4			TabEnemySineY
   952 98A4 07 08 08 09 09 0A + 	.byte sin(7,7,ENEMY1_SINE_TAB_SIZE)
   953 					
   954 				.endif
   955
   956
   957 				; this is for a game display list of 28 lines (should be only MAX_BALLS_IN_HUD..)
   958 98F9			TabDL1LineAddressInverse_LSB
   959 98F9 60 40 20 00 E0 C0 + 	:28 .byte <[DL1_data_address+[27-#]*BYTES_LINE]
   960
   961 9915			TabDL1LineAddressInverse_MSB
   962 9915 AB AB AB AB AA AA + 	:28 .byte >[DL1_data_address+[27-#]*BYTES_LINE]
   963
   964
   965 				; these tables are for the normal game mode (tree)
   966 9931			TabLevelName
   967 9931 11 21 12 21 12 22 + 	.sb "1A2A2B3A3B3C4A4B4C4D5A5B5C5D5E6A6B6C6D6E6F7A7B7C7D7E7F7G"
   968 				;		0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7
   969
   970 9969			TabLevelLeftExit
   971 9969 01 03 04 06 07 08 + 	.byte 1, 3,4, 6,7,8, 10,11,12,13, 15,16,17,18,19, 21,22,23,24,25,26
   972
   973 				; TabLevelRightExit
   974 				; 	.by +1, 1, 3,4, 6,7,8, 10,11,12,13, 15,16,17,18,19, 21,22,23,24,25,26
   975
   976 997E			TabLevelUnlocked
   977 997E 00 00 00 00 00 00 + 	:MAX_LEVEL_NUM .byte 0
   978
   979
   980 				; these tables are for the extra game mode (linear)
   981 999A			TabLevelNameExtra
   982 999A 21 11 22 11 22 12 + 	.sb "A1B1B2C1C2D1D2E1E2F1F2G1G2H1H2I1I2J1J2K1K2L1L2M1M2N1N2"
   983 				;		0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6
   984
   985 99D0			TabLevelLeftExitExtra
   986 99D0 01 03 03 05 05 07 + 	.byte 1, 3,3, 5,5, 7,7, 9,9, 11,11, 13,13, 15,15, 17,17, 19,19, 21,21, 23,23, 25,25
   987
   988 				; TabLevelRightExitExtra
   989 				;	.by +1, 1, 3,3, 5,5, 7,7, 9,9, 11,11, 13,13, 15,15, 17,17, 19,19, 21,21, 23,23, 25,25
   990
   991 99E9			TabLevelUnlockedExtra
   992 99E9 00 00 00 00 00 00 + 	:MAX_LEVEL_NUM_EXTRA .byte 0
   993
   994
   995 				; table to save the 4 chars used for the start level highlight effect (2 hard bricks)
   996 9A04			TabSaveHighlightChar
   997 9A04 00 00 00 00 00 00 + 	:32 .byte 0
   998
  3722
  3723
  3724 				;================================================================================
  3725
  3726 9A24			END_CODE_AREA
  3727 					.if END_CODE_AREA > DL1_address
  3728 						.error "over limit DL1_address"
  3729 					.endif
  3730
  3731 				;================================================================================
  3732
  3733 9A24				org DL1_address
  3734
  3735 A000-A2F2> B0			.byte DL_BLANK_4+DL_DLI_MASK
  3736
  3737 A001 C4				.byte GM_CHAR_A4+DL_LMS_MASK+DL_DLI_MASK
  3738 A002 00 A8			.word DL1_data_address
  3739
  3740 A004 84 84 84 84 84 84 + 	:18 .byte GM_CHAR_A4+DL_DLI_MASK		; dli's for the 18 lines of bricks
  3741
  3742 				.if .def PAL_VERSION
  3743 A016 84				.byte GM_CHAR_A4+DL_DLI_MASK			; extra dli's to read the mouse
  3744 A017 84				.byte GM_CHAR_A4+DL_DLI_MASK
  3745 A018 84				.byte GM_CHAR_A4+DL_DLI_MASK
  3746 A019 84				.byte GM_CHAR_A4+DL_DLI_MASK
  3747 A01A 84				.byte GM_CHAR_A4+DL_DLI_MASK
  3748 A01B 84				.byte GM_CHAR_A4+DL_DLI_MASK
  3749 A01C 84				.byte GM_CHAR_A4+DL_DLI_MASK
  3750 				.else
  3751 					.byte GM_CHAR_A4+DL_DLI_MASK			; extra dli's to read the mouse
  3752 					.byte GM_CHAR_A4
  3753 					.byte GM_CHAR_A4+DL_DLI_MASK
  3754 					.byte GM_CHAR_A4
  3755 					.byte GM_CHAR_A4+DL_DLI_MASK
  3756 					.byte GM_CHAR_A4
  3757 					.byte GM_CHAR_A4+DL_DLI_MASK
  3758 				.endif
  3759
  3760 A01D 84				.byte GM_CHAR_A4+DL_DLI_MASK			; dli for the paddle colors
  3761 A01E 04				.byte GM_CHAR_A4
  3762
  3763 				; 	.byte GM_CHAR_G0+DL_LMS_MASK
  3764 				; 	.word DLInfoLine
  3765
  3766 A01F 41				.byte DL_JVB
  3767 A020 00 A0			.word DL1_address
  3768
  3769
  3770 				;----------------------------------------
  3771 				; tittle screen display list
  3772 A022			DL2_address
  3773 A022 70 70			:2 .byte DL_BLANK_8
  3774 A024 F0				.byte DL_BLANK_8+DL_DLI_MASK
  3775
  3776 A025 42				.byte GM_CHAR_G0+DL_LMS_MASK			; score text
  3777 A026 4E A0			.word DL2_data_address
  3778 A028 02				.byte GM_CHAR_G0					; score values
  3779
  3780 A029 70 70 70 70			:4 .byte DL_BLANK_8
  3781 A02D F0				.byte DL_BLANK_8+DL_DLI_MASK
  3782
  3783 A02E 02				.byte GM_CHAR_G0					; name
  3784 A02F 70				.byte DL_BLANK_8
  3785 A030 F0				.byte DL_BLANK_8+DL_DLI_MASK
  3786 A031 02				.byte GM_CHAR_G0					; music
  3787
  3788 A032 70 70 70			:3 .byte DL_BLANK_8
  3789 A035 F0				.byte DL_BLANK_8+DL_DLI_MASK
  3790
  3791 A036 C2				.byte GM_CHAR_G0+DL_LMS_MASK+DL_DLI_MASK	; options 1
  3792 A037 CE A0			.word DL2_options_line
  3793 A039 30				.byte DL_BLANK_4
  3794 A03A C2				.byte GM_CHAR_G0+DL_LMS_MASK+DL_DLI_MASK	; options 2
  3795 A03B EE A0			.word DL2_options_line+BYTES_LINE
  3796 A03D 30				.byte DL_BLANK_4
  3797
  3798 A03E C2				.byte GM_CHAR_G0+DL_LMS_MASK+DL_DLI_MASK	; options 3
  3799 A03F			DL2_LMS_options_line3
  3800 A03F 0E A1			.word DL2_options_line+BYTES_LINE*2
  3801 A041 30				.byte DL_BLANK_4
  3802 A042 C2				.byte GM_CHAR_G0+DL_LMS_MASK+DL_DLI_MASK	; options 4
  3803 A043 2E A1			.word DL2_options_line+BYTES_LINE*3
  3804 A045 30				.byte DL_BLANK_4
  3805
  3806 A046 70 70			:2 .byte DL_BLANK_8
  3807
  3808 A048 42				.byte GM_CHAR_G0+DL_LMS_MASK			; credits
  3809 A049 6E A1			.word DL2_credits_line
  3810
  3811 A04B 41				.byte DL_JVB
  3812 A04C 22 A0			.word DL2_address
  3813
  3814
  3815 				;----------------------------------------
  3816 A04E			DL2_data_address
  3817 A04E 00 00 00 00 00 11 + 	.sb "     1UP   HIGH SCORE  LEVEL    "
  3818 A06E			DL2_score_line
  3819 					;.sb "       00     10000      1A     "
  3820 A06E 00 00 00 00 00 00 + 	.sb "       00     20000      A1     "
  3821
  3822 				.if .def PAL_VERSION
  3823 A08E 00 30 21 24 00 11 + 	.sb " PAD 1.84 PAL     NRV 1995-2018 "
  3824 				.else
  3825 					.sb " PAD 1.84 NTSC    NRV 1995-2018 "
  3826 				.endif
  3827
  3828 					;.sb "       Insert coin & play!      "
  3829 A0AE 00 00 00 00 00 00 + 	.sb "         Music by MIKER!        "
  3830
  3831 A0CE			DL2_options_line
  3832 A0CE 00 00 00 00 00 00 + 	.sb "       ","G"+128,"ame mode: Extra         "
  3833 					;.sb "       ","D"+128,"ifficulty: Casual       "
  3834 					;.sb "       ","V"+128,"aus type: Normal        "
  3835 A0EE 00 00 00 00 00 00 + 	.sb "       ","C"+128,"ontroller: Atari        "
  3836 A10E 00 00 00 00 00 00 + 	.sb "       ","M"+128,"ouse max step: 2        "
  3837 A12E 00 00 00 00 00 00 + 	.sb "       ","S"+128,"tarting level: A1       "
  3838 A14E 00 00 00 00 00 00 + 	.sb "       ","P"+128,"addle angle: 100%       "
  3839
  3840 A16E			DL2_credits_line
  3841 A16E 00 00 00 00 00 00 + 	.sb "                    CREDIT  1   "
  3842
  3843
  3844 A18E			DLInfoLine
  3845 					;.sb "  steps: 00                     "
  3846 A18E 00 00 73 63 6F 72 + 	.sb "  score: 0000000     lives: 00  "
  3847
  3848
  3849 A1AE			Text_difficulty1
  3850 A1AE 25 61 73 79 00 00		.sb "Easy  "
  3851
  3852 A1B4			Text_difficulty2
  3853 A1B4 23 61 73 75 61 6C		.sb "Casual"
  3854
  3855 A1BA			Text_difficulty3
  3856 A1BA 21 72 63 61 64 65		.sb "Arcade"
  3857
  3858 A1C0			Text_difficulty4
  3859 A1C0 25 78 74 72 61 00		.sb "Extra "
  3860
  3861
  3862 				; Text_vaus_type1
  3863 				; 	.sb "Normal"
  3864 				;
  3865 				; Text_vaus_type2
  3866 				; 	.sb "Smooth"
  3867
  3868
  3869 A1C6			Text_controller_type1
  3870 A1C6 21 74 61 72 69 00 + 	.sb "Atari   "
  3871
  3872 A1CE			Text_controller_type2
  3873 A1CE 21 6D 69 67 61 00 + 	.sb "Amiga   "
  3874
  3875 A1D6			Text_controller_type3
  3876 A1D6 21 74 61 72 69 00 + 	.sb "Atari P2"
  3877
  3878 A1DE			Text_controller_type4
  3879 A1DE 21 6D 69 67 61 00 + 	.sb "Amiga P2"
  3880
  3881 A1E6			Text_controller_type5
  3882 A1E6 30 61 64 64 6C 65 + 	.sb "Paddle 1"
  3883
  3884 A1EE			Text_controller_type6
  3885 A1EE 30 61 64 64 6C 65 + 	.sb "Paddle 2"
  3886
  3887 A1F6			Text_controller_type7
  3888 A1F6 30 61 64 64 6C 65 + 	.sb "Paddle 3"
  3889
  3890 A1FE			Text_controller_type8
  3891 A1FE 30 61 64 64 6C 65 + 	.sb "Paddle 4"
  3892
  3893
  3894 A206			Text_paddle_angle1
  3895 A206 12 15 05 00			.sb "25% "
  3896
  3897 A20A			Text_paddle_angle2
  3898 A20A 15 10 05 00			.sb "50% "
  3899
  3900 A20E			Text_paddle_angle3
  3901 A20E 17 15 05 00			.sb "75% "
  3902
  3903 A212			Text_paddle_angle4
  3904 A212 11 10 10 05			.sb "100%"
  3905
  3906
  3907 A216			Tab_score_line_easy
  3908 A216 00 00 00 00 00 00 + 	.sb "       00     10000      1A     "
  3909
  3910 A236			Tab_score_line_casual
  3911 A236 00 00 00 00 00 00 + 	.sb "       00     10000      1A     "
  3912
  3913 A256			Tab_score_line_arcade
  3914 A256 00 00 00 00 00 00 + 	.sb "       00     50000      1A     "
  3915
  3916 A276			Tab_score_line_extra
  3917 A276 00 00 00 00 00 00 + 	.sb "       00     20000      A1     "
  3918
  3919 A296			TabHighScoreEasy
  3920 A296 00 10 00			.byte $00, $10, $00
  3921 A299			TabHighLevelEasy
  3922 A299 00				.byte 0
  3923
  3924 A29A			TabHighScoreCasual
  3925 A29A 00 10 00			.byte $00, $10, $00
  3926 A29D			TabHighLevelCasual
  3927 A29D 00				.byte 0
  3928
  3929 A29E			TabHighScoreArcade
  3930 A29E 00 50 00			.byte $00, $50, $00
  3931 A2A1			TabHighLevelArcade
  3932 A2A1 00				.byte 0
  3933
  3934 A2A2			TabHighScoreExtra
  3935 A2A2 00 20 00			.byte $00, $20, $00
  3936 A2A5			TabHighLevelExtra
  3937 A2A5 00				.byte 0
  3938
  3939
  3940 				;----------------------------------------
  3941 A2A6			DL_NTSC_address
  3942 A2A6 70 70 70 70 70 70 + 	:7 .byte DL_BLANK_8
  3943
  3944 A2AD 42				.byte GM_CHAR_G0+DL_LMS_MASK
  3945 A2AE			DL_NTSC_message
  3946 A2AE B3 A2			.word DL_NTSC_data_address
  3947
  3948 A2B0 41				.byte DL_JVB
  3949 A2B1 A6 A2			.word DL_NTSC_address
  3950
  3951 A2B3			DL_NTSC_data_address
  3952 A2B3 00 00 00 00 00 00 + 	.sb "      NEEDS A NTSC SYSTEM!      "
  3953
  3954
  3955 				/*DL_PAL_address
  3956 					:7 .byte DL_BLANK_8
  3957
  3958 					.byte GM_CHAR_G0+DL_LMS_MASK
  3959 					.word DL_PAL_data_address
  3960
  3961 					.byte DL_JVB
  3962 					.word DL_PAL_address*/
  3962
  3963
  3964 A2D3			DL_PAL_data_address
  3965 A2D3 00 00 00 00 00 00 + 	.sb "      NEEDS A PAL SYSTEM!       "
  3966
  3967 				; beware, this area is almost full
  3968
  3969 				;================================================================================
  3970
  3971 A2F3			END_DL_AREA
  3972 					.if END_DL_AREA > m0_adr
  3973 						.error "over limit m0_adr"
  3974 					.endif
  3975
  3976 				;================================================================================
  3977
  3978 A2F3				org PM_zone_address
  3979
  3980 = A300			m0_adr = PM_zone_address+768
  3981
  3982 = A400			p0_adr = m0_adr+256
  3983 = A500			p1_adr = p0_adr+256
  3984 = A600			p2_adr = p1_adr+256
  3985 = A700			p3_adr = p2_adr+256
  3986
  3987
  3988 				;================================================================================
  3989
  3990 A000				org DL1_data_address
  3991
  3992 A800-ABBF> 2D 28 A9 A1 + 	ins "data/padmap2.raw"
  3993
  3994
  3995 				;================================================================================
  3996
  3997 ABC0				org Atari_font_address
  3998
  3999 B000-BFFF> 00 00 00 00 + 	ins "data/atari.fnt"
  4000
  4001
  4002 				;================================================================================
  4003
  4004 B400				org Font1_address
  4005
  4006 B400 54 51 45 14 52 49 + 	ins "data/pad2.fnt"
  4007
  4008
  4009 				;================================================================================
  4010
  4011 B800				org Font_background_address
  4012
  4013 B800 54 51 45 14 52 49 + 	ins "data/padbkg1b.fnt"
  4014 BC00 00 01 01 05 04 14 + 	ins "data/padbkg2.fnt"
  4015
  4016
  4017 				;================================================================================
  4018
  4019 					.print "------------------------------------------------------------"
  4019 				------------------------------------------------------------
  4020 					.print "Vars area: ", Vars_address, " [", END_VARS_AREA-Vars_address, "] (free: ", Static_vars_address-END_VARS_AREA,")"
  4020 				Vars area: $0000 [$00BC] (free: $0016)
  4021 					.print "Static vars area: ", Static_vars_address, " [", END_STATIC_VARS_AREA-Static_vars_address, "] (free: ", RMT_vars_address-END_STATIC_VARS_AREA,")"
  4021 				Static vars area: $00D2 [$000F] (free: $0006)
  4022 					.print " "
  4022 				 
  4023 					.print "RMT song: ", RMT_song_address, " [", END_RMT_SONG_AREA-RMT_song_address, "]"
  4023 				RMT song: $2800 [$093A]
  4024 					.print "RMT player: ", RMT_address, " [", END_RMT_PLAYER_AREA-RMT_address, "]"
  4024 				RMT player: $3400 [$0760]
  4025 					.print " "
  4025 				 
  4026 					.print "Code area: ", Prog_start, " [", START_LEVELS_AREA-Prog_start, "]"
  4026 				Code area: $4000 [$2866]
  4027 					.print "Levels area: ", START_LEVELS_AREA, " [", END_LEVELS_AREA-START_LEVELS_AREA, "]"
  4027 				Levels area: $6866 [$2545]
  4028 					.print "Tables area: ", START_TABLES_AREA, " [", END_CODE_AREA-START_TABLES_AREA, "]"
  4028 				Tables area: $8E00 [$0C24]
  4029 					.print " "
  4029 				 
  4030 					.print "DL area: ", DL1_address, " [", END_DL_AREA-DL1_address, "]"
  4030 				DL area: $A000 [$02F3]
  4031 					.print "------------------------------------------------------------"
  4031 				------------------------------------------------------------
  4032 					.print " "
  4032 				 
  4033
  4034
  4035 				;================================================================================
  4036
  4037 C000				org $02e0
  4038 02E0-02E1> 00 40			.word Prog_start
  4039
  4040
  4041
