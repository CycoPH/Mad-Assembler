mads 2.1.6 build 9 (30 Aug 22)
Source: D:\!Delphi\mads\examples\games\5dots\5dots.asm
     1 				;********************************************************************************
     2 				;
     3 				;    5 dots
     4 				;    anticShop
     5 				;    bocianu@gmail.com
     6 				;
     7 				;********************************************************************************
     8
     9 				;*************************************  INCLUDES
    10
    11 				 icl 'atari.hea'
Source: D:\!Delphi\mads\examples\games\5dots\atari.hea
     1
     2 				.enum	@dmactl
     3 = 0000				blank	= %00
     4 = 0001				narrow	= %01
     5 = 0002				standard= %10
     6 = 0003				wide	= %11
     7 = 0004				missiles= %100
     8 = 0008				players	= %1000
     9 = 0010				lineX1	= %10000
    10 = 0000				lineX2	= %00000
    11 = 0020				dma	= %100000
    12 				.ende
    13
    14 = 003F			scr48	= @dmactl(wide|dma|players|missiles|lineX1)		;screen 48b
    15 = 003E			scr40	= @dmactl(standard|dma|players|missiles|lineX1)		;screen 40b
    16 = 003D			scr32	= @dmactl(narrow|dma|players|missiles|lineX1)		;screen 32b
    17
    18 				.enum	@pmcntl
    19 = 0001				missiles= %1
    20 = 0002				players	= %10
    21 = 0004				trigs	= %100
    22 				.ende
    23
    24 				.enum	@gtictl
    25 = 0000				prior0	= %0
    26 = 0001				prior1	= %1
    27 = 0002				prior2	= %10
    28 = 0004				prior4	= %100
    29 = 0008				prior8	= %1000
    30 = 0010				ply5	= %10000	; Fifth Player Enable
    31 = 0020				mlc	= %100000	; Multiple Color Player Enable
    32 = 0040				mode9	= %01000000
    33 = 0080				mode10	= %10000000
    34 = 00C0				mode11	= %11000000
    35 				.ende
    36
    37 = 022F			sdmctl  = $022F
    38
    39 				* ---------------------------------------------------------------------------------------------
    40 				* ---	OS
    41 				* ---------------------------------------------------------------------------------------------
    42
    43 = 0052			lmargin	= $52
    44 = 0053			rmargin	= $53
    45 = 0054			rowcrs	= $54
    46 = 0055			colcrs	= $55
    47
    48 				* ---------------------------------------------------------------------------------------------
    49 				* ---	KEY ($d209)
    50 				* ---------------------------------------------------------------------------------------------
    51 = 001C			key_esc		= 28
    52 = 0021			key_space	= 33
    53 = 0010			key_v		= 16
    54 = 0015			key_b		= 21
    55 = 0023			key_n		= 35
    56 = 0025			key_m		= 37
    57
    58 				* ---------------------------------------------------------------------------------------------
    59 				* ---	GTIA
    60 				* ---------------------------------------------------------------------------------------------
    61 = D000			hposp0	=	$D000		; pozioma pozycja gracza 0 (Z)
    62 = D001			hposp1	=	$D001		; pozioma pozycja gracza 1 (Z)
    63 = D002			hposp2	=	$D002		; pozioma pozycja gracza 2 (Z)
    64 = D003			hposp3	=	$D003		; pozioma pozycja gracza 3 (Z)
    65 = D004			hposm0	=	$D004		; pozioma pozycja pocisku 0 (Z)
    66 = D005			hposm1	=	$D005		; pozioma pozycja pocisku 1 (Z)
    67 = D006			hposm2	=	$D006		; pozioma pozycja pocisku 2 (Z)
    68 = D007			hposm3	=	$D007		; pozioma pozycja pocisku 3 (Z)
    69 = D008			sizep0	=	$D008		; poziomy rozmiar gracza 0 (Z)
    70 = D009			sizep1	=	$D009		; poziomy rozmiar gracza 1 (Z)
    71 = D00A			sizep2	=	$D00A		; poziomy rozmiar gracza 2 (Z)
    72 = D00B			sizep3	=	$D00B		; poziomy rozmiar gracza 3 (Z)
    73 = D00C			sizem	=	$D00C		; poziomy rozmiar pocisków (Z)
    74 = D00D			grafp0	=	$D00D		; rejestr grafiki gracza 0 (Z)
    75 = D00E			grafp1	=	$D00E		; rejestr grafiki gracza 1 (Z)
    76 = D00F			grafp2	=	$D00F		; rejestr grafiki gracza 2 (Z)
    77 = D010			grafp3	=	$D010		; rejestr grafiki gracza 3 (Z)
    78 = D011			grafm	=	$D011		; rejestr grafiki pocisków (Z)
    79 = 02C0			colpm0	=	$02C0		; rejestr koloru gracza i pocisku 0 (Z)
    80 = 02C1			colpm1	=	$02C1		; rejestr koloru gracza i pocisku 1 (Z)
    81 = 02C2			colpm2	=	$02C2		; rejestr koloru gracza i pocisku 2 (Z)
    82 = 02C3			colpm3	=	$02C3		; rejestr koloru gracza i pocisku 3 (Z)
    83 = D012			colpm0r =   $D012
    84 = D013			colpm1r =   $D013
    85 = D014			colpm2r =   $D014
    86 = D015			colpm3r =   $D015
    87
    88 = D016			colpf0	=	$D016		; rejestr koloru pola gry 0 (Z)
    89 = D017			colpf1	=	$D017		; rejestr koloru pola gry 1 (Z)
    90 = D018			colpf2	=	$D018		; rejestr koloru pola gry 2 (Z)
    91 = D019			colpf3	=	$D019		; rejestr koloru pola gry 3 (Z)
    92 = D01A			colbak	=	$D01A		; rejestr koloru t³a (Z)
    93
    94 = D016			color0	=	colpf0
    95 = D017			color1	=	colpf1
    96 = D018			color2	=	colpf2
    97 = D019			color3	=	colpf3
    98
    99 = D000			kolm0pf	=	$D000		; kolizja pocisku 0 z polem gry (O)
   100 = D001			kolm1pf	=	$D001		; kolizja pocisku 1 z polem gry (O)
   101 = D002			kolm2pf	=	$D002		; kolizja pocisku 2 z polem gry (O)
   102 = D003			kolm3pf	=	$D003		; kolizja pocisku 3 z polem gry (O)
   103 = D004			kolp0pf	=	$D004		; kolizja gracza 0 z polem gry (O)
   104 = D005			kolp1pf	=	$D005		; kolizja gracza 1 z polem gry (O)
   105 = D006			kolp2pf	=	$D006		; kolizja gracza 2 z polem gry (O)
   106 = D007			kolp3pf	=	$D007		; kolizja gracza 3 z polem gry (O)
   107 = D008			kolm0p	=	$D008		; kolizja pocisku 0 z graczem (O)
   108 = D009			kolm1p	=	$D009		; kolizja pocisku 1 z graczem (O)
   109 = D00A			kolm2p	=	$D00A		; kolizja pocisku 2 z graczem (O)
   110 = D00B			kolm3p	=	$D00B		; kolizja pocisku 3 z graczem (O)
   111 = D00C			kolp0p	=	$D00C		; kolizja gracza 0 z innym graczem (O)
   112 = D00D			kolp1p	=	$D00D		; kolizja gracza 1 z innym graczem (O)
   113 = D00E			kolp2p	=	$D00E		; kolizja gracza 2 z innym graczem (O)
   114 = D00F			kolp3p	=	$D00F		; kolizja gracza 3 z innym graczem (O)
   115 = D010			trig0	=	$D010		; stan przycisku joysticka 0 (O)
   116 = D011			trig1	=	$D011		; stan przycisku joysticka 1 (O)
   117 = D013			trig3	=	$D013		; znacznik do³¹czenia cartridge-a (O)
   118 = D014			pal 	=	$D014		; znacznik systemu TV (O)
   119
   120 = D01B			gtictl	=	$D01B		; rejestr kontroli uk³adu GTIA
   121 = D01B			gtiactl	=	gtictl
   122
   123 = D01C			vdelay	=	$D01C		; licznik opóŸnienia pionowego P/MG
   124 = D01D			pmcntl	=	$D01D		; rejestr kontroli graczy i pocisków
   125 = D01E			hitclr	=	$D01E		; rejestr kasowania rejestrów kolizji
   126 = D01F			consol	=	$D01F		; rejestr stanu klawiszy konsoli
   127
   128 				* ---------------------------------------------------------------------------------------------
   129 				* ---	POKEY
   130 				* ---------------------------------------------------------------------------------------------
   131
   132 = 0010			irqens	=	$0010		; rejestr-cieñ IRQEN
   133 = 0011			irqstat	=	$0011		; rejestr-cieñ IRQST
   134
   135 = D200			audf1	=	$d200		; czêstotliwoœæ pracy generatora 1 (Z)
   136 = D201			audc1	=	$d201		; rejestr kontroli dŸwiêku generatora 1 (Z)
   137 = D202			audf2	=	$d202		; czêstotliwoœæ pracy generatora 2 (Z)
   138 = D203			audc2	=	$d203		; rejestr kontroli dŸwiêku generatora 2 (Z)
   139 = D204			audf3	=	$d204		; czêstotliwoœæ pracy generatora 3 (Z)
   140 = D205			audc3	=	$d205		; rejestr kontroli dŸwiêku generatora 3 (Z)
   141 = D206			audf4	=	$d206		; czêstotliwoœæ pracy generatora 4 (Z)
   142 = D207			audc4	=	$d207		; rejestr kontroli dŸwiêku generatora 4 (Z)
   143
   144 = D208			audctl	=	$D208		; rejestr kontroli generatorów dŸwiêku (Z)
   145 = D209			stimer	=	$D209		; rejestr zerowania liczników (Z)
   146 = D209			kbcode	=	$D209		; kod ostatnio naciœniêtego klawisza (O)
   147 = D20A			skstres	=	$D20A		; rejestr statusu z³¹cza szeregowego (Z)
   148 = D20A			random	=	$D20A		; rejestr liczby losowej (O)
   149 = D20D			serout	=	$D20D		; szeregowy rejestr wyjœciowy (Z)
   150 = D20D			serin	=	$D20D		; szeregowy rejestr wejœciowy (O)
   151 = D20E			irqen	=	$D20E		; zezwolenie przerwañ IRQ (Z)
   152 = D20E			irqst	=	$D20E		; status przerwañ IRQ (O)
   153 = D20F			skctl	=	$D20F		; rejestr kontroli z³¹cza szeregowego (Z)
   154 = D20F			skstat	=	$D20F		; rejestr statusu z³¹cza szeregowego (O)
   155
   156 				* ---------------------------------------------------------------------------------------------
   157 				* ---	PIA
   158 				* ---------------------------------------------------------------------------------------------
   159 = D300			porta	=	$D300		; port A uk³adu PIA
   160 = D301			portb	=	$D301		; port B uk³adu PIA
   161 = D302			pactl	=	$D302		; rejestr kontroli portu A
   162 = D303			pbctl	=	$D303		; rejestr kontroli portu B
   163
   164 = 0284			strig0   =   $0284       ; stan przycisku joysticka 0 (O)
   165 = 0285			strig1   =   $0285       ; stan przycisku joysticka 1 (O)
   166 = 0278			stick0   =   $0278       ; stan joysticka 0 (O)
   167 = 0279			stick1   =   $0279       ; stan joysticka 1 (O)
   168
   169
   170 				* ---------------------------------------------------------------------------------------------
   171 				* ---	ANTIC
   172 				* ---------------------------------------------------------------------------------------------
   173 = D400			dmactl	=	$D400		; rejestr kontroli dostêpu do pamiêci
   174 = D401			chrctl	=	$D401		; rejestr kontroli wyœwietlania znaków
   175 = D402			dlptr	=	$D402		; adres programu ANTIC-a
   176 = D404			hscrol	=	$D404		; znacznik poziomego przesuwu obrazu
   177 = D405			vscrol	=	$D405		; znacznik pionowego przesuwu obrazu
   178 = D407			pmbase	=	$D407		; adres pamiêci graczy i pocisków
   179 = D409			chbase	=	$D409		; adres zestawu znaków
   180 = D40A			wsync	=	$D40A		; znacznik oczekiwania na synchronizacjê poziom¹
   181 = D40B			vcount	=	$D40B		; licznik linii obrazu
   182 = D40C			lpenh	=	$D40C		; poziome po³o¿enie pióra œwietlengo
   183 = D40D			lpenv	=	$D40D		; pionowe po³o¿enie pióra œwietlnego
   184 = D40E			nmien	=	$D40E		; rejestr zezwoleñ na przerwania NMI
   185 = D40F			nmist	=	$D40F		; rejestr statusu przerwañ NMI
   186 = 0230			sdlstl  =   $0230		; display list
   187 = 0200			vdslst  = 	$0200		; dli
   188
   189
   190
   191 				* ---------------------------------------------------------------------------------------------
   192 				* ---	OS
   193 				* ---------------------------------------------------------------------------------------------
   194
   195 = 02C4			colpf0s	=	$02C4		; rejestr-cieñ COLPF0
   196 = 02C5			colpf1s	=	$02C5		; rejestr-cieñ COLPF1
   197 = 02C6			colpf2s	=	$02C6		; rejestr-cieñ COLPF2
   198 = 02C7			colpf3s	=	$02C7		; rejestr-cieñ COLPF3
   199 = 02C8			colbaks	=	$02C8		; rejestr-cieñ COLBAK
   200
   201 				* ---------------------------------------------------------------------------------------------
   202 				* ---	HARDWARE
   203 				* ---------------------------------------------------------------------------------------------
   204
   205 = FFFA			nmivec	=	$FFFA		; wektor przerwania NMI
   206 = FFFC			resetvec=	$FFFC		; wektor przerwania RESET
   207 = FFFE			irqvec	=	$FFFE		; wektor przerwania IRQ
   208
   209 = 0012			rtclock =   18
   210
   211 = E45C			setvbv  =   $E45C
   212 = E45F			sysvbv  =   $E45F
   213
   214 = 02FC			keycode =   $02fc
   215
   216 = 02DC			helpfg  =   $02dc
   217
   218 = 026F			gprior  =   $026f
   219
   220
   221
   222 = 0340			iocb    =   $0340
   223 = E456			ciov    =   $e456
    12 = 9200			MODUL   equ $9200               ;address of RMT module
    13 = 0000			STEREOMODE  equ 0               ;0 => compile RMTplayer for mono 4 tracks
    14
    15 				    icl "rmtplayr.asm"          ;include RMT player routine
Source: D:\!Delphi\mads\examples\games\5dots\rmtplayr.asm
     1 				;*
     2 				;* Raster Music Tracker, RMT Atari routine version 1.20090108
     3 				;* (c) Radek Sterba, Raster/C.P.U., 2002 - 2009
     4 				;* http://raster.atari.org
     5 				;*
     6 				;* Warnings:
     7 				;*
     8 				;* 1. RMT player routine needs 19 itself reserved bytes in zero page (no accessed
     9 				;*    from any other routines) as well as cca 1KB of memory before the "PLAYER"
    10 				;*    address for frequency tables and functionary variables. It's:
    11 				;*	  a) from PLAYER-$03c0 to PLAYER for stereo RMTplayer
    12 				;*    b) from PLAYER-$0320 to PLAYER for mono RMTplayer
    13 				;*
    14 				;* 2. RMT player routine MUST (!!!) be compiled from the begin of the memory page.
    15 				;*    i.e. "PLAYER" address can be $..00 only!
    16 				;*
    17 				;* 3. Because of RMTplayer provides a lot of effects, it spent a lot of CPU time.
    18 				;*
    19 				;* STEREOMODE	equ 0..3			;0 => compile RMTplayer for 4 tracks mono
    20 				;*									;1 => compile RMTplayer for 8 tracks stereo
    21 				;*									;2 => compile RMTplayer for 4 tracks stereo L1 R2 R3 L4
    22 				;*									;3 => compile RMTplayer for 4 tracks stereo L1 L2 R3 R4
    23 				;*
    24 					IFT STEREOMODE==1
    25 				TRACKS		equ 8
    26 					ELS
    27 = 0004			TRACKS		equ 4
    28 					EIF
    29 				;*
    30 = A000			PLAYER		equ $a000
    31 				;*
    32 				;* RMT FEATures definitions file
    33 				;* For optimizations of RMT player routine to concrete RMT modul only!
    34 					icl "rmtFeat.asm"
Source: D:\!Delphi\mads\examples\games\5dots\rmtFeat.asm
     1 				;* --------BEGIN--------
     2 				;* D:\atari\rmt128\sdas.rmt
     3 = 0001			FEAT_SFX		equ 1
     4 = 0000			FEAT_GLOBALVOLUMEFADE	equ 0		;RMTGLOBALVOLUMEFADE variable
     5 = 0000			FEAT_NOSTARTINGSONGLINE	equ 0
     6 = 0001			FEAT_INSTRSPEED		equ 1
     7 = 0000			FEAT_CONSTANTSPEED		equ 0		;(7 times)
     8 = 0001			FEAT_COMMAND1		equ 1		;(135 times)
     9 = 0000			FEAT_COMMAND2		equ 0		;(0 times)
    10 = 0000			FEAT_COMMAND3		equ 0		;(0 times)
    11 = 0000			FEAT_COMMAND4		equ 0		;(0 times)
    12 = 0000			FEAT_COMMAND5		equ 0		;(0 times)
    13 = 0000			FEAT_COMMAND6		equ 0		;(0 times)
    14 = 0000			FEAT_COMMAND7SETNOTE		equ 0		;(0 times)
    15 = 0000			FEAT_COMMAND7VOLUMEONLY		equ 0		;(0 times)
    16 = 0001			FEAT_PORTAMENTO		equ 1		;(8 times)
    17 = 0000			FEAT_FILTER		equ 0		;(0 times)
    18 = 0000			FEAT_FILTERG0L		equ 0		;(0 times)
    19 = 0000			FEAT_FILTERG1L		equ 0		;(0 times)
    20 = 0000			FEAT_FILTERG0R		equ 0		;(0 times)
    21 = 0000			FEAT_FILTERG1R		equ 0		;(0 times)
    22 = 0000			FEAT_BASS16		equ 0		;(0 times)
    23 = 0000			FEAT_BASS16G1L		equ 0		;(0 times)
    24 = 0000			FEAT_BASS16G3L		equ 0		;(0 times)
    25 = 0000			FEAT_BASS16G1R		equ 0		;(0 times)
    26 = 0000			FEAT_BASS16G3R		equ 0		;(0 times)
    27 = 0000			FEAT_VOLUMEONLYG0L		equ 0		;(0 times)
    28 = 0000			FEAT_VOLUMEONLYG2L		equ 0		;(0 times)
    29 = 0000			FEAT_VOLUMEONLYG3L		equ 0		;(0 times)
    30 = 0000			FEAT_VOLUMEONLYG0R		equ 0		;(0 times)
    31 = 0000			FEAT_VOLUMEONLYG2R		equ 0		;(0 times)
    32 = 0000			FEAT_VOLUMEONLYG3R		equ 0		;(0 times)
    33 = 0000			FEAT_TABLETYPE		equ 0		;(0 times)
    34 = 0000			FEAT_TABLEMODE		equ 0		;(0 times)
    35 = 0000			FEAT_TABLEGO		equ 0		;(0 times)
    36 = 0000			FEAT_AUDCTLMANUALSET		equ 0		;(0 times)
    37 = 0001			FEAT_VOLUMEMIN		equ 1		;(3 times)
    38 = 0001			FEAT_EFFECTVIBRATO		equ 1		;(1 times)
    39 = 0001			FEAT_EFFECTFSHIFT		equ 1		;(6 times)
    40 				;* --------END--------
    35 				;*
    36 				;* RMT ZeroPage addresses
    37 					org 203
    38 				p_tis
    39 				p_instrstable	org *+2
    40 				p_trackslbstable	org *+2
    41 				p_trackshbstable	org *+2
    42 				p_song			org *+2
    43 				ns				org *+2
    44 				nr				org *+2
    45 				nt				org *+2
    46 				reg1			org *+1
    47 				reg2			org *+1
    48 				reg3			org *+1
    49 				tmp				org *+1
    50 					IFT FEAT_COMMAND2
    51 				frqaddcmd2		org *+1
    52 					EIF
    53 					IFT TRACKS>4
    54 					org PLAYER-$400+$40
    55 					ELS
    56 					org PLAYER-$400+$e0
    57 					EIF
    58 				track_variables
    59 				trackn_db	org *+TRACKS
    60 				trackn_hb	org *+TRACKS
    61 				trackn_idx	org *+TRACKS
    62 				trackn_pause	org *+TRACKS
    63 				trackn_note	org *+TRACKS
    64 				trackn_volume	org *+TRACKS
    65 				trackn_distor 	org *+TRACKS
    66 				trackn_shiftfrq	org *+TRACKS
    67 					IFT FEAT_PORTAMENTO
    68 				trackn_portafrqc org *+TRACKS
    69 				trackn_portafrqa org *+TRACKS
    70 				trackn_portaspeed org *+TRACKS
    71 				trackn_portaspeeda org *+TRACKS
    72 				trackn_portadepth org *+TRACKS
    73 					EIF
    74 				trackn_instrx2	org *+TRACKS
    75 				trackn_instrdb	org *+TRACKS
    76 				trackn_instrhb	org *+TRACKS
    77 				trackn_instridx	org *+TRACKS
    78 				trackn_instrlen	org *+TRACKS
    79 				trackn_instrlop	org *+TRACKS
    80 				trackn_instrreachend	org *+TRACKS
    81 				trackn_volumeslidedepth org *+TRACKS
    82 				trackn_volumeslidevalue org *+TRACKS
    83 					IFT FEAT_VOLUMEMIN
    84 				trackn_volumemin		org *+TRACKS
    85 					EIF
    86 = 0001			FEAT_EFFECTS equ FEAT_EFFECTVIBRATO||FEAT_EFFECTFSHIFT
    87 					IFT FEAT_EFFECTS
    88 				trackn_effdelay			org *+TRACKS
    89 					EIF
    90 					IFT FEAT_EFFECTVIBRATO
    91 				trackn_effvibratoa		org *+TRACKS
    92 					EIF
    93 					IFT FEAT_EFFECTFSHIFT
    94 				trackn_effshift		org *+TRACKS
    95 					EIF
    96 				trackn_tabletypespeed org *+TRACKS
    97 					IFT FEAT_TABLEMODE
    98 				trackn_tablemode	org *+TRACKS
    99 					EIF
   100 				trackn_tablenote	org *+TRACKS
   101 				trackn_tablea		org *+TRACKS
   102 				trackn_tableend		org *+TRACKS
   103 					IFT FEAT_TABLEGO
   104 				trackn_tablelop		org *+TRACKS
   105 					EIF
   106 				trackn_tablespeeda	org *+TRACKS
   107 					IFT FEAT_FILTER||FEAT_BASS16
   108 				trackn_command		org *+TRACKS
   109 					EIF
   110 					IFT FEAT_BASS16
   111 				trackn_outnote		org *+TRACKS
   112 					EIF
   113 					IFT FEAT_FILTER
   114 				trackn_filter		org *+TRACKS
   115 					EIF
   116 				trackn_audf	org *+TRACKS
   117 				trackn_audc	org *+TRACKS
   118 					IFT FEAT_AUDCTLMANUALSET
   119 				trackn_audctl	org *+TRACKS
   120 					EIF
   121 				v_aspeed		org *+1
   122 				track_endvariables
   123 						org PLAYER-$100-$140-$40+2
   124 = 000C			INSTRPAR	equ 12
   125 				tabbeganddistor
   126 FFFF> 9D82-9DBF> 80 00	 dta frqtabpure-frqtab,$00
   127 9D84 80 20		 dta frqtabpure-frqtab,$20
   128 9D86 80 40		 dta frqtabpure-frqtab,$40
   129 9D88 00 C0		 dta frqtabbass1-frqtab,$c0
   130 9D8A 80 80		 dta frqtabpure-frqtab,$80
   131 9D8C 80 A0		 dta frqtabpure-frqtab,$a0
   132 9D8E 00 C0		 dta frqtabbass1-frqtab,$c0
   133 9D90 40 C0		 dta frqtabbass2-frqtab,$c0
   134 						IFT FEAT_EFFECTVIBRATO
   135 9D92 00 01 05 0B		vibtabbeg dta 0,vib1-vib0,vib2-vib0,vib3-vib0
   136 9D96 00			vib0	dta 0
   137 9D97 01 FF FF 01		vib1	dta 1,-1,-1,1
   138 9D9B 01 00 FF FF 00 01	vib2	dta 1,0,-1,-1,0,1
   139 9DA1 01 01 00 FF FF FF + vib3	dta 1,1,0,-1,-1,-1,-1,0,1,1
   140 9DAB			vibtabnext
   141 9DAB 00					dta vib0-vib0+0
   142 9DAC 02 03 04 01				dta vib1-vib0+1,vib1-vib0+2,vib1-vib0+3,vib1-vib0+0
   143 9DB0 06 07 08 09 0A 05			dta vib2-vib0+1,vib2-vib0+2,vib2-vib0+3,vib2-vib0+4,vib2-vib0+5,vib2-vib0+0
   144 9DB6 0C 0D 0E 0F 10 11 + 		dta vib3-vib0+1,vib3-vib0+2,vib3-vib0+3,vib3-vib0+4,vib3-vib0+5,vib3-vib0+6,vib3-vib0+7,vib3-vib0+8,vib3-vib0+9,vib3-vib0+0
   145 						EIF
   146 9DC0					org PLAYER-$100-$140
   147 					IFT FEAT_BASS16
   148 				frqtabbasslo
   149 					dta $F2,$33,$96,$E2,$38,$8C,$00,$6A,$E8,$6A,$EF,$80,$08,$AE,$46,$E6
   150 					dta $95,$41,$F6,$B0,$6E,$30,$F6,$BB,$84,$52,$22,$F4,$C8,$A0,$7A,$55
   151 					dta $34,$14,$F5,$D8,$BD,$A4,$8D,$77,$60,$4E,$38,$27,$15,$06,$F7,$E8
   152 					dta $DB,$CF,$C3,$B8,$AC,$A2,$9A,$90,$88,$7F,$78,$70,$6A,$64,$5E,$00
   153 					EIF
   154 9DC0					org PLAYER-$100-$100
   155 9E00			frqtab
   156 					ERT [<frqtab]!=0	;* frqtab must begin at the memory page bound! (i.e. $..00 address)
   157 9E00			frqtabbass1
   158 9E00-9EBF> BF B6 AA A1 + 	dta $BF,$B6,$AA,$A1,$98,$8F,$89,$80,$F2,$E6,$DA,$CE,$BF,$B6,$AA,$A1
   159 9E10 98 8F 89 80 7A 71 + 	dta $98,$8F,$89,$80,$7A,$71,$6B,$65,$5F,$5C,$56,$50,$4D,$47,$44,$3E
   160 9E20 3C 38 35 32 2F 2D + 	dta $3C,$38,$35,$32,$2F,$2D,$2A,$28,$25,$23,$21,$1F,$1D,$1C,$1A,$18
   161 9E30 17 16 14 13 12 11 + 	dta $17,$16,$14,$13,$12,$11,$10,$0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07
   162 9E40			frqtabbass2
   163 9E40 FF F1 E4 D8 CA C0 + 	dta $FF,$F1,$E4,$D8,$CA,$C0,$B5,$AB,$A2,$99,$8E,$87,$7F,$79,$73,$70
   164 9E50 66 61 5A 55 52 4B + 	dta $66,$61,$5A,$55,$52,$4B,$48,$43,$3F,$3C,$39,$37,$33,$30,$2D,$2A
   165 9E60 28 25 24 21 1F 1E + 	dta $28,$25,$24,$21,$1F,$1E,$1C,$1B,$19,$17,$16,$15,$13,$12,$11,$10
   166 9E70 0F 0E 0D 0C 0B 0A + 	dta $0F,$0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00
   167 9E80			frqtabpure
   168 9E80 F3 E6 D9 CC C1 B5 + 	dta $F3,$E6,$D9,$CC,$C1,$B5,$AD,$A2,$99,$90,$88,$80,$79,$72,$6C,$66
   169 9E90 60 5B 55 51 4C 48 + 	dta $60,$5B,$55,$51,$4C,$48,$44,$40,$3C,$39,$35,$32,$2F,$2D,$2A,$28
   170 9EA0 25 23 21 1F 1D 1C + 	dta $25,$23,$21,$1F,$1D,$1C,$1A,$18,$17,$16,$14,$13,$12,$11,$10,$0F
   171 9EB0 0E 0D 0C 0B 0A 09 + 	dta $0E,$0D,$0C,$0B,$0A,$09,$08,$07,$06,$05,$04,$03,$02,$01,$00,$00
   172 					IFT FEAT_BASS16
   173 				frqtabbasshi
   174 					dta $0D,$0D,$0C,$0B,$0B,$0A,$0A,$09,$08,$08,$07,$07,$07,$06,$06,$05
   175 					dta $05,$05,$04,$04,$04,$04,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02
   176 					dta $02,$02,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$00,$00
   177 					dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   178 					EIF
   179 9EC0					org PLAYER-$0100
   180 9F00			volumetab
   181 9F00-A384> 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
   182 9F10 00 00 00 00 00 00 + 	dta $00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01
   183 9F20 00 00 00 00 01 01 + 	dta $00,$00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02
   184 9F30 00 00 00 01 01 01 + 	dta $00,$00,$00,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$03,$03,$03
   185 9F40 00 00 01 01 01 01 + 	dta $00,$00,$01,$01,$01,$01,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04
   186 9F50 00 00 01 01 01 02 + 	dta $00,$00,$01,$01,$01,$02,$02,$02,$03,$03,$03,$04,$04,$04,$05,$05
   187 9F60 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$02,$03,$03,$04,$04,$04,$05,$05,$06,$06
   188 9F70 00 00 01 01 02 02 + 	dta $00,$00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07
   189 9F80 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$03,$04,$04,$05,$05,$06,$06,$07,$07,$08
   190 9F90 00 01 01 02 02 03 + 	dta $00,$01,$01,$02,$02,$03,$04,$04,$05,$05,$06,$07,$07,$08,$08,$09
   191 9FA0 00 01 01 02 03 03 + 	dta $00,$01,$01,$02,$03,$03,$04,$05,$05,$06,$07,$07,$08,$09,$09,$0A
   192 9FB0 00 01 01 02 03 04 + 	dta $00,$01,$01,$02,$03,$04,$04,$05,$06,$07,$07,$08,$09,$0A,$0A,$0B
   193 9FC0 00 01 02 02 03 04 + 	dta $00,$01,$02,$02,$03,$04,$05,$06,$06,$07,$08,$09,$0A,$0A,$0B,$0C
   194 9FD0 00 01 02 03 03 04 + 	dta $00,$01,$02,$03,$03,$04,$05,$06,$07,$08,$09,$0A,$0A,$0B,$0C,$0D
   195 9FE0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$07,$08,$09,$0A,$0B,$0C,$0D,$0E
   196 9FF0 00 01 02 03 04 05 + 	dta $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F
   197 A000				org PLAYER
   198 				;*
   199 				;* Set of RMT main vectors:
   200 				;*
   201 A000			RASTERMUSICTRACKER
   202 A000 4C 12 A0			jmp rmt_init
   203 A003 4C DC A1			jmp rmt_play
   204 A006 4C F6 A1			jmp rmt_p3
   205 A009 4C 52 A0			jmp rmt_silence
   206 A00C 4C 4F A3			jmp SetPokey
   207 					IFT FEAT_SFX
   208 A00F 4C 65 A1			jmp rmt_sfx			;* A=note(0,..,60),X=channel(0,..,3 or 0,..,7),Y=instrument*2(0,2,4,..,126)
   209 					EIF
   210 A012			rmt_init
   211 A012 86 D3			stx ns
   212 A014 84 D4			sty ns+1
   213 					IFT FEAT_NOSTARTINGSONGLINE==0
   214 A016 48				pha
   215 					EIF
   216 					IFT track_endvariables-track_variables>255
   217 					ldy #0
   218 					tya
   219 				ri0	sta track_variables,y
   220 					sta track_endvariables-$100,y
   221 					iny
   222 					bne ri0
   223 					ELS
   224 A017 A0 85			ldy #track_endvariables-track_variables
   225 A019 A9 00			lda #0
   226 A01B 99 DF 9C		ri0	sta track_variables-1,y
   227 A01E 88				dey
   228 A01F D0 FA			bne ri0
   229 					EIF
   230 A021 A0 04			ldy #4
   231 A023 B1 D3			lda (ns),y
   232 A025 8D EA A1			sta v_maxtracklen
   233 A028 C8				iny
   234 					IFT FEAT_CONSTANTSPEED==0
   235 A029 B1 D3			lda (ns),y
   236 A02B 8D B8 A0			sta v_speed
   237 					EIF
   238 					IFT FEAT_INSTRSPEED==0
   239 					iny
   240 					lda (ns),y
   241 					sta v_instrspeed
   242 					sta v_ainstrspeed
   243 					ELI FEAT_INSTRSPEED>1
   244 					lda #FEAT_INSTRSPEED
   245 					sta v_ainstrspeed
   246 					EIF
   247 A02E A0 08			ldy #8
   248 A030 B1 D3		ri1	lda (ns),y
   249 A032 99 C3 00			sta p_tis-8,y
   250 A035 C8				iny
   251 A036 C0 10			cpy #8+8
   252 A038 D0 F6			bne ri1
   253 					IFT FEAT_NOSTARTINGSONGLINE==0
   254 A03A 68				pla
   255 A03B 48				pha
   256 					IFT TRACKS>4
   257 					asl @
   258 					asl @
   259 					asl @
   260 					clc
   261 					adc p_song
   262 					sta p_song
   263 					pla
   264 					php
   265 					and #$e0
   266 					asl @
   267 					rol @
   268 					rol @
   269 					rol @
   270 					ELS
   271 A03C 0A				asl @
   272 A03D 0A				asl @
   273 A03E 18				clc
   274 A03F 65 D1			adc p_song
   275 A041 85 D1			sta p_song
   276 A043 68				pla
   277 A044 08				php
   278 A045 29 C0			and #$c0
   279 A047 0A				asl @
   280 A048 2A				rol @
   281 A049 2A				rol @
   282 					EIF
   283 A04A 28				plp
   284 A04B 65 D2			adc p_song+1
   285 A04D 85 D2			sta p_song+1
   286 					EIF
   287 A04F 20 67 A0			jsr GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   288 A052			rmt_silence
   289 					IFT STEREOMODE>0
   290 					lda #0
   291 					sta $d208
   292 					sta $d218
   293 					ldy #3
   294 					sty $d20f
   295 					sty $d21f
   296 					ldy #8
   297 				si1	sta $d200,y
   298 					sta $d210,y
   299 					dey
   300 					bpl si1
   301 					ELS
   302 A052 A9 00			lda #0
   303 A054 8D 08 D2			sta $d208
   304 A057 A0 03			ldy #3
   305 A059 8C 0F D2			sty $d20f
   306 A05C A0 08			ldy #8
   307 A05E 99 00 D2		si1	sta $d200,y
   308 A061 88				dey
   309 A062 10 FA			bpl si1
   310 					EIF
   311 					IFT FEAT_INSTRSPEED==0
   312 					lda v_instrspeed
   313 					ELS
   314 A064 A9 01			lda #FEAT_INSTRSPEED
   315 					EIF
   316 A066 60				rts
   317 A067			GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   318 A067			GetSongLine
   319 A067 A2 00			ldx #0
   320 A069 8E E8 A1			stx v_abeat
   321 A06C			nn0
   322 A06C 8A			nn1	txa
   323 A06D A8				tay
   324 A06E B1 D1			lda (p_song),y
   325 A070 C9 FE			cmp #$fe
   326 A072 B0 2D			bcs nn2
   327 A074 A8				tay
   328 A075 B1 CD			lda (p_trackslbstable),y
   329 A077 9D E0 9C			sta trackn_db,x
   330 A07A B1 CF			lda (p_trackshbstable),y
   331 A07C 9D E4 9C		nn1a sta trackn_hb,x
   332 A07F A9 00			lda #0
   333 A081 9D E8 9C			sta trackn_idx,x
   334 A084 A9 01			lda #1
   335 A086 9D EC 9C		nn1a2 sta trackn_pause,x
   336 A089 A9 80			lda #$80
   337 A08B 9D 14 9D			sta trackn_instrx2,x
   338 A08E E8				inx
   339 A08F E0 04		xtracks01	cpx #TRACKS
   340 A091 D0 D9			bne nn1
   341 A093 A5 D1			lda p_song
   342 A095 18				clc
   343 A096 69 04		xtracks02	adc #TRACKS
   344 A098 85 D1			sta p_song
   345 A09A 90 1B			bcc GetTrackLine
   346 A09C E6 D2			inc p_song+1
   347 A09E			nn1b
   348 A09E 4C B7 A0			jmp GetTrackLine
   349 A0A1			nn2
   350 A0A1 F0 04			beq nn3
   351 A0A3			nn2a
   352 A0A3 A9 00			lda #0
   353 A0A5 F0 DF			beq nn1a2
   354 A0A7			nn3
   355 A0A7 A0 02			ldy #2
   356 A0A9 B1 D1			lda (p_song),y
   357 A0AB AA				tax
   358 A0AC C8				iny
   359 A0AD B1 D1			lda (p_song),y
   360 A0AF 85 D2			sta p_song+1
   361 A0B1 86 D1			stx p_song
   362 A0B3 A2 00			ldx #0
   363 A0B5 F0 B5			beq nn0
   364 A0B7			GetTrackLine
   365 A0B7			oo0
   366 A0B7			oo0a
   367 					IFT FEAT_CONSTANTSPEED==0
   368 A0B7 A9 FF			lda #$ff
   369 = A0B8			v_speed equ *-1
   370 A0B9 8D 0B A1			sta v_bspeed
   371 					EIF
   372 A0BC A2 FF			ldx #-1
   373 A0BE			oo1
   374 A0BE E8				inx
   375 A0BF DE EC 9C			dec trackn_pause,x
   376 A0C2 D0 42			bne oo1x
   377 A0C4			oo1b
   378 A0C4 BD E0 9C			lda trackn_db,x
   379 A0C7 85 D3			sta ns
   380 A0C9 BD E4 9C			lda trackn_hb,x
   381 A0CC 85 D4			sta ns+1
   382 A0CE			oo1i
   383 A0CE BC E8 9C			ldy trackn_idx,x
   384 A0D1 FE E8 9C			inc trackn_idx,x
   385 A0D4 B1 D3			lda (ns),y
   386 A0D6 85 D9			sta reg1
   387 A0D8 29 3F			and #$3f
   388 A0DA C9 3D			cmp #61
   389 A0DC F0 0E			beq oo1a
   390 A0DE B0 35			bcs oo2
   391 A0E0 9D F0 9C			sta trackn_note,x
   392 					IFT FEAT_BASS16
   393 					sta trackn_outnote,x
   394 					EIF
   395 A0E3 C8				iny
   396 A0E4 B1 D3			lda (ns),y
   397 A0E6 4A				lsr @
   398 A0E7 29 7E			and #$3f*2
   399 A0E9 9D 14 9D			sta trackn_instrx2,x
   400 A0EC			oo1a
   401 A0EC A9 01			lda #1
   402 A0EE 9D EC 9C			sta trackn_pause,x
   403 A0F1 BC E8 9C			ldy trackn_idx,x
   404 A0F4 FE E8 9C			inc trackn_idx,x
   405 A0F7 B1 D3			lda (ns),y
   406 A0F9 4A				lsr @
   407 A0FA 66 D9			ror reg1
   408 A0FC 4A				lsr @
   409 A0FD 66 D9			ror reg1
   410 A0FF A5 D9			lda reg1
   411 					IFT FEAT_GLOBALVOLUMEFADE
   412 					sec
   413 					sbc #$00
   414 				RMTGLOBALVOLUMEFADE equ *-1
   415 					bcs voig
   416 					lda #0
   417 				voig
   418 					EIF
   419 A101 29 F0			and #$f0
   420 A103 9D F4 9C			sta trackn_volume,x
   421 A106			oo1x
   422 A106 E0 03		xtracks03sub1	cpx #TRACKS-1
   423 A108 D0 B4			bne oo1
   424 					IFT FEAT_CONSTANTSPEED==0
   425 A10A A9 FF			lda #$ff
   426 = A10B			v_bspeed equ *-1
   427 A10C 8D B8 A0			sta v_speed
   428 					ELS
   429 					lda #FEAT_CONSTANTSPEED
   430 					EIF
   431 A10F 8D 64 9D			sta v_aspeed
   432 A112 4C 5A A1			jmp InitOfNewSetInstrumentsOnly
   433 A115			oo2
   434 A115 C9 3F			cmp #63
   435 A117 F0 1B			beq oo63
   436 A119 A5 D9			lda reg1
   437 A11B 29 C0			and #$c0
   438 A11D F0 09			beq oo62_b
   439 A11F 0A				asl @
   440 A120 2A				rol @
   441 A121 2A				rol @
   442 A122 9D EC 9C			sta trackn_pause,x
   443 A125 4C 06 A1			jmp oo1x
   444 A128			oo62_b
   445 A128 C8				iny
   446 A129 B1 D3			lda (ns),y
   447 A12B 9D EC 9C			sta trackn_pause,x
   448 A12E FE E8 9C			inc trackn_idx,x
   449 A131 4C 06 A1			jmp oo1x
   450 A134			oo63
   451 A134 A5 D9			lda reg1
   452 					IFT FEAT_CONSTANTSPEED==0
   453 A136 30 0C			bmi oo63_1X
   454 A138 C8				iny
   455 A139 B1 D3			lda (ns),y
   456 A13B 8D 0B A1			sta v_bspeed
   457 A13E FE E8 9C			inc trackn_idx,x
   458 A141 4C CE A0			jmp oo1i
   459 A144			oo63_1X
   460 					EIF
   461 A144 C9 FF			cmp #255
   462 A146 F0 09			beq oo63_11
   463 A148 C8				iny
   464 A149 B1 D3			lda (ns),y
   465 A14B 9D E8 9C			sta trackn_idx,x
   466 A14E 4C CE A0			jmp oo1i
   467 A151			oo63_11
   468 A151 4C 67 A0			jmp GetSongLine
   469 A154 4C F6 A1		p2xrmtp3	jmp rmt_p3
   470 A157 CA			p2x0 dex
   471 A158 30 FA			 bmi p2xrmtp3
   472 A15A			InitOfNewSetInstrumentsOnly
   473 A15A BC 14 9D		p2x1 ldy trackn_instrx2,x
   474 A15D 30 F8			bmi p2x0
   475 					IFT FEAT_SFX
   476 A15F 20 6D A1			jsr SetUpInstrumentY2
   477 A162 4C 57 A1			jmp p2x0
   478 A165			rmt_sfx
   479 A165 9D F0 9C			sta trackn_note,x
   480 					IFT FEAT_BASS16
   481 					sta trackn_outnote,x
   482 					EIF
   483 A168 A9 F0			lda #$f0				;* sfx note volume*16
   484 = A169			RMTSFXVOLUME equ *-1		;* label for sfx note volume parameter overwriting
   485 A16A 9D F4 9C			sta trackn_volume,x
   486 					EIF
   487 A16D			SetUpInstrumentY2
   488 A16D B1 CB			lda (p_instrstable),y
   489 A16F 9D 18 9D			sta trackn_instrdb,x
   490 A172 85 D7			sta nt
   491 A174 C8				iny
   492 A175 B1 CB			lda (p_instrstable),y
   493 A177 9D 1C 9D			sta trackn_instrhb,x
   494 A17A 85 D8			sta nt+1
   495 					IFT FEAT_FILTER
   496 					lda #1
   497 					sta trackn_filter,x
   498 					EIF
   499 					IFT FEAT_TABLEGO
   500 					IFT FEAT_FILTER
   501 					tay
   502 					ELS
   503 					ldy #1
   504 					EIF
   505 					lda (nt),y
   506 					sta trackn_tablelop,x
   507 					iny
   508 					ELS
   509 A17C A0 02			ldy #2
   510 					EIF
   511 A17E B1 D7			lda (nt),y
   512 A180 9D 24 9D			sta trackn_instrlen,x
   513 A183 C8				iny
   514 A184 B1 D7			lda (nt),y
   515 A186 9D 28 9D			sta trackn_instrlop,x
   516 A189 C8				iny
   517 A18A B1 D7			lda (nt),y
   518 A18C 9D 48 9D			sta trackn_tabletypespeed,x
   519 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   520 					and #$3f
   521 					EIF
   522 A18F 9D 58 9D			sta trackn_tablespeeda,x
   523 					IFT FEAT_TABLEMODE
   524 					lda (nt),y
   525 					and #$40
   526 					sta trackn_tablemode,x
   527 					EIF
   528 					IFT FEAT_AUDCTLMANUALSET
   529 					iny
   530 					lda (nt),y
   531 					sta trackn_audctl,x
   532 					iny
   533 					ELS
   534 A192 A0 06			ldy #6
   535 					EIF
   536 A194 B1 D7			lda (nt),y
   537 A196 9D 30 9D			sta trackn_volumeslidedepth,x
   538 					IFT FEAT_VOLUMEMIN
   539 A199 C8				iny
   540 A19A B1 D7			lda (nt),y
   541 A19C 9D 38 9D			sta trackn_volumemin,x
   542 					IFT FEAT_EFFECTS
   543 A19F C8				iny
   544 					EIF
   545 					ELS
   546 					IFT FEAT_EFFECTS
   547 					ldy #8
   548 					EIF
   549 					EIF
   550 					IFT FEAT_EFFECTS
   551 A1A0 B1 D7			lda (nt),y
   552 A1A2 9D 3C 9D			sta trackn_effdelay,x
   553 					IFT FEAT_EFFECTVIBRATO
   554 A1A5 C8				iny
   555 A1A6 B1 D7			lda (nt),y
   556 A1A8 A8				tay
   557 A1A9 B9 92 9D			lda vibtabbeg,y
   558 A1AC 9D 40 9D			sta trackn_effvibratoa,x
   559 					EIF
   560 					IFT FEAT_EFFECTFSHIFT
   561 A1AF A0 0A			ldy #10
   562 A1B1 B1 D7			lda (nt),y
   563 A1B3 9D 44 9D			sta trackn_effshift,x
   564 					EIF
   565 					EIF
   566 A1B6 A9 80			lda #128
   567 A1B8 9D 34 9D			sta trackn_volumeslidevalue,x
   568 A1BB 9D 14 9D			sta trackn_instrx2,x
   569 A1BE 0A				asl @
   570 A1BF 9D 2C 9D			sta trackn_instrreachend,x
   571 A1C2 9D FC 9C			sta trackn_shiftfrq,x
   572 A1C5 A8				tay
   573 A1C6 B1 D7			lda (nt),y
   574 A1C8 9D 54 9D			sta trackn_tableend,x
   575 A1CB 69 00			adc #0
   576 A1CD 9D 20 9D			sta trackn_instridx,x
   577 A1D0 A9 0C			lda #INSTRPAR
   578 A1D2 9D 50 9D			sta trackn_tablea,x
   579 A1D5 A8				tay
   580 A1D6 B1 D7			lda (nt),y
   581 A1D8 9D 4C 9D			sta trackn_tablenote,x
   582 A1DB			xata_rtshere
   583 					IFT FEAT_SFX
   584 A1DB 60				rts
   585 					ELS
   586 					jmp p2x0
   587 					EIF
   588 A1DC			rmt_play
   589 A1DC			rmt_p0
   590 A1DC 20 4F A3			jsr SetPokey
   591 A1DF			rmt_p1
   592 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
   593 					dec v_ainstrspeed
   594 					bne rmt_p3
   595 					EIF
   596 					IFT FEAT_INSTRSPEED==0
   597 					lda #$ff
   598 				v_instrspeed	equ *-1
   599 					sta v_ainstrspeed
   600 					ELI FEAT_INSTRSPEED>1
   601 					lda #FEAT_INSTRSPEED
   602 					sta v_ainstrspeed
   603 					EIF
   604 A1DF			rmt_p2
   605 A1DF CE 64 9D			dec v_aspeed
   606 A1E2 D0 12			bne rmt_p3
   607 A1E4 EE E8 A1			inc v_abeat
   608 A1E7 A9 FF			lda #$ff
   609 = A1E8			v_abeat equ *-1
   610 A1E9 C9 FF			cmp #$ff
   611 = A1EA			v_maxtracklen equ *-1
   612 A1EB F0 03			beq p2o3
   613 A1ED 4C B7 A0			jmp GetTrackLine
   614 A1F0			p2o3
   615 A1F0 4C 67 A0			jmp GetSongLineTrackLineInitOfNewSetInstrumentsOnlyRmtp3
   616 A1F3 4C 3E A3		go_ppnext	jmp ppnext
   617 A1F6			rmt_p3
   618 A1F6 A9 9E			lda #>frqtab
   619 A1F8 85 D6			sta nr+1
   620 A1FA A2 03		xtracks05sub1	ldx #TRACKS-1
   621 A1FC			pp1
   622 A1FC BD 1C 9D			lda trackn_instrhb,x
   623 A1FF F0 F2			beq go_ppnext
   624 A201 85 D4			sta ns+1
   625 A203 BD 18 9D			lda trackn_instrdb,x
   626 A206 85 D3			sta ns
   627 A208 BC 20 9D			ldy trackn_instridx,x
   628 A20B B1 D3			lda (ns),y
   629 A20D 85 D9			sta reg1
   630 A20F C8				iny
   631 A210 B1 D3			lda (ns),y
   632 A212 85 DA			sta reg2
   633 A214 C8				iny
   634 A215 B1 D3			lda (ns),y
   635 A217 85 DB			sta reg3
   636 A219 C8				iny
   637 A21A 98				tya
   638 A21B DD 24 9D			cmp trackn_instrlen,x
   639 A21E 90 0A			bcc pp2
   640 A220 F0 08			beq pp2
   641 A222 A9 80			lda #$80
   642 A224 9D 2C 9D			sta trackn_instrreachend,x
   643 A227			pp1b
   644 A227 BD 28 9D			lda trackn_instrlop,x
   645 A22A 9D 20 9D		pp2	sta trackn_instridx,x
   646 A22D A5 D9			lda reg1
   647 					IFT TRACKS>4
   648 					cpx #4
   649 					bcc pp2s
   650 					lsr @
   651 					lsr @
   652 					lsr @
   653 					lsr @
   654 				pp2s
   655 					EIF
   656 A22F 29 0F			and #$0f
   657 A231 1D F4 9C			ora trackn_volume,x
   658 A234 A8				tay
   659 A235 B9 00 9F			lda volumetab,y
   660 A238 85 DC			sta tmp
   661 A23A A5 DA			lda reg2
   662 A23C 29 0E			and #$0e
   663 A23E A8				tay
   664 A23F B9 82 9D			lda tabbeganddistor,y
   665 A242 85 D5			sta nr
   666 A244 A5 DC			lda tmp
   667 A246 19 83 9D			ora tabbeganddistor+1,y
   668 A249 9D 60 9D			sta trackn_audc,x
   669 A24C			InstrumentsEffects
   670 					IFT FEAT_EFFECTS
   671 A24C BD 3C 9D			lda trackn_effdelay,x
   672 A24F F0 21			beq ei2
   673 A251 C9 01			cmp #1
   674 A253 D0 1A			bne ei1
   675 A255 BD FC 9C			lda trackn_shiftfrq,x
   676 					IFT FEAT_EFFECTFSHIFT
   677 A258 18				clc
   678 A259 7D 44 9D			adc trackn_effshift,x
   679 					EIF
   680 					IFT FEAT_EFFECTVIBRATO
   681 A25C 18				clc
   682 A25D BC 40 9D			ldy trackn_effvibratoa,x
   683 A260 79 96 9D			adc vib0,y
   684 					EIF
   685 A263 9D FC 9C			sta trackn_shiftfrq,x
   686 					IFT FEAT_EFFECTVIBRATO
   687 A266 B9 AB 9D			lda vibtabnext,y
   688 A269 9D 40 9D			sta trackn_effvibratoa,x
   689 					EIF
   690 A26C 4C 72 A2			jmp ei2
   691 A26F			ei1
   692 A26F DE 3C 9D			dec trackn_effdelay,x
   693 A272			ei2
   694 					EIF
   695 A272 BC 54 9D			ldy trackn_tableend,x
   696 A275 C0 0D			cpy #INSTRPAR+1
   697 A277 90 30			bcc ei3
   698 A279 BD 58 9D			lda trackn_tablespeeda,x
   699 A27C 10 25			bpl ei2f
   700 A27E			ei2c
   701 A27E 98				tya
   702 A27F DD 50 9D			cmp trackn_tablea,x
   703 A282 D0 07			bne ei2c2
   704 					IFT FEAT_TABLEGO
   705 					lda trackn_tablelop,x
   706 					ELS
   707 A284 A9 0C			lda #INSTRPAR
   708 					EIF
   709 A286 9D 50 9D			sta trackn_tablea,x
   710 A289 D0 03			bne ei2a
   711 A28B			ei2c2
   712 A28B FE 50 9D			inc trackn_tablea,x
   713 A28E			ei2a
   714 A28E BD 18 9D			lda trackn_instrdb,x
   715 A291 85 D7			sta nt
   716 A293 BD 1C 9D			lda trackn_instrhb,x
   717 A296 85 D8			sta nt+1
   718 A298 BC 50 9D			ldy trackn_tablea,x
   719 A29B B1 D7			lda (nt),y
   720 					IFT FEAT_TABLEMODE
   721 					ldy trackn_tablemode,x
   722 					beq ei2e
   723 					clc
   724 					adc trackn_tablenote,x
   725 				ei2e
   726 					EIF
   727 A29D 9D 4C 9D			sta trackn_tablenote,x
   728 A2A0 BD 48 9D			lda trackn_tabletypespeed,x
   729 					IFT FEAT_TABLETYPE||FEAT_TABLEMODE
   730 					and #$3f
   731 					EIF
   732 A2A3			ei2f
   733 A2A3 38				sec
   734 A2A4 E9 01			sbc #1
   735 A2A6 9D 58 9D			sta trackn_tablespeeda,x
   736 A2A9			ei3
   737 A2A9 BD 2C 9D			lda trackn_instrreachend,x
   738 A2AC 10 1F			bpl ei4
   739 A2AE BD F4 9C			lda trackn_volume,x
   740 A2B1 F0 1A			beq ei4
   741 					IFT FEAT_VOLUMEMIN
   742 A2B3 DD 38 9D			cmp trackn_volumemin,x
   743 A2B6 F0 15			beq ei4
   744 A2B8 90 13			bcc ei4
   745 					EIF
   746 A2BA A8				tay
   747 A2BB BD 34 9D			lda trackn_volumeslidevalue,x
   748 A2BE 18				clc
   749 A2BF 7D 30 9D			adc trackn_volumeslidedepth,x
   750 A2C2 9D 34 9D			sta trackn_volumeslidevalue,x
   751 A2C5 90 06			bcc ei4
   752 A2C7 98				tya
   753 A2C8 E9 10			sbc #16
   754 A2CA 9D F4 9C			sta trackn_volume,x
   755 A2CD			ei4
   756 					IFT FEAT_COMMAND2
   757 					lda #0
   758 					sta frqaddcmd2
   759 					EIF
   760 					IFT FEAT_COMMAND1||FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   761 A2CD A5 DA			lda reg2
   762 					IFT FEAT_FILTER||FEAT_BASS16
   763 					sta trackn_command,x
   764 					EIF
   765 A2CF 29 70			and #$70
   766 					IFT 1==[FEAT_COMMAND1+FEAT_COMMAND2+FEAT_COMMAND3+FEAT_COMMAND4+FEAT_COMMAND5+FEAT_COMMAND6+[FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY]]
   767 A2D1 F0 05			beq cmd0
   768 					ELS
   769 					lsr @
   770 					lsr @
   771 					sta jmx+1
   772 				jmx	bcc *
   773 					jmp cmd0
   774 					nop
   775 					jmp cmd1
   776 					IFT FEAT_COMMAND2||FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   777 					nop
   778 					jmp cmd2
   779 					EIF
   780 					IFT FEAT_COMMAND3||FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   781 					nop
   782 					jmp cmd3
   783 					EIF
   784 					IFT FEAT_COMMAND4||FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   785 					nop
   786 					jmp cmd4
   787 					EIF
   788 					IFT FEAT_COMMAND5||FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   789 					nop
   790 					jmp cmd5
   791 					EIF
   792 					IFT FEAT_COMMAND6||FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   793 					nop
   794 					jmp cmd6
   795 					EIF
   796 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   797 					nop
   798 					jmp cmd7
   799 					EIF
   800 					EIF
   801 					ELS
   802 					IFT FEAT_FILTER||FEAT_BASS16
   803 					lda reg2
   804 					sta trackn_command,x
   805 					EIF
   806 					EIF
   807 A2D3			cmd1
   808 					IFT FEAT_COMMAND1
   809 A2D3 A5 DB			lda reg3
   810 A2D5 4C F4 A2			jmp cmd0c
   811 					EIF
   812 A2D8			cmd2
   813 					IFT FEAT_COMMAND2
   814 					lda reg3
   815 					sta frqaddcmd2
   816 					lda trackn_note,x
   817 					jmp cmd0a
   818 					EIF
   819 A2D8			cmd3
   820 					IFT FEAT_COMMAND3
   821 					lda trackn_note,x
   822 					clc
   823 					adc reg3
   824 					sta trackn_note,x
   825 					jmp cmd0a
   826 					EIF
   827 A2D8			cmd4
   828 					IFT FEAT_COMMAND4
   829 					lda trackn_shiftfrq,x
   830 					clc
   831 					adc reg3
   832 					sta trackn_shiftfrq,x
   833 					lda trackn_note,x
   834 					jmp cmd0a
   835 					EIF
   836 A2D8			cmd5
   837 					IFT FEAT_COMMAND5&&FEAT_PORTAMENTO
   838 					IFT FEAT_TABLETYPE
   839 					lda trackn_tabletypespeed,x
   840 					bpl cmd5a1
   841 					ldy trackn_note,x
   842 					lda (nr),y
   843 					clc
   844 					adc trackn_tablenote,x
   845 					jmp cmd5ax
   846 					EIF
   847 				cmd5a1
   848 					lda trackn_note,x
   849 					clc
   850 					adc trackn_tablenote,x
   851 					cmp #61
   852 					bcc cmd5a2
   853 					lda #63
   854 				cmd5a2
   855 					tay
   856 					lda (nr),y
   857 				cmd5ax
   858 					sta trackn_portafrqc,x
   859 					ldy reg3
   860 					bne cmd5a
   861 					sta trackn_portafrqa,x
   862 				cmd5a
   863 					tya
   864 					lsr @
   865 					lsr @
   866 					lsr @
   867 					lsr @
   868 					sta trackn_portaspeed,x
   869 					sta trackn_portaspeeda,x
   870 					lda reg3
   871 					and #$0f
   872 					sta trackn_portadepth,x
   873 					lda trackn_note,x
   874 					jmp cmd0a
   875 					ELI FEAT_COMMAND5
   876 					lda trackn_note,x
   877 					jmp cmd0a
   878 					EIF
   879 A2D8			cmd6
   880 					IFT FEAT_COMMAND6&&FEAT_FILTER
   881 					lda reg3
   882 					clc
   883 					adc trackn_filter,x
   884 					sta trackn_filter,x
   885 					lda trackn_note,x
   886 					jmp cmd0a
   887 					ELI FEAT_COMMAND6
   888 					lda trackn_note,x
   889 					jmp cmd0a
   890 					EIF
   891 A2D8			cmd7
   892 					IFT FEAT_COMMAND7SETNOTE||FEAT_COMMAND7VOLUMEONLY
   893 					IFT FEAT_COMMAND7SETNOTE
   894 					lda reg3
   895 					IFT FEAT_COMMAND7VOLUMEONLY
   896 					cmp #$80
   897 					beq cmd7a
   898 					EIF
   899 					sta trackn_note,x
   900 					jmp cmd0a
   901 					EIF
   902 					IFT FEAT_COMMAND7VOLUMEONLY
   903 				cmd7a
   904 					lda trackn_audc,x
   905 					ora #$f0
   906 					sta trackn_audc,x
   907 					lda trackn_note,x
   908 					jmp cmd0a
   909 					EIF
   910 					EIF
   911 A2D8			cmd0
   912 A2D8 BD F0 9C			lda trackn_note,x
   913 A2DB 18				clc
   914 A2DC 65 DB			adc reg3
   915 A2DE			cmd0a
   916 					IFT FEAT_TABLETYPE
   917 					ldy trackn_tabletypespeed,x
   918 					bmi cmd0b
   919 					EIF
   920 A2DE 18				clc
   921 A2DF 7D 4C 9D			adc trackn_tablenote,x
   922 A2E2 C9 3D			cmp #61
   923 A2E4 90 07			bcc cmd0a1
   924 A2E6 A9 00			lda #0
   925 A2E8 9D 60 9D			sta trackn_audc,x
   926 A2EB A9 3F			lda #63
   927 A2ED			cmd0a1
   928 					IFT FEAT_BASS16
   929 					sta trackn_outnote,x
   930 					EIF
   931 A2ED A8				tay
   932 A2EE B1 D5			lda (nr),y
   933 A2F0 18				clc
   934 A2F1 7D FC 9C			adc trackn_shiftfrq,x
   935 					IFT FEAT_COMMAND2
   936 					clc
   937 					adc frqaddcmd2
   938 					EIF
   939 					IFT FEAT_TABLETYPE
   940 					jmp cmd0c
   941 				cmd0b
   942 					cmp #61
   943 					bcc cmd0b1
   944 					lda #0
   945 					sta trackn_audc,x
   946 					lda #63
   947 				cmd0b1
   948 					tay
   949 					lda trackn_shiftfrq,x
   950 					clc
   951 					adc trackn_tablenote,x
   952 					clc
   953 					adc (nr),y
   954 					IFT FEAT_COMMAND2
   955 					clc
   956 					adc frqaddcmd2
   957 					EIF
   958 					EIF
   959 A2F4			cmd0c
   960 A2F4 9D 5C 9D			sta trackn_audf,x
   961 A2F7			pp9
   962 					IFT FEAT_PORTAMENTO
   963 A2F7 BD 0C 9D			lda trackn_portaspeeda,x
   964 A2FA F0 32			beq pp10
   965 A2FC DE 0C 9D			dec trackn_portaspeeda,x
   966 A2FF D0 2D			bne pp10
   967 A301 BD 08 9D			lda trackn_portaspeed,x
   968 A304 9D 0C 9D			sta trackn_portaspeeda,x
   969 A307 BD 04 9D			lda trackn_portafrqa,x
   970 A30A DD 00 9D			cmp trackn_portafrqc,x
   971 A30D F0 1F			beq pp10
   972 A30F B0 0D			bcs pps1
   973 A311 7D 10 9D			adc trackn_portadepth,x
   974 A314 B0 12			bcs pps8
   975 A316 DD 00 9D			cmp trackn_portafrqc,x
   976 A319 B0 0D			bcs pps8
   977 A31B 4C 2B A3			jmp pps9
   978 A31E			pps1
   979 A31E FD 10 9D			sbc trackn_portadepth,x
   980 A321 90 05			bcc pps8
   981 A323 DD 00 9D			cmp trackn_portafrqc,x
   982 A326 B0 03			bcs pps9
   983 A328			pps8
   984 A328 BD 00 9D			lda trackn_portafrqc,x
   985 A32B			pps9
   986 A32B 9D 04 9D			sta trackn_portafrqa,x
   987 A32E			pp10
   988 A32E A5 DA			lda reg2
   989 A330 29 01			and #$01
   990 A332 F0 0A			beq pp11
   991 A334 BD 04 9D			lda trackn_portafrqa,x
   992 A337 18				clc
   993 A338 7D FC 9C			adc trackn_shiftfrq,x
   994 A33B 9D 5C 9D			sta trackn_audf,x
   995 A33E			pp11
   996 					EIF
   997 A33E			ppnext
   998 A33E CA				dex
   999 A33F 30 03			bmi rmt_p4
  1000 A341 4C FC A1			jmp pp1
  1001 A344			rmt_p4
  1002 					IFT FEAT_AUDCTLMANUALSET
  1003 					lda trackn_audctl+0
  1004 					ora trackn_audctl+1
  1005 					ora trackn_audctl+2
  1006 					ora trackn_audctl+3
  1007 					tax
  1008 					ELS
  1009 A344 A2 00			ldx #0
  1010 					EIF
  1011 A346			qq1
  1012 A346 8E 50 A3			stx v_audctl
  1013 					IFT FEAT_FILTER
  1014 					IFT FEAT_FILTERG0L
  1015 					lda trackn_command+0
  1016 					bpl qq2
  1017 					lda trackn_audc+0
  1018 					and #$0f
  1019 					beq qq2
  1020 					lda trackn_audf+0
  1021 					clc
  1022 					adc trackn_filter+0
  1023 					sta trackn_audf+2
  1024 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1025 					lda trackn_audc+2
  1026 					and #$10
  1027 					bne qq1a
  1028 					EIF
  1029 					lda #0
  1030 					sta trackn_audc+2
  1031 				qq1a
  1032 					txa
  1033 					ora #4
  1034 					tax
  1035 					EIF
  1036 				qq2
  1037 					IFT FEAT_FILTERG1L
  1038 					lda trackn_command+1
  1039 					bpl qq3
  1040 					lda trackn_audc+1
  1041 					and #$0f
  1042 					beq qq3
  1043 					lda trackn_audf+1
  1044 					clc
  1045 					adc trackn_filter+1
  1046 					sta trackn_audf+3
  1047 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3L
  1048 					lda trackn_audc+3
  1049 					and #$10
  1050 					bne qq2a
  1051 					EIF
  1052 					lda #0
  1053 					sta trackn_audc+3
  1054 				qq2a
  1055 					txa
  1056 					ora #2
  1057 					tax
  1058 					EIF
  1059 				qq3
  1060 					IFT FEAT_FILTERG0L||FEAT_FILTERG1L
  1061 					cpx v_audctl
  1062 					bne qq5
  1063 					EIF
  1064 					EIF
  1065 					IFT FEAT_BASS16
  1066 					IFT FEAT_BASS16G1L
  1067 					lda trackn_command+1
  1068 					and #$0e
  1069 					cmp #6
  1070 					bne qq4
  1071 					lda trackn_audc+1
  1072 					and #$0f
  1073 					beq qq4
  1074 					ldy trackn_outnote+1
  1075 					lda frqtabbasslo,y
  1076 					sta trackn_audf+0
  1077 					lda frqtabbasshi,y
  1078 					sta trackn_audf+1
  1079 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0L
  1080 					lda trackn_audc+0
  1081 					and #$10
  1082 					bne qq3a
  1083 					EIF
  1084 					lda #0
  1085 					sta trackn_audc+0
  1086 				qq3a
  1087 					txa
  1088 					ora #$50
  1089 					tax
  1090 					EIF
  1091 				qq4
  1092 					IFT FEAT_BASS16G3L
  1093 					lda trackn_command+3
  1094 					and #$0e
  1095 					cmp #6
  1096 					bne qq5
  1097 					lda trackn_audc+3
  1098 					and #$0f
  1099 					beq qq5
  1100 					ldy trackn_outnote+3
  1101 					lda frqtabbasslo,y
  1102 					sta trackn_audf+2
  1103 					lda frqtabbasshi,y
  1104 					sta trackn_audf+3
  1105 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2L
  1106 					lda trackn_audc+2
  1107 					and #$10
  1108 					bne qq4a
  1109 					EIF
  1110 					lda #0
  1111 					sta trackn_audc+2
  1112 				qq4a
  1113 					txa
  1114 					ora #$28
  1115 					tax
  1116 					EIF
  1117 					EIF
  1118 A349			qq5
  1119 A349 8E 50 A3			stx v_audctl
  1120 					IFT TRACKS>4
  1121 					IFT FEAT_AUDCTLMANUALSET
  1122 					lda trackn_audctl+4
  1123 					ora trackn_audctl+5
  1124 					ora trackn_audctl+6
  1125 					ora trackn_audctl+7
  1126 					tax
  1127 					ELS
  1128 					ldx #0
  1129 					EIF
  1130 					stx v_audctl2
  1131 					IFT FEAT_FILTER
  1132 					IFT FEAT_FILTERG0R
  1133 					lda trackn_command+0+4
  1134 					bpl qs2
  1135 					lda trackn_audc+0+4
  1136 					and #$0f
  1137 					beq qs2
  1138 					lda trackn_audf+0+4
  1139 					clc
  1140 					adc trackn_filter+0+4
  1141 					sta trackn_audf+2+4
  1142 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1143 					lda trackn_audc+2+4
  1144 					and #$10
  1145 					bne qs1a
  1146 					EIF
  1147 					lda #0
  1148 					sta trackn_audc+2+4
  1149 				qs1a
  1150 					txa
  1151 					ora #4
  1152 					tax
  1153 					EIF
  1154 				qs2
  1155 					IFT FEAT_FILTERG1R
  1156 					lda trackn_command+1+4
  1157 					bpl qs3
  1158 					lda trackn_audc+1+4
  1159 					and #$0f
  1160 					beq qs3
  1161 					lda trackn_audf+1+4
  1162 					clc
  1163 					adc trackn_filter+1+4
  1164 					sta trackn_audf+3+4
  1165 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG3R
  1166 					lda trackn_audc+3+4
  1167 					and #$10
  1168 					bne qs2a
  1169 					EIF
  1170 					lda #0
  1171 					sta trackn_audc+3+4
  1172 				qs2a
  1173 					txa
  1174 					ora #2
  1175 					tax
  1176 					EIF
  1177 				qs3
  1178 					IFT FEAT_FILTERG0R||FEAT_FILTERG1R
  1179 					cpx v_audctl2
  1180 					bne qs5
  1181 					EIF
  1182 					EIF
  1183 					IFT FEAT_BASS16
  1184 					IFT FEAT_BASS16G1R
  1185 					lda trackn_command+1+4
  1186 					and #$0e
  1187 					cmp #6
  1188 					bne qs4
  1189 					lda trackn_audc+1+4
  1190 					and #$0f
  1191 					beq qs4
  1192 					ldy trackn_outnote+1+4
  1193 					lda frqtabbasslo,y
  1194 					sta trackn_audf+0+4
  1195 					lda frqtabbasshi,y
  1196 					sta trackn_audf+1+4
  1197 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG0R
  1198 					lda trackn_audc+0+4
  1199 					and #$10
  1200 					bne qs3a
  1201 					EIF
  1202 					lda #0
  1203 					sta trackn_audc+0+4
  1204 				qs3a
  1205 					txa
  1206 					ora #$50
  1207 					tax
  1208 					EIF
  1209 				qs4
  1210 					IFT FEAT_BASS16G3R
  1211 					lda trackn_command+3+4
  1212 					and #$0e
  1213 					cmp #6
  1214 					bne qs5
  1215 					lda trackn_audc+3+4
  1216 					and #$0f
  1217 					beq qs5
  1218 					ldy trackn_outnote+3+4
  1219 					lda frqtabbasslo,y
  1220 					sta trackn_audf+2+4
  1221 					lda frqtabbasshi,y
  1222 					sta trackn_audf+3+4
  1223 					IFT FEAT_COMMAND7VOLUMEONLY&&FEAT_VOLUMEONLYG2R
  1224 					lda trackn_audc+2+4
  1225 					and #$10
  1226 					bne qs4a
  1227 					EIF
  1228 					lda #0
  1229 					sta trackn_audc+2+4
  1230 				qs4a
  1231 					txa
  1232 					ora #$28
  1233 					tax
  1234 					EIF
  1235 					EIF
  1236 				qs5
  1237 					stx v_audctl2
  1238 					EIF
  1239 A34C			rmt_p5
  1240 					IFT FEAT_INSTRSPEED==0||FEAT_INSTRSPEED>1
  1241 					lda #$ff
  1242 				v_ainstrspeed equ *-1
  1243 					ELS
  1244 A34C A9 01			lda #1
  1245 					EIF
  1246 A34E 60				rts
  1247 A34F			SetPokey
  1248 					IFT STEREOMODE==1		;* L1 L2 L3 L4 R1 R2 R3 R4
  1249 					ldy #$ff
  1250 				v_audctl2 equ *-1
  1251 					lda trackn_audf+0+4
  1252 					ldx trackn_audf+0
  1253 				xstastx01	sta $d210
  1254 					stx $d200
  1255 					lda trackn_audc+0+4
  1256 					ldx trackn_audc+0
  1257 				xstastx02	sta $d211
  1258 					stx $d201
  1259 					lda trackn_audf+1+4
  1260 					ldx trackn_audf+1
  1261 				xstastx03	sta $d212
  1262 					stx $d202
  1263 					lda trackn_audc+1+4
  1264 					ldx trackn_audc+1
  1265 				xstastx04	sta $d213
  1266 					stx $d203
  1267 					lda trackn_audf+2+4
  1268 					ldx trackn_audf+2
  1269 				xstastx05	sta $d214
  1270 					stx $d204
  1271 					lda trackn_audc+2+4
  1272 					ldx trackn_audc+2
  1273 				xstastx06	sta $d215
  1274 					stx $d205
  1275 					lda trackn_audf+3+4
  1276 					ldx trackn_audf+3
  1277 				xstastx07	sta $d216
  1278 					stx $d206
  1279 					lda trackn_audc+3+4
  1280 					ldx trackn_audc+3
  1281 				xstastx08	sta $d217
  1282 					stx $d207
  1283 					lda #$ff
  1284 				v_audctl equ *-1
  1285 				xstysta01	sty $d218
  1286 					sta $d208
  1287 					ELI STEREOMODE==0		;* L1 L2 L3 L4
  1288 A34F A0 FF			ldy #$ff
  1289 = A350			v_audctl equ *-1
  1290 A351 AD 5C 9D			lda trackn_audf+0
  1291 A354 AE 60 9D			ldx trackn_audc+0
  1292 A357 8D 00 D2			sta $d200
  1293 A35A 8E 01 D2			stx $d201
  1294 A35D AD 5D 9D			lda trackn_audf+1
  1295 A360 AE 61 9D			ldx trackn_audc+1
  1296 A363 8D 02 D2			sta $d200+2
  1297 A366 8E 03 D2			stx $d201+2
  1298 A369 AD 5E 9D			lda trackn_audf+2
  1299 A36C AE 62 9D			ldx trackn_audc+2
  1300 A36F 8D 04 D2			sta $d200+4
  1301 A372 8E 05 D2			stx $d201+4
  1302 A375 AD 5F 9D			lda trackn_audf+3
  1303 A378 AE 63 9D			ldx trackn_audc+3
  1304 A37B 8D 06 D2			sta $d200+6
  1305 A37E 8E 07 D2			stx $d201+6
  1306 A381 8C 08 D2			sty $d208
  1307 					ELI STEREOMODE==2		;* L1 R2 R3 L4
  1308 					ldy #$ff
  1309 				v_audctl equ *-1
  1310 					lda trackn_audf+0
  1311 					ldx trackn_audc+0
  1312 					sta $d200
  1313 					stx $d201
  1314 					sta $d210
  1315 					lda trackn_audf+1
  1316 					ldx trackn_audc+1
  1317 					sta $d210+2
  1318 					stx $d211+2
  1319 					lda trackn_audf+2
  1320 					ldx trackn_audc+2
  1321 					sta $d210+4
  1322 					stx $d211+4
  1323 					sta $d200+4
  1324 					lda trackn_audf+3
  1325 					ldx trackn_audc+3
  1326 					sta $d200+6
  1327 					stx $d201+6
  1328 					sta $d210+6
  1329 					sty $d218
  1330 					sty $d208
  1331 					ELI STEREOMODE==3		;* L1 L2 R3 R4
  1332 					ldy #$ff
  1333 				v_audctl equ *-1
  1334 					lda trackn_audf+0
  1335 					ldx trackn_audc+0
  1336 					sta $d200
  1337 					stx $d201
  1338 					lda trackn_audf+1
  1339 					ldx trackn_audc+1
  1340 					sta $d200+2
  1341 					stx $d201+2
  1342 					lda trackn_audf+2
  1343 					ldx trackn_audc+2
  1344 					sta $d210+4
  1345 					stx $d211+4
  1346 					sta $d200+4
  1347 					lda trackn_audf+3
  1348 					ldx trackn_audc+3
  1349 					sta $d210+6
  1350 					stx $d211+6
  1351 					sta $d200+6
  1352 					sty $d218
  1353 					sty $d208
  1354 					EIF
  1355 A384 60				rts
  1356 A385			RMTPLAYEREND
    16
    17 				    opt h-
    18 A385 FF FF 00 92 DE 99 +     ins "assets/music.rmt"
    19 				    opt h+
    20
    21
    22 				;debug_mode = 1                             ; uncomment this line to get on screen debug info
    23
    24 				;*************************************  DEFINES
    25
    26 = 0010			VERSION_H           equ "0"
    27 = 0019			VERSION_Lh          equ "9"
    28 = 0016			VERSION_Ll          equ "6"
    29
    30 = 0016			BOARD_SIZE          equ 22                  ; board size
    31
    32 = 0034			CURSOR_OFFSET_X     equ 52                  ; offsets for pmg
    33 = 0014			CURSOR_OFFSET_Y     equ 20
    34
    35 = 0000			STATE_TITLE         equ 0
    36 = 0001			STATE_GAME_ON       equ 1
    37 = 0002			STATE_GAME_NEXT     equ 2
    38 = 0003			STATE_GAME_OVER     equ 3
    39 = 0004			STATE_HELP          equ 4
    40
    41 = 0004			JOY_SKIP_TIME       equ 4                   ; timeout (in vsync cycles) between cursor jumps, when joy keeped in one direction
    42 = 0010			KEY_SKIP_TIME       equ 16                   ; timeout (in vsync cycles) between console keypresses
    43
    44 = 0000			MODE_ARCADE         equ 0
    45 = 0001			MODE_PUZZLE         equ 1
    46 = 0002			MODE_EXPLORE        equ 2
    47
    48 = 008B			CURSOR_COLOR_LIGHT  equ $8b
    49 = 0086			CURSOR_COLOR_DARK   equ $86
    50
    51 = 0016			GAMEOVER_COLOR_0    equ $16
    52 = 0018			GAMEOVER_COLOR_1    equ $18
    53 = 001A			GAMEOVER_COLOR_2    equ $1a
    54 = 001C			GAMEOVER_COLOR_3    equ $1c
    55 = 00EC			GAMEOVER_COLOR_4    equ $ec
    56 = 00EA			GAMEOVER_COLOR_5    equ $ea
    57 = 00E8			GAMEOVER_COLOR_6    equ $e8
    58 = 00E6			GAMEOVER_COLOR_7    equ $e6
    59
    60 = 0096			WELLDONE_COLOR_0    equ $96
    61 = 0098			WELLDONE_COLOR_1    equ $98
    62 = 009A			WELLDONE_COLOR_2    equ $9a
    63 = 009C			WELLDONE_COLOR_3    equ $9c
    64 = 00AC			WELLDONE_COLOR_4    equ $ac
    65 = 00AA			WELLDONE_COLOR_5    equ $aa
    66 = 00A8			WELLDONE_COLOR_6    equ $a8
    67 = 00A6			WELLDONE_COLOR_7    equ $a6
    68
    69 = 0002			GAME_BG_COLOR       equ $02
    70 = 0024			GAME_BG_RED         equ $24
    71 = 00C0			GAME_BG_GREEN       equ $c0
    72 = 0010			TITLE_BG_COLOR      equ $10
    73
    74 = 00DA			SCROLL_COLOR_LIGHT  equ $da
    75 = 00D6			SCROLL_COLOR_DARK   equ $d6
    76
    77 = 00A2			LEVEL_PREVIEW_X     equ 162
    78 = 0080			LEVEL_PREVIEW_Y     equ $80
    79
    80 				;*************************************  ZERO PAGE GLOBAL VARIABLES
    81 AB6A			            org $80
    82 0080-00A0> 00 00		src             .wo 0                       ; source addres
    83 0082 00 00		dest            .wo 0                       ; destination addres
    84 0084 00 00		dataw           .wo 0
    85 0086 00 00		boardPos        .wo 0
    86 0088 0A			cursorX         .by 10                      ; stores actual cursor coordinates
    87 0089 0A			cursorY         .by 10
    88 008A 00			cursorYprev     .by 0                       ; stores previous cursor coordinates
    89 008B 14			cursorYlast     .by 20
    90 008C 34			cursorXlast     .by 52
    91 008D 00			cursor_moves    .by 0
    92 008E 04			joyTimer        .by JOY_SKIP_TIME
    93 008F 00			start_x         .by 0                       ; starting coordinates for some high level arithmetics ;)
    94 0090 00			start_y         .by 0
    95 0091 00 00		start_offset    .wo 0
    96 0093 00			cx              .by 0                       ; and other useful variables
    97 0094 00			cy              .by 0
    98 0095 00			sx              .by 0
    99 0096 00			sy              .by 0
   100 0097 00			dx              .by 0
   101 0098 00			dy              .by 0
   102 0099 00			line_bit        .by 0
   103 009A 00			pos_offset      .by 0
   104 009B 00			is_line         .by 0
   105 009C 00			x_limit         .by 0
   106 009D 00			step            .by 0
   107 009E 00			current_cell    .by 0
   108 009F 01			bit1            .by 1                       ; always cointains '1' - used to cmp
   109 00A0 80			bit7            .by %10000000               ; always cointains '1' - used to cmp
   110 = 00A1			zero_time       .ds 3
   111 00A4-00B1> 00		timer           .by 0
   112 00A5 00			basetimer       .by 0
   113 00A6 00			timerbarlast    .by 0
   114 00A7 00			goal            .by 0
   115 00A8 00			bombs           .by 0
   116 00A9 00 00		hiscores        .wo 0
   117
   118 00AB 00			hline           .by 0
   119 00AC 32			splitpmg        .by 50
   120 00AD 00			hoffset         .by 0
   121
   122 00AE 00			LOW_COLOR_0     .by 0
   123 00AF 00			LOW_COLOR_1     .by 0
   124 00B0 00			LOW_COLOR_2     .by 0
   125 00B1 00			LOW_COLOR_3     .by 0
   126
   127 				;*************************************  VBI                      **************
   128
   129 00B2			            org $2000
   130
   131 2000			VBLANK
   132 2000-2102> A9 00 85 AB	            mva #0 hline
   133 2004 85 4D		            sta 77          ; attract mode off
   134
   135 2006 AD E7 23		            lda gamestate
   136 				            ; cmp #STATE_TITLE
   137 2009 F0 03		            seq
   138 200B 4C B4 20		            jmp ingame
   139 				                                               ; *********** title screen routines
   140
   141 200E AD F3 83		            lda charset_title+(126*8)+3        ; ****** horizontal dot movement
   142 2011 4A			            lsr
   143 2012 90 02		            scc
   144 2014 05 A0		            ora bit7
   145 2016 8D F3 83		            sta charset_title+(126*8)+3
   146 2019 8D F2 83		            sta charset_title+(126*8)+2
   147
   148 201C AD FC 83		            lda charset_title+(127*8)+4
   149 201F 0A			            asl
   150 2020 90 02		            scc
   151 2022 05 9F		            ora bit1
   152 2024 8D FC 83		            sta charset_title+(127*8)+4
   153 2027 8D FD 83		            sta charset_title+(127*8)+5
   154
   155 202A AD 28 73		            lda pmg+$300+40                     ; **************** vertical dot movement
   156 202D 8D C8 73		            sta pmg+$300+200
   157 2030 A0 28		            ldy #40
   158 2032 A2 C8		            ldx #200
   159 2034 B9 01 73		@           lda pmg+$301,y
   160 2037 29 20		            and #%00100000
   161 2039 85 97		            sta dx
   162 203B BD 00 73		            lda pmg+$300,x
   163 203E 29 20		            and #%00100000
   164 2040 0A 0A		            asl:asl
   165 2042 05 97		            ora dx
   166 2044 99 00 73		            sta pmg+$300,y
   167 2047 CA			            dex
   168 2048 C8			            iny
   169 2049 C0 C8		            cpy #200
   170 204B D0 E7		            bne @-
   171
   172 204D C6 AD		            dec hoffset         ; ********************** hscroll
   173 204F D0 24		            bne move
   174 2051 A9 08 85 AD		            mva #8 hoffset
   175 2055 EE 4E 48 D0 03 EE +             inw scrmem+1
   176 205D AD 4F 48 C9 69 D0 +             cpw scrmem+1 #scroll+550 ; reached text length
   177 2069 D0 0A		            bne move
   178 206B A9 80 8D 4E 48 A9 +             mwa #scroll scrmem+1 ; reset to start pos
   179 2075 A5 AD 8D 04 D4	move        mva hoffset hscrol
   180
   181 207A A5 14		            lda rtclock+2       ; ********************* titlebar change
   182 207C D0 2B		            bne notchange
   183
   184 207E A9 BC 85 80 A9 5C +             mwa #titlebar src
   185 2086 A5 13		            lda rtclock+1
   186 2088 29 07		            and #7
   187 208A F0 11		            beq skipadd
   188 208C A8			            tay
   189 208D 18 A5 80 69 28 85 + add40       adw src #40 src
   190 209A 88			            dey
   191 209B D0 F0		            bne add40
   192 209D			skipadd
   193 209D A0 28		            ldy #40
   194 209F B1 80		@           lda (src),y
   195 20A1 99 50 50		            sta t_top,y
   196 20A4 88			            dey
   197 20A5 D0 F8		            bne @-
   198
   199 20A7 A5 14		            lda rtclock+2
   200
   201 20A9 C9 20		notchange   cmp #32
   202 20AB B0 04		            bcs @+
   203 20AD 6A			            ror
   204 20AE 8D CA 6B		            sta title_colors[2]
   205 				@
   206 20B1 4C 00 21		            jmp endvblk
   207
   208 20B4			ingame                                   ; *********** in game routines
   209
   210 20B4 20 03 A0					jsr RASTERMUSICTRACKER+3
   211
   212 20B7 AD E9 23		            lda redblink            ; ******** blink red
   213 20BA F0 1F		            beq noblink
   214 20BC CE E9 23		            dec redblink
   215 20BF 24 9F		            bit bit1
   216 20C1 D0 05		            bne notred
   217 20C3 A2 24		            ldx #GAME_BG_RED
   218 20C5 4C D8 20		            jmp @+
   219 20C8			notred
   220 20C8 A2 02		            ldx #GAME_BG_COLOR
   221
   222 20CA AD E5 23		            lda game_mode           ; ****** keep bg colour change on goal
   223 				            ; cmp #MODE_ARCADE
   224 20CD D0 09		            bne @+
   225 20CF AD E7 2D		            lda score
   226 20D2 C5 A7		            cmp goal
   227 20D4 30 02		            bmi @+
   228 20D6 A2 C0		            ldx #GAME_BG_GREEN
   229 20D8 8E C6 02		@           stx 710
   230 20DB			noblink
   231 				                            ; ******** bomb animaton
   232 20DB AD E5 23		            lda game_mode
   233 20DE C9 01		            cmp #MODE_PUZZLE
   234 20E0 D0 1E		            bne @+
   235 20E2 A5 A8		            lda bombs
   236 20E4 F0 1A		            beq @+
   237 20E6 A0 00		            ldy #0
   238 20E8 98 0A AA		putfuse     tya:asl:tax
   239 20EB A9 56 9D 0B 61	            mva #$56 vram_game+267,x
   240 20F0 A5 14		            lda 20
   241 20F2 29 04		            and #4
   242 20F4 F0 05		            beq skip_fuse
   243 20F6 A9 5C 9D 0B 61	            mva #$5c vram_game+267,x
   244 20FB C8			skip_fuse   iny
   245 20FC C4 A8		            cpy bombs
   246 20FE D0 E8		            bne putfuse
   247 				@
   248 2100			endvblk
   249
   250 2100 4C 5F E4		            jmp sysvbv
   251
   252
   253 				;*************************************  GLOBAL VARIABLES
   254 2103			            org $2200
   255 = 2200			board           .ds BOARD_SIZE*BOARD_SIZE   ; main board array
   256 				                                            ; each byte represents one cell (8 bits = 7 6 5 4 3 2 1 0)
   257 				                                            ; meaning of bits:
   258 				                                            ; 0 : 1 = dot already placed , 0 = no dot
   259 				                                            ; 1 : 1 = cell contains horizontal line '-'
   260 				                                            ; 2 : 1 = cell contains diagonal line '\'
   261 				                                            ; 3 : 1 = cell contains vertical line '|'
   262 				                                            ; 4 : 1 = cell contains diagonal line '/'
   263 				                                            ; 5 : not used
   264 				                                            ; 6 : not used
   265 				                                            ; 7 : 1 = cell has neighbours with dots - include it in search
   266 				                                            ;         for moves algorithm (lookup table)
   267
   268 23E4-23EE> 00		level           .by 0                       ; current level
   269 23E5 00			game_mode       .by 0                       ; current mode
   270 23E6 03			game_mode_num   .by 3                       ; max number of modes
   271 23E7 00			gamestate       .by STATE_TITLE
   272 23E8 01			gamemusic     .by 1
   273
   274 23E9 00			redblink        .by 0
   275 23EA 00			escape          .by 0
   276 23EB 00			scrolldelay     .by 0
   277
   278 23EC 0F			joyPos          .by 15
   279 23ED 01			joyFire         .by 1
   280
   281 23EE 00			line_count      .by 0                       ; number of lines already drawn (stored in array below)
   282 = 23EF			line_sx         .ds 255                     ; starting coords
   283 = 24EE			line_sy         .ds 255
   284 = 25ED			line_dir        .ds 255                     ; line direction bit
   285 = 26EC			line_cx         .ds 255                     ; placed dot coords
   286 = 27EB			line_cy         .ds 255
   287
   288 28EA-28EA> 00		fline_count     .by 0                       ; number of lines found for 1 point (stored in array below)
   289 = 28EB			fline_sx        .ds 255                     ; starting coords
   290 = 29EA			fline_sy        .ds 255
   291 = 2AE9			fline_dir       .ds 255                     ; line direction bit
   292 = 2BE8			fline_cx        .ds 255                     ; dot coords
   293 = 2CE7			fline_cy        .ds 255
   294
   295 2DE6-2E06> 00		fline_sel       .by 0
   296
   297 2DE7 00			score           .by 0
   298 2DE8 00			moves           .by 0
   299 2DE9 00 00		arcadescore     .wo 0
   300
   301 2DEB 9C 4E 34 27		tabpp  dta 156,78,52,39         ;line counter spacing table for instrument speed from 1 to 4
   302
   303
   304 2DEF			modenames
   305 2DEF 21 32 23 21 24 25 +     dta d'ARCADE  '
   306 2DF7 30 35 3A 3A 2C 25 +     dta d'PUZZLE  '
   307 2DFF 25 38 30 2C 2F 32 +     dta d'EXPLORE '
   308
   309
   310 2E07			savedata
   311 = 2E07			hiscoresA .ds 100
   312 = 2E6B			hiscoresP .ds 100
   313 2ECF-2ED0> 00 00		unlocked  .wo 0
   314 = 2ED1			top5      .ds 10
   315
   316
   317 				;*************************************  MAIN                     **************
   318
   319 2EDB			main
   320
   321
   322 2EDB-427A> D8		            cld
   323 2EDC A9 08 85 AD		            mva #8 hoffset
   324 2EE0 A9 00 8D E5 23	            mva #MODE_ARCADE game_mode
   325
   326 2EE5 20 83 8A		            jsr dataLoad
   327
   328 2EE8 20 ED 2F		            jsr setHiscore
   329
   330 2EEB A9 06		            lda #$06
   331 2EED A2 20		            ldx >VBLANK ;HIGH BYTE OF USER ROUTINE
   332 2EEF A0 00		            ldy <VBLANK ;LOW BYTE
   333 2EF1 20 5C E4		            jsr setvbv
   334
   335
   336 2EF4			initTitle
   337 2EF4 A2 00		            ldx #<MODUL
   338 2EF6 A0 92		            ldy #>MODUL                 ;hi byte of RMT module to Y reg
   339 2EF8 A9 00		            lda #0                      ;starting song line 0-255 to A reg
   340 2EFA 20 00 A0		            jsr RASTERMUSICTRACKER      ;Init
   341 				;            tay
   342 				;            lda tabpp-1,y
   343 				;            sta acpapx2+1               ;sync counter spacing
   344 				;            lda #16+0
   345 				;            sta acpapx1+1
   346 2EFD			initTitle_
   347 2EFD 20 46 41		            jsr scrInitTitle
   348 2F00 20 8A 44		            jsr initPMG_title
   349 2F03 20 AD 3C		            jsr updateTitleTop5
   350 2F06 A9 00 8D E7 23	            mva #STATE_TITLE gamestate
   351 2F0B 20 44 3E		            jsr showMode
   352 2F0E 20 AF 3D		            jsr showLevelT
   353 2F11 20 CE 3D		            jsr showHiScoreT
   354 2F14 20 56 40		            jsr showPreview
   355 2F17 AD 1F D0 8D EC 23	            mva consol joyPos
   356 2F1D A2 10 86 8E		            mvx #KEY_SKIP_TIME joyTimer
   357 2F21 A9 00 85 84 85 85	            mwa #0 dataw
   358 2F27 85 13		            sta 19
   359 2F29 85 14		            sta 20
   360 2F2B 8D DC 02		            sta helpfg
   361
   362 2F2E AD 84 02		@           lda strig0  ; wait for fire up
   363 2F31 F0 FB		            beq @-
   364 2F33 AD 84 02 8D ED 23	            mva strig0 joyFire
   365
   366 2F39			loop_title
   367
   368 				;acpapx1     lda #$ff                ;parameter overwrite (sync line counter value)
   369 				;            clc
   370 				;acpapx2     adc #$ff                ;parameter overwrite (sync line counter spacing)
   371 				;            cmp #156
   372 				;            bcc lop4
   373 				;            sbc #156
   374 				;lop4
   375 				;           sta acpapx1+1
   376
   377 2F39 A5 14 C5 14 F0 FC	            lda:cmp:req 20
   378 2F3F 20 03 A0		            jsr RASTERMUSICTRACKER+3    ;1 playjsr RASTERMUSICTRACKER+3
   379 2F42 AD 84 02		            lda strig0  ; fire pressed?
   380 2F45 CD ED 23		            cmp joyFire
   381 2F48 F0 03		            seq
   382 2F4A 4C 72 2F		            jmp startit
   383 2F4D 8D ED 23		            sta joyFire
   384
   385 2F50 AD DC 02		            lda helpfg  ; HELP presed
   386 2F53 C9 11		            cmp #17
   387 2F55 D0 08		            bne @+
   388 2F57 A9 00 8D DC 02	            mva #0 helpfg
   389 2F5C 4C B6 32		            jmp initHelp
   390
   391 				@
   392 2F5F AD 1F D0		            lda consol  ; read CONSOL
   393 2F62 CD EC 23		            cmp joyPos
   394 2F65 F0 28		            beq @+
   395 2F67 8D EC 23		            sta joyPos
   396 2F6A A2 10 86 8E		            mvx #KEY_SKIP_TIME joyTimer
   397
   398 2F6E C9 06		            cmp #6      ; start
   399 2F70 D0 15		            bne option
   400 2F72 AD E5 23		startit     lda game_mode
   401 2F75 C9 01		            cmp #MODE_PUZZLE
   402 2F77 F0 03		            seq
   403 2F79 4C 05 30		            jmp initGame
   404 2F7C AD CF 2E		            lda unlocked
   405 2F7F CD E4 23		            cmp level
   406 2F82 30 03		            bmi option
   407 2F84 4C 05 30		            jmp initGame
   408
   409 2F87 C9 03		option      cmp #3      ; option
   410 2F89 F0 33		            beq ModeUp
   411
   412 2F8B C9 05		            cmp #5      ; select
   413 2F8D F0 0C		            beq levelUp
   414
   415 2F8F C6 8E		@           dec joyTimer        ; joy move delay
   416 2F91 10 05		            bpl @+
   417 2F93 A9 00 8D EC 23	            mva #0 joyPos
   418
   419 				@
   420 2F98 4C 39 2F		            jmp loop_title
   421
   422 2F9B			levelUp
   423 2F9B AD E5 23		            lda game_mode       ; check ARCADE MODE
   424 2F9E C9 00		            cmp #MODE_ARCADE
   425 2FA0 F0 ED		            beq @-1
   426 2FA2 A2 00		            ldx #0
   427 2FA4 EE E4 23		            inc level
   428 2FA7 AD E4 23		            lda level
   429 2FAA CD 52 7E		            cmp levelnum
   430 2FAD D0 03		            sne
   431 2FAF 8E E4 23		            stx level
   432 2FB2 20 AF 3D		            jsr showLevelT
   433 2FB5 20 CE 3D		            jsr showHiscoreT
   434 2FB8 20 56 40		            jsr showPreview
   435 2FBB 4C 8F 2F		            jmp @-1
   436
   437 2FBE			ModeUp
   438 2FBE A2 00		            ldx #0
   439 2FC0 EE E5 23		            inc game_mode
   440 2FC3 AD E5 23		            lda game_mode
   441 2FC6 CD E6 23		            cmp game_mode_num
   442 2FC9 D0 03		            sne
   443 2FCB 8E E5 23		            stx game_mode
   444 2FCE AD E5 23		            lda game_mode       ; check ARCADE MODE
   445 2FD1 C9 00		            cmp #MODE_ARCADE
   446 2FD3 D0 03		            sne
   447 2FD5 8E E4 23		            stx level
   448 2FD8 20 AF 3D		            jsr showLevelT
   449 2FDB 20 CE 3D		            jsr showHiscoreT
   450 2FDE 20 56 40		            jsr showPreview
   451
   452 2FE1 20 44 3E		            jsr showMode
   453 2FE4 20 ED 2F		            jsr setHiscore
   454 2FE7 20 CE 3D		            jsr showHiscoreT
   455 2FEA 4C 8F 2F		            jmp @-1
   456
   457 2FED			setHiscore
   458 2FED A9 07 85 A9 A9 2E +             mwa #hiscoresA hiscores
   459 2FF5 AD E5 23		            lda game_mode
   460 2FF8 C9 01		            cmp #MODE_PUZZLE
   461 2FFA D0 08		            sne
   462 2FFC A9 6B 85 A9 A9 2E +             mwa #hiscoresP hiscores
   463 3004 60			            rts
   464
   465 3005			initGame    ; ****** game initialization (screen and data)
   466
   467 3005 A9 F0					lda #$f0
   468 3007 8D 69 A1					sta RMTSFXVOLUME
   469 300A A2 00					ldx #<MODUL
   470 300C A0 92		            ldy #>MODUL                 ;hi byte of RMT module to Y reg
   471 300E AD E8 23					lda gamemusic
   472 3011 D0 08					bne music_on
   473 3013 A9 1A					lda #$1a
   474 3015 20 00 A0		            jsr RASTERMUSICTRACKER      ;Init
   475 3018 4C 20 30					jmp @+
   476
   477 301B A9 0C		music_on    lda #$0c                    ;starting song line 0-255 to A reg
   478 301D 20 00 A0		            jsr RASTERMUSICTRACKER      ;Init
   479
   480 3020 A9 01 8D E7 23	@           mva #STATE_GAME_ON gamestate
   481
   482 3025 A9 04 85 8E		            mva #JOY_SKIP_TIME joyTimer
   483 3029 A9 00 8D E7 2D	            mva #0 score
   484 302E 8D EA 23		            sta escape
   485 3031 8D E8 2D		            sta moves
   486 3034 8D EE 23		            sta line_count
   487 3037 85 A8		            sta bombs
   488
   489 3039 AD E4 23		            lda level
   490 303C D0 08		            bne notlvl0
   491 303E A9 00 8D E9 2D 8D +             mwa #0 arcadescore
   492
   493 3046 20 5C 3F		notlvl0     jsr updateBombs
   494 3049 20 6A 38		            jsr initBoard
   495 304C 20 89 41		            jsr scrInitGame
   496 304F 20 1D 44		            jsr initPMG
   497 3052 20 CC 39		            jsr showBoard
   498 3055 20 25 3E		            jsr showLevelG
   499 3058 20 05 3A		            jsr showCursor
   500 305B 20 05 3D		            jsr updateScore
   501 305E 20 75 3D		            jsr updateHiScore
   502 3061 20 4D 35		            jsr countMoves
   503
   504 3064 AD E5 23		            lda game_mode       ; check ARCADE MODE
   505 3067 C9 00		            cmp #MODE_ARCADE
   506 3069 D0 0C		            bne @+
   507
   508 306B 20 CA 3E		            jsr showTimebar
   509 306E 20 86 3E		            jsr zeroTimer        ; and set timer
   510 3071 20 AC 3E		            jsr showTimer
   511 3074 20 2E 3F		            jsr showGoal
   512
   513 3077 AD 84 02		@           lda strig0  ; wait for fire up
   514 307A F0 FB		            beq @-
   515
   516 307C A9 FF 8D FC 02	            mva #$ff keycode      ; clear char buffer
   517
   518 3081			main_loop   ; ****** main Game loop
   519
   520 3081 A5 14 C5 14 F0 FC	            lda:cmp:req 20      ; wait 4 VSYNC
   521
   522 3087 AD FC 02		            lda keycode         ; read keyboard
   523 308A 29 3F		            and #%00111111
   524 308C C9 1C		            cmp #28             ; esc pressed
   525 308E D0 03		            bne @+
   526 3090 4C E3 33		            jmp escPressed
   527 				@
   528 3093 C9 25					cmp #37
   529 3095 D0 28					bne @+
   530
   531 3097 A9 FF 8D FC 02				mva #$ff keycode
   532 309C A2 00					ldx #<MODUL
   533 309E A0 92		            ldy #>MODUL                 ;hi byte of RMT module to Y reg
   534 30A0 AD E8 23					lda gamemusic
   535 30A3 D0 0D					bne turn_off
   536
   537 30A5 A9 01 8D E8 23				mva #1 gamemusic
   538 30AA A9 0C					lda #$0c
   539 30AC 20 00 A0		            jsr RASTERMUSICTRACKER      ;Init
   540 30AF 4C 81 30					jmp main_loop
   541
   542 30B2 A9 00 8D E8 23	turn_off	mva #0 gamemusic
   543 30B7 A9 1A					lda #$1a
   544 30B9 20 00 A0		            jsr RASTERMUSICTRACKER      ;Init
   545 30BC 4C 81 30					jmp main_loop
   546
   547 				@
   548 30BF AE E5 23		            ldx game_mode       ; check EXPLORE MODE for hint and undo
   549 30C2 E0 02		            cpx #MODE_EXPLORE
   550 30C4 D0 11		            bne @+1
   551
   552 30C6 C9 39		            cmp #57             ; h pressed
   553 30C8 D0 06		            bne @+
   554 30CA 20 49 3F		            jsr showHint
   555 30CD 4C 81 30		            jmp main_loop
   556
   557 30D0 C9 0B		@           cmp #11             ; u pressed
   558 30D2 D0 03		            bne @+
   559 30D4 20 02 32		            jsr undo
   560
   561 				@
   562 30D7 AD 78 02		            lda stick0          ; Check if stick moved
   563 30DA CD EC 23		            cmp joyPos
   564 30DD F0 03		            seq
   565 30DF 20 F8 33		            jsr movedStick
   566 30E2 C6 8E		            dec joyTimer        ; joy move delay
   567 30E4 D0 05		            sne
   568 30E6 A9 00 8D EC 23	            mva #0 joyPos       ; reset joyPos after delay
   569
   570 30EB AD 84 02		            lda strig0          ; check FIRE button
   571 30EE CD ED 23		            cmp joyFire
   572 30F1 F0 03		            seq
   573 30F3 20 5A 34		            jsr pressedFire
   574
   575 30F6 AD E5 23		            lda game_mode       ; check ARCADE MODE for Timer display
   576 30F9 C9 00		            cmp #MODE_ARCADE
   577 30FB D0 09		            bne @+
   578
   579 30FD 20 93 3E		            jsr updateTimer     ; update timer
   580 3100 A9 00		            lda #0
   581 3102 C5 A4		            cmp timer
   582 3104 10 62		            bpl game_over       ; check time
   583
   584 3106 AD E7 23		@           lda gamestate
   585 3109 C9 03		            cmp #STATE_GAME_OVER
   586 310B F0 5B		            beq game_over
   587
   588 310D 4C 81 30		            jmp main_loop
   589
   590
   591 3110 A2 00		updateTop5  ldx #0
   592 3112 BD D1 2E 85 80 BD + @           mwa top5,x src
   593 311C A5 81 CD EA 2D D0 +             cpw src arcadescore
   594 3128 90 09		            bcc new_record
   595 312A E8 E8		            inx:inx
   596 312C E0 0A		            cpx #10
   597 312E F0 37		            beq no_rec
   598 3130 4C 12 31		            jmp @-
   599
   600 3133 AD E9 2D 9D D1 2E + new_record  mwa arcadescore top5,x
   601
   602 313F E8 E8		@           inx:inx
   603 3141 E0 0A		            cpx #10
   604 3143 F0 1F		            beq savetop5
   605 3145 BD D1 2E 85 82 BD +             mwa top5,x dest
   606 314F A5 80 9D D1 2E A5 +             mwa src top5,x
   607 3159 A5 82 85 80 A5 83 +             mwa dest src
   608 3161 4C 3F 31		            jmp @-
   609
   610 3164 20 AA 8A		savetop5    jsr safeSave
   611
   612 3167 60			no_rec      rts
   613
   614 3168			game_over   ; ****** game over screen
   615
   616 3168 20 71 3B		            jsr hideGuide
   617
   618 316B AD E5 23		@           lda game_mode       ; if EXPLORE MODE not save hiscore
   619 316E C9 02		            cmp #MODE_EXPLORE
   620 3170 F0 12		            beq @+
   621
   622 3172 AC E4 23		            ldy level
   623 3175 B1 A9		            lda (hiscores),y
   624 3177 CD E7 2D		            cmp score
   625 317A 10 08		            bpl @+
   626 317C AD E7 2D		            lda score
   627 317F 91 A9		            sta (hiscores),y
   628 3181 20 AA 8A		            jsr safeSave
   629
   630 3184 AD E5 23		@           lda game_mode       ; if ARCADE MODE check if goal reached
   631 3187 C9 00		            cmp #MODE_ARCADE
   632 3189 D0 0D		            bne @+
   633
   634 318B AD E7 2D		            lda score
   635 318E C5 A7		            cmp goal
   636 3190 30 03		            bmi arcade_end
   637 3192 4C BB 31		            jmp level_up
   638 3195			arcade_end
   639 3195 20 10 31		            jsr updateTop5
   640
   641 3198 20 39 45		@           jsr showOver
   642
   643 319B AD 84 02 8D ED 23	            mva strig0 joyFire
   644 31A1 A5 14 C5 14 F0 FC	@           lda:cmp:req 20          ; wait 4 VSYNC
   645
   646 31A7 AD 84 02					lda strig0
   647 31AA CD ED 23		            cmp joyFire
   648 31AD F0 F2		            beq @-
   649 31AF AD 84 02		@           lda strig0
   650 31B2 F0 FB		            beq @-
   651
   652 31B4 A9 2A 85 AC		            mva #42 splitpmg
   653
   654 31B8 4C F4 2E		            jmp initTitle
   655
   656 31BB			level_up
   657 31BB 20 4C 46		            jsr showLvlUp
   658 31BE AD 84 02 8D ED 23	            mva strig0 joyFire
   659 31C4 A5 14 C5 14 F0 FC	@           lda:cmp:req 20          ; wait 4 VSYNC
   660
   661 31CA AD 84 02					lda strig0
   662 31CD CD ED 23		            cmp joyFire
   663 31D0 F0 F2		            beq @-
   664 31D2 AD 84 02		@           lda strig0
   665 31D5 F0 FB		            beq @-
   666 31D7 A9 2A 85 AC		            mva #42 splitpmg
   667
   668 31DB EE E4 23					inc level
   669 31DE AD E4 23					lda level		; unlock level
   670 31E1 CD CF 2E					cmp unlocked
   671 31E4 F0 08				 	beq @+
   672 31E6 30 06					bmi @+
   673 31E8 8D CF 2E				 	sta unlocked
   674 31EB 20 AA 8A				 	jsr safeSave
   675
   676 				@
   677 31EE AD 52 7E		            lda levelnum
   678 31F1 CD E4 23		            cmp level
   679 31F4 F0 03		            beq endGame
   680 31F6 4C 05 30		            jmp initGame
   681
   682 31F9 CE E4 23		endGame     dec level
   683 31FC 20 10 31		            jsr updateTop5  ; LAST LEVEL REACHED
   684 31FF 4C F4 2E		            jmp initTitle
   685
   686 3202			undo
   687 3202 AD EE 23		            lda line_count
   688 3205 D0 03		            sne
   689 3207 4C B0 32		            jmp undoend
   690 320A CE EE 23		            dec line_count
   691 320D CE E7 2D		            dec score
   692 3210 AE EE 23		            ldx line_count
   693 3213 BD EC 26 85 8F	            mva line_cx,x start_x
   694 3218 BD EB 27 85 90	            mva line_cy,x start_y
   695 321D 20 56 3B		            jsr getOffset
   696 3220 A5 91 85 84 A5 92 +             mwa start_offset dataw
   697
   698
   699 3228 A0 00		            ldy #0
   700 322A 18 A5 84 69 00 85 +             adw dataw #board src
   701 3237 B1 80		            lda (src),y
   702 3239 29 FE		            and #%11111110
   703 323B 49 80		            eor #%10000000
   704 323D 91 80		            sta (src),y
   705
   706 323F AE EE 23		            ldx line_count
   707 3242 BD ED 25 85 99	            mva line_dir,x line_bit
   708 3247 BD EF 23 85 8F	            mva line_sx,x start_x
   709 324C BD EE 24 85 90	            mva line_sy,x start_y
   710 3251 20 56 3B		            jsr getOffset
   711 3254 A5 91 85 86 A5 92 +             mwa start_offset boardPos
   712
   713 325C A9 17 85 9A		            mva #BOARD_SIZE+1 pos_offset    ; offset for linebit = 4 '\'
   714
   715 3260 A9 02		            lda #2
   716 3262 24 99		            bit line_bit
   717 3264 F0 04		            beq @+
   718 3266 A9 01 85 9A		            mva #1 pos_offset;              ; offset for linebit = 2 '-'
   719
   720 326A A9 08		@           lda #8
   721 326C 24 99		            bit line_bit
   722 326E F0 04		            beq @+
   723 3270 A9 16 85 9A		            mva #BOARD_SIZE pos_offset      ; offset for linebit = 8 '|'
   724
   725 3274 A9 10		@           lda #16
   726 3276 24 99		            bit line_bit
   727 3278 F0 0C		            beq @+
   728 327A A5 86 D0 02 C6 87 +             dew boardPos
   729 3282 A9 15 85 9A		            mva #BOARD_SIZE-1 pos_offset    ; offset for linebit = 16 '/'
   730
   731 3286 18 A5 86 69 00 85 + @           adw boardPos #board src
   732 3293 A0 00		            ldy #0
   733 3295 A2 04		            ldx #4
   734 3297 B1 80		@           lda (src),y
   735 3299 45 99		            eor line_bit                    ; 'xor' line_bit with cell content
   736 329B 91 80		            sta (src),y
   737 329D 98			            tya
   738 329E 65 9A		            adc pos_offset
   739 32A0 A8			            tay
   740 32A1 CA			            dex
   741 32A2 D0 F3		            bne @-
   742
   743 32A4 20 BA 3F		            jsr updateSearch
   744 32A7 20 4D 35		            jsr countMoves
   745 32AA 20 05 3D		            jsr updateScore
   746 32AD 20 CC 39		            jsr showBoard
   747
   748
   749 32B0 A9 FF 8D FC 02	undoend     mva #$ff keycode
   750 32B5 60			            rts
   751
   752 32B6			initHelp    ; ****** help initialization
   753
   754 32B6 A9 04 8D E7 23	            mva #STATE_HELP gamestate
   755 32BB 20 C7 41		            jsr scrInitHelp
   756 32BE 20 1D 44		            jsr initPMG
   757
   758 32C1 A9 00		            lda #0
   759 32C3 8D 08 D0 8D 09 D0 +             :4 sta sizep:1
   760 32CF 8D 00 D0 8D 01 D0 +             :4 sta hposp:1
   761 32DB 8D 04 D0 8D 05 D0 +             :4 sta hposm:1
   762 32E7 8D C0 02 8D C1 02 +             :4 sta colpm:1
   763
   764 32F3 AD 84 02 8D ED 23	            mva strig0 joyFire
   765 32F9 A2 00		            ldx #0
   766 32FB 20 42 33		            jsr frame0
   767
   768 32FE			loop_help
   769 32FE A5 14 C5 14 F0 FC	            lda:cmp:req 20
   770
   771 3304 20 18 33		            jsr helpAnimate
   772
   773
   774 3307 AD 84 02		            lda strig0  ; fire pressed?
   775 330A CD ED 23		            cmp joyFire
   776 330D F0 03		            seq
   777 330F 4C FD 2E		            jmp initTitle_
   778 3312 8D ED 23		            sta joyFire
   779
   780 3315 4C FE 32		            jmp loop_help
   781
   782 = 0201			sh_1_base   equ 513
   783 = 016C			sh_2_base   equ 364
   784
   785 3318			helpAnimate
   786 3318 A5 14		            lda 20
   787 331A 0A 0A		            :2 asl
   788 331C D0 23		            bne no_frame
   789 331E E8			            inx ;next frame
   790 331F E0 04		            cpx #4
   791 3321 D0 02		            sne
   792 3323 A2 00		            ldx #0
   793 3325 E0 00		            cpx #0
   794 3327 D0 03		            sne
   795 3329 4C 42 33		            jmp frame0
   796 332C E0 01		            cpx #1
   797 332E D0 03		            sne
   798 3330 4C 7D 33		            jmp frame1
   799 3333 E0 02		            cpx #2
   800 3335 D0 03		            sne
   801 3337 4C 9F 33		            jmp frame2
   802 333A E0 03		            cpx #3
   803 333C D0 03		            sne
   804 333E 4C C1 33		            jmp frame3
   805 3341			no_frame
   806 3341 60			            rts
   807
   808 3342 A9 40		frame0      lda #64
   809 3344 8D C1 65		            sta vram_help+sh_1_base
   810 3347 8D C5 65		            sta vram_help+sh_1_base+4
   811 334A 8D 9D 65		            sta vram_help+sh_1_base-36
   812 334D 8D 99 65		            sta vram_help+sh_1_base-40
   813 3350 8D 72 65		            sta vram_help+sh_1_base-40-39
   814 3353 8D 4B 65		            sta vram_help+sh_1_base-40-39-39
   815 3356 8D 24 65		            sta vram_help+sh_1_base-40-39-39-39
   816
   817 3359 8D 31 65		            sta vram_help+sh_2_base+5
   818
   819 335C A9 41		            lda #65
   820 335E 8D C2 65		            sta vram_help+sh_1_base+1
   821 3361 8D C3 65		            sta vram_help+sh_1_base+2
   822 3364 8D C4 65		            sta vram_help+sh_1_base+3
   823 3367 8D 75 65		            sta vram_help+sh_1_base-36-40
   824 336A 8D 4D 65		            sta vram_help+sh_1_base-36-40-40
   825 336D 8D 25 65		            sta vram_help+sh_1_base-36-40-40-40
   826
   827 3370 8D 2D 65		            sta vram_help+sh_2_base+1
   828 3373 8D 2E 65		            sta vram_help+sh_2_base+2
   829 3376 8D 2F 65		            sta vram_help+sh_2_base+3
   830 3379 8D 30 65		            sta vram_help+sh_2_base+4
   831
   832 337C 60			            rts
   833
   834 337D A9 41		frame1      lda #65
   835 337F 8D C1 65		            sta vram_help+sh_1_base
   836
   837 3382 A9 43		            lda #67
   838 3384 8D 2C 65		            sta vram_help+sh_2_base+0
   839 3387 8D 2D 65		            sta vram_help+sh_2_base+1
   840 338A 8D 2E 65		            sta vram_help+sh_2_base+2
   841 338D 8D 2F 65		            sta vram_help+sh_2_base+3
   842
   843 3390 A9 50		            lda #80
   844 3392 8D 99 65		            sta vram_help+sh_1_base-40
   845 3395 8D 72 65		            sta vram_help+sh_1_base-40-39
   846 3398 8D 4B 65		            sta vram_help+sh_1_base-40-39-39
   847 339B 8D 24 65		            sta vram_help+sh_1_base-40-39-39-39
   848 339E 60			            rts
   849
   850 339F A9 43		frame2      lda #67
   851 33A1 8D C1 65		            sta vram_help+sh_1_base
   852 33A4 8D C2 65		            sta vram_help+sh_1_base+1
   853 33A7 8D C3 65		            sta vram_help+sh_1_base+2
   854 33AA 8D C4 65		            sta vram_help+sh_1_base+3
   855 33AD A9 41		            lda #65
   856 33AF 8D C5 65		            sta vram_help+sh_1_base+4
   857
   858 33B2 8D 2D 65		            sta vram_help+sh_2_base+1
   859 33B5 8D 2E 65		            sta vram_help+sh_2_base+2
   860 33B8 8D 2F 65		            sta vram_help+sh_2_base+3
   861 33BB A9 40		            lda #64
   862 33BD 8D 2C 65		            sta vram_help+sh_2_base
   863
   864 33C0 60			            rts
   865
   866 33C1 A9 49		frame3      lda #73
   867 33C3 8D 9D 65		            sta vram_help+sh_1_base-36
   868 33C6 8D 75 65		            sta vram_help+sh_1_base-36-40
   869 33C9 8D 4D 65		            sta vram_help+sh_1_base-36-40-40
   870 33CC 8D 25 65		            sta vram_help+sh_1_base-36-40-40-40
   871 33CF A9 43		            lda #67
   872 33D1 8D 2D 65		            sta vram_help+sh_2_base+1
   873 33D4 8D 2E 65		            sta vram_help+sh_2_base+2
   874 33D7 8D 2F 65		            sta vram_help+sh_2_base+3
   875 33DA 8D 30 65		            sta vram_help+sh_2_base+4
   876 33DD A9 41		            lda #65
   877 33DF 8D 31 65		            sta vram_help+sh_2_base+5
   878
   879
   880 33E2 60			            rts
   881
   882 				;*************************************  MAIN END                **************
   883
   884
   885 				;*************************************  CONTROLLER ROUTINES
   886
   887 33E3 A9 FF 8D FC 02	escPressed  mva #$ff $02fc
   888 33E8 A9 02		            lda #2
   889 33EA CD EA 23		            cmp escape
   890 33ED D0 03		            sne
   891
   892 33EF 4C 68 31		            jmp game_over
   893 33F2 EE EA 23		            inc escape
   894 33F5 4C 81 30		            jmp main_loop
   895
   896
   897 33F8			movedStick  ; ******* Checkin stick position, if you know what I mean ;)
   898 33F8 8D EC 23		            sta joyPos          ; store previous state
   899 33FB A2 04 86 8E		            mvx #JOY_SKIP_TIME joyTimer
   900 33FF C9 0F		            cmp #15
   901 3401 F0 53		            beq check_out
   902 3403 A2 00 8E EA 23	            mvx #0 escape
   903 3408 49 0F		            eor #15
   904 340A 4A			            lsr                 ; check bit 0001 - up
   905 340B 90 0F		            bcc check_down
   906 340D A6 89		            ldx cursorY
   907 340F F0 04		            beq wrap_up
   908 3411 C6 89		            dec cursorY
   909 3413 10 07		            bpl check_down
   910 3415 A2 15 86 89		wrap_up     mvx #BOARD_SIZE-1 cursorY
   911 3419 20 05 3A		            jsr showCursor
   912
   913 341C 4A			check_down  lsr                 ; check bit 0010 - down
   914 341D 90 11		            bcc check_left
   915 341F A6 89		            ldx cursorY
   916 3421 E0 15		            cpx #BOARD_SIZE-1
   917 3423 F0 04		            beq wrap_down
   918 3425 E6 89		            inc cursorY
   919 3427 D0 07		            bne check_left
   920 3429 A2 00 86 89		wrap_down   mvx #0 cursorY
   921 342D 20 05 3A		            jsr showCursor
   922
   923 3430 4A			check_left  lsr                 ; check bit 0100 - left
   924 3431 90 0F		            bcc check_right
   925 3433 A6 88		            ldx cursorX
   926 3435 F0 04		            beq wrap_left
   927 3437 C6 88		            dec cursorX
   928 3439 10 07		            bpl check_right
   929 343B A2 15 86 88		wrap_left   mvx #BOARD_SIZE-1 cursorX
   930 343F 20 05 3A		            jsr showCursor
   931
   932 3442 4A			check_right lsr                 ; check bit 1000 - right
   933 3443 90 11		            bcc check_out
   934 3445 A6 88		            ldx cursorX
   935 3447 E0 15		            cpx #BOARD_SIZE-1
   936 3449 F0 04		            beq wrap_right
   937 344B E6 88		            inc cursorX
   938 344D D0 07		            bne check_out
   939 344F A2 00 86 88		wrap_right  mvx #0 cursorX
   940 3453 20 05 3A		            jsr showCursor
   941
   942 3456			check_out
   943 3456 20 26 3A		            jsr moveCursor
   944 3459 60			            rts
   945
   946 345A			pressedFire ; ****** Check if fire pressed down
   947 345A 8D ED 23		            sta joyFire                 ; store previous state
   948 345D C9 01		            cmp #1
   949 345F D0 03		            sne
   950 3461 4C 4C 35		            jmp button_up
   951
   952 3464			placeDot    ; ****** Places dot at cursor position
   953 3464 A5 88 85 8F		            mva cursorX start_x
   954 3468 A5 89 85 90		            mva cursorY start_y
   955 346C 20 56 3B		            jsr getOffset
   956
   957 346F 18 A5 91 69 00 85 +             adw start_offset #board dest    ; get cell address
   958
   959 347C A0 00		            ldy #0
   960 347E B1 82		            lda (dest),y
   961 3480 29 01		            and #1
   962 3482 F0 03		            seq
   963 3484 4C 4C 35		            jmp endDot
   964 3487 B1 82		            lda (dest),y                ; swap last bit
   965 3489 49 01		            eor #1
   966 348B 91 82		            sta (dest),y
   967
   968 348D 20 B6 35		            jsr findLines
   969
   970 3490 AD EA 28		            lda fline_count
   971 3493 F0 4C		            beq nolines                 ; no lines
   972
   973 3495 20 D4 36		            jsr selectLine              ; more lines -> select
   974
   975 3498 20 9B 3A		            jsr drawLine
   976 349B 20 CC 39		            jsr showBoard               ; update board
   977 349E 20 4D 35		            jsr countMoves
   978 34A1 20 05 3D		            jsr updateScore
   979
   980 34A4 AD E8 2D		            lda moves
   981 34A7 D0 05		            bne @+
   982
   983 34A9 A9 03 8D E7 23	            mva #STATE_GAME_OVER gamestate
   984
   985 34AE AD E5 23		@           lda game_mode       ; if ARCADE MODE check if goar reached and change color
   986 34B1 C9 00		            cmp #MODE_ARCADE
   987 34B3 D0 17		            bne @+
   988 34B5 AD E7 2D		            lda score
   989 34B8 C5 A7		            cmp goal
   990 34BA 30 08		            bmi changebgcol
   991 34BC A9 C0 8D C6 02	            mva #GAME_BG_GREEN 710
   992 34C1 4C 4C 35		            jmp endDot
   993
   994 34C4 A9 02 8D C6 02	changebgcol mva #GAME_BG_COLOR 710
   995 34C9 4C 4C 35		            jmp endDot
   996
   997 34CC AD E5 23		@           lda game_mode       ; check PUZZLE MODE for bomb check
   998 34CF C9 01		            cmp #MODE_PUZZLE
   999 34D1 D0 79		            bne endDot
  1000 34D3 A9 00		            lda #0
  1001 34D5 C5 A8		            cmp bombs
  1002 34D7 F0 73		            beq endDot
  1003 34D9 C6 A8		            dec bombs
  1004 34DB 20 5C 3F		            jsr updateBombs
  1005 34DE 4C 4C 35		            jmp endDot
  1006
  1007 34E1 A0 20		nolines     ldy	#$20						;Y = 2,4,..,16	instrument number * 2 (0,2,4,..,126)
  1008 34E3 A2 03					ldx #3						;X = 0			channel (0..3 or 0..7 for stereo module)
  1009 34E5 A9 05					lda #05						;A = 12			note (0..60)
  1010 34E7 20 0F A0					jsr RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
  1011
  1012 34EA A0 00					ldy #0
  1013 34EC B1 82		            lda (dest),y                ; swap last bit
  1014 34EE 49 01		            eor #1
  1015 34F0 91 82		            sta (dest),y
  1016
  1017 34F2 AD E5 23		            lda game_mode       ; check PUZZLE MODE for bomb check
  1018 34F5 C9 01		            cmp #MODE_PUZZLE
  1019 34F7 F0 3B		            beq ispuzzle
  1020
  1021 34F9 AD E5 23		            lda game_mode       ; check ARCADE MODE for subtract score
  1022 34FC C9 00		            cmp #MODE_ARCADE
  1023 34FE F0 03		            beq isarcade
  1024
  1025 3500 4C 4C 35		            jmp endDot
  1026
  1027 3503 A9 00 CD EA 2D D0 + isarcade    cpw #0 arcadescore
  1028 350F F0 10		            beq @+
  1029 3511 F8			            sed
  1030 3512 38 AD E9 2D E9 01 +             sbw arcadescore #1
  1031 3520 D8			            cld
  1032 3521 AD E7 2D		@           lda score
  1033 3524 F0 26		            beq endDot
  1034 3526 CE E7 2D		            dec score
  1035 3529 20 05 3D		            jsr updateScore
  1036 352C A9 10 8D E9 23	            mva #$10 redblink
  1037 3531 4C 4C 35		            jmp endDot
  1038
  1039 3534 E6 A8		ispuzzle    inc bombs
  1040 3536 20 5C 3F		            jsr updateBombs
  1041 3539 A9 03		            lda #3
  1042 353B C5 A8		            cmp bombs
  1043 353D F0 08		            beq bombs3
  1044 353F A9 10 8D E9 23	            mva #$10 redblink
  1045 3544 4C 4C 35		            jmp endDot
  1046
  1047 3547 A9 03 8D E7 23	bombs3      mva #STATE_GAME_OVER gamestate
  1048
  1049 354C			button_up
  1050 354C			endDot
  1051 354C 60			            rts
  1052
  1053
  1054 				;*************************************  GAME LOGIC ROUTINES
  1055
  1056 354D			countMoves  ; ****** Counts remaining moves on board
  1057
  1058 354D AD C1 02		            lda colpm1      ; toggle cursor color
  1059 3550 49 30		            eor #$30
  1060 3552 8D C1 02		            sta colpm1
  1061
  1062 				.ifdef debug_mode
  1063 				            mva #0 20       ; timer reset
  1064 				.endif
  1065
  1066 3555 A9 00 8D E8 2D	            mva #0 moves    ; reset counter
  1067 355A 85 8F		            sta start_x     ; and coordinates
  1068 355C 85 90		            sta start_y
  1069 355E 85 91		            sta start_offset
  1070 3560 85 92		            sta start_offset+1
  1071 3562 A9 00 85 82 A9 22 +             mwa #board dest
  1072
  1073 356A A0 00		            ldy #0
  1074 				@                           ; main loop
  1075 356C B1 82		            lda (dest),y
  1076 356E 10 1B		            bpl @+          ; check 7th bit (is cell qualified for search ?)
  1077 3570 85 9E		            sta current_cell
  1078 3572 49 01		            eor #1          ; mark it used (or bit 0) for time of search
  1079 3574 91 82		            sta (dest),y
  1080
  1081 3576 20 B6 35		            jsr findLines
  1082
  1083 3579 AD EA 28		            lda fline_count
  1084 357C F0 07		            beq notfound
  1085
  1086 357E 18			            clc
  1087 357F 6D E8 2D		            adc moves       ; add number of found lines to avail moves
  1088 3582 8D E8 2D		            sta moves
  1089
  1090 3585 A0 00		notfound    ldy #0
  1091 3587 A5 9E		            lda current_cell ; reset bit 0 after search
  1092 3589 91 82		            sta (dest),y
  1093 358B E6 82 D0 02 E6 83	@           inw dest         ; increment positions
  1094 3591 E6 91 D0 02 E6 92	            inw start_offset ; and coordinates
  1095 3597 E6 8F		            inc start_x
  1096 3599 A9 16		            lda #BOARD_SIZE
  1097 359B C5 8F		            cmp start_x
  1098 359D D0 CD		            bne @-1
  1099 359F 84 8F		            sty start_x      ; reset x value to 0
  1100 35A1 E6 90		            inc start_y
  1101 35A3 C5 90		            cmp start_y
  1102 35A5 D0 C5		            bne @-1
  1103
  1104 35A7 20 93 3D		            jsr updateMoves ; update screen
  1105
  1106 				.ifdef     debug_mode
  1107 				            mwa #vram_end-3 dest ; show timer
  1108 				            lda 20
  1109 				            jsr printNum
  1110 				.endif
  1111
  1112 35AA AD C1 02		            lda colpm1 ; toggle cursor color
  1113 35AD 49 30		            eor #$30
  1114 35AF 8D C1 02		            sta colpm1
  1115
  1116 35B2 20 CC 39		            jsr showBoard
  1117
  1118 35B5 60			            rts
  1119
  1120
  1121 35B6			findLines   ; ****** finds available lines for start_x start_y position
  1122
  1123 35B6 A9 00 8D EA 28	            mva #0 fline_count           ; reset lines counter
  1124 35BB 85 9C		            sta x_limit
  1125
  1126 35BD A9 02 85 99		find2       mva #2 line_bit              ;  - 2
  1127 35C1 A9 A5 8D 5E 36	            mva #$a5 cy_change ; lda
  1128 35C6 8D 90 36		            sta sy_change
  1129 35C9 A9 E6 8D 5C 36	            mva #$e6 cx_change ; inc
  1130 35CE A9 C6 8D 94 36	            mva #$c6 sx_change ; dec
  1131 35D3 A9 01 85 9A		            mva #1 pos_offset
  1132 35D7 20 16 36		            jsr find4Dir
  1133
  1134 35DA A9 04 85 99		find4       mva #4 line_bit              ;   \ 4
  1135 35DE A9 E6 8D 5E 36	            mva #$e6 cy_change ; inc
  1136 35E3 A9 C6 8D 90 36	            mva #$c6 sy_change ; dec
  1137 35E8 A9 17 85 9A		            mva #BOARD_SIZE+1 pos_offset
  1138 35EC 20 16 36		            jsr find4Dir
  1139
  1140 35EF A9 08 85 99		find8       mva #8 line_bit              ;   | 8
  1141 35F3 A9 A5 8D 5C 36	            mva #$a5 cx_change ; lda
  1142 35F8 8D 94 36		            sta sx_change ; lda
  1143 35FB C6 9A		            dec pos_offset
  1144 35FD 20 16 36		            jsr find4Dir
  1145
  1146 3600 A9 10 85 99		find16      mva #16 line_bit             ;   / 16
  1147 3604 A9 C6 8D 5C 36	            mva #$c6 cx_change ; dec
  1148 3609 A9 E6 8D 94 36	            mva #$e6 sx_change ; inc
  1149 360E E6 9C		            inc x_limit
  1150 3610 C6 9A		            dec pos_offset
  1151 3612 20 16 36		            jsr find4Dir
  1152
  1153 3615 60			            rts
  1154
  1155 3616			find4Dir    ; ****** finds available lines in direction specified by line_bit : -2  \4  |8  /16
  1156 				            ; ****** that is real rocket science. be carefull here - it was optimized 3 days.
  1157 3616 A5 8F 85 95		            mva start_x sx
  1158 361A A5 90 85 96		            mva start_y sy
  1159 361E A5 91 85 86 A5 92 +             mwa start_offset boardPos
  1160
  1161 3626 A9 05 85 9D		            mva #5 step
  1162 362A			while5                                  ; while (step < 5)
  1163 362A A5 95 85 93		            mva sx cx
  1164 362E A5 96 85 94		            mva sy cy
  1165 3632 18 A5 86 69 FF 85 +             adw boardPos #board-1 src
  1166 363F A9 01 85 9B		            mva #1 is_line
  1167 3643 A2 05		            ldx #5
  1168 3645			for5
  1169 3645 A0 01		            ldy #1
  1170 3647 B1 80		            lda (src),y
  1171 3649 29 01		            and #1                     ; test bit 1
  1172 364B F0 31		            beq no_line
  1173 364D E0 01		            cpx #1                     ; dont test linebit for last line
  1174 364F F0 34		            beq for_end
  1175 3651 A5 9C		            lda x_limit                ; for linebit 16 test prev cell
  1176 3653 F0 01		            beq @+
  1177 3655 88			            dey
  1178 3656 B1 80		@           lda (src),y
  1179 3658 25 99		            and line_bit               ; test line bit
  1180 365A D0 22		            bne no_line
  1181
  1182 365C E6 93		cx_change   inc cx
  1183 365E E6 94		cy_change   inc cy
  1184 3660 A9 16		            lda #BOARD_SIZE
  1185 3662 C5 93		            cmp cx
  1186 3664 F0 18		            beq no_line                 ; cx >= boardsize
  1187 3666 C5 94		            cmp cy
  1188 3668 F0 14		            beq no_line                 ; cy >= boardsize
  1189 366A A5 93		            lda cx
  1190 366C C5 9C		            cmp x_limit
  1191 366E 30 0E		            bmi no_line                 ; cx < xlimit
  1192
  1193 3670 A5 80		            lda src                     ; increase offset
  1194 3672 18			            clc
  1195 3673 65 9A		            adc pos_offset
  1196 3675 85 80		            sta src
  1197 3677 90 02		            scc
  1198 3679 E6 81		            inc src+1
  1199
  1200 367B CA			            dex
  1201 367C D0 C7		            bne for5
  1202
  1203 367E CA			no_line     dex
  1204 367F A9 00 85 9B		            mva #0 is_line
  1205 3683 F0 07		            beq @+
  1206 3685			for_end
  1207 3685 A5 9B		            lda is_line                 ; found line
  1208 3687 F0 03		            beq @+
  1209 3689 20 B4 36		            jsr addFline
  1210
  1211 368C C6 9D		@           dec step
  1212 368E F0 23		            beq found
  1213
  1214 3690 C6 96		sy_change   dec sy
  1215 3692 30 1F		            bmi found                 ; sy < 0
  1216
  1217 3694 C6 95		sx_change   dec sx
  1218 3696 A5 95		            lda sx
  1219 3698 C5 9C		            cmp x_limit
  1220 369A 30 17		            bmi found                 ; sx < xlimit
  1221 369C C9 16		            cmp #BOARD_SIZE
  1222 369E 10 13		            bpl found                 ; sx >= boardsize
  1223
  1224 36A0 38			            sec                       ; decrease offset
  1225 36A1 A5 86		            lda boardPos
  1226 36A3 E5 9A		            sbc pos_offset
  1227 36A5 85 86		            sta boardPos
  1228 36A7 B0 02		            scs
  1229 36A9 C6 87		            dec boardPos+1
  1230
  1231 36AB CA			            dex                       ; decrement sx,sy by remaining x (no need to check)
  1232 36AC F0 02		            seq
  1233 36AE 10 DC		            bpl @-
  1234 36B0 4C 2A 36		            jmp while5
  1235 36B3			found
  1236 36B3 60			            rts
  1237
  1238 36B4			addFline    ; ******* adds line to found lines array
  1239
  1240 36B4 AC EA 28		            ldy fline_count
  1241 36B7 A5 95 99 EB 28	            mva sx fline_sx,y
  1242 36BC A5 96 99 EA 29	            mva sy fline_sy,y
  1243 36C1 A5 8F 99 E8 2B	            mva start_x fline_cx,y
  1244 36C6 A5 90 99 E7 2C	            mva start_y fline_cy,y
  1245 36CB A5 99 99 E9 2A	            mva line_bit fline_dir,y
  1246 36D0 EE EA 28		            inc fline_count
  1247
  1248 36D3 60			            rts
  1249
  1250 36D4			selectLine  ; ******* selects line from found lines array (sets last)
  1251
  1252 36D4 A9 00 8D E6 2D	            mva #0 fline_sel
  1253
  1254 36D9 20 71 3B		            jsr hideGuide
  1255 36DC 20 95 3B		            jsr showGuide
  1256
  1257 36DF AD EA 28		            lda fline_count
  1258 36E2 C9 01		            cmp #1
  1259 36E4 D0 03 4C 69 37	            jeq draw                    ; one line -> draw
  1260
  1261
  1262 36E9 AD 84 02		@           lda strig0                  ; wait for trigger release
  1263 36EC C9 01		            cmp #1
  1264 36EE D0 F9		            bne @-
  1265
  1266 36F0 AD 78 02		            lda stick0
  1267 36F3 8D EC 23		            sta joyPos
  1268
  1269 36F6 A5 14 C5 14 F0 FC	sel_loop    lda:cmp:req 20          ; wait 4 VSYNC
  1270
  1271
  1272 36FC AD E5 23		            lda game_mode       ; check ARCADE MODE for Timer display
  1273 36FF C9 00		            cmp #MODE_ARCADE
  1274 3701 D0 0D		            bne @+
  1275 3703 20 93 3E		            jsr updateTimer
  1276 3706 A5 A4		            lda timer
  1277 3708 10 06		            bpl @+
  1278 370A A9 03 8D E7 23	            mva #STATE_GAME_OVER gamestate
  1279 370F 60			            rts
  1280
  1281 3710 AD 78 02		@           lda stick0
  1282 3713 CD EC 23		            cmp joyPos              ; stick moved ?
  1283 3716 F0 4A		            beq not_moved
  1284 3718 8D EC 23		            sta joyPos
  1285 371B C9 0F		            cmp #15                 ; moved to direction
  1286 371D F0 43		            beq not_moved
  1287
  1288 371F A2 00		            ldx #0
  1289
  1290 3721 AD EC 23		            lda joyPos
  1291 3724 49 0F		            eor #15
  1292 3726 4A			            lsr                 ; check bit 0001 - up
  1293 3727 B0 0B		            bcs go_next
  1294 3729 4A			            lsr                 ; check bit 0010 - down
  1295 372A B0 19		            bcs go_prev
  1296 372C 4A			            lsr                 ; check bit 0100 - left
  1297 372D B0 05		            bcs go_next
  1298 372F 4A			            lsr                 ; check bit 1000 - right
  1299 3730 B0 13		            bcs go_prev
  1300 3732 90 28		            bcc @+1
  1301
  1302 3734 EE E6 2D		go_next     inc fline_sel           ; next line
  1303 3737 AD E6 2D		            lda fline_sel
  1304 373A CD EA 28		            cmp fline_count
  1305 373D D0 14		            bne @+
  1306 373F 8E E6 2D		            stx fline_sel           ; set 0
  1307 3742 4C 53 37		            jmp @+
  1308
  1309 3745 CE E6 2D		go_prev     dec fline_sel           ; prev line
  1310 3748 10 09		            bpl @+
  1311 374A AD EA 28 8D E6 2D	            mva fline_count fline_sel      ; set max
  1312 3750 CE E6 2D		            dec fline_sel
  1313
  1314 3753 A0 24		@			ldy	#$24						;Y = 2,4,..,16	instrument number * 2 (0,2,4,..,126)
  1315 3755 A2 03					ldx #3						;X = 3			channel (0..3 or 0..7 for stereo module)
  1316 3757 A9 0C					lda #12						;A = 12			note (0..60)
  1317 3759 20 0F A0					jsr RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
  1318
  1319 375C 20 71 3B		@           jsr hideGuide
  1320 375F 20 95 3B		            jsr showGuide
  1321
  1322
  1323 3762 AD 84 02		not_moved   lda strig0                  ; wait for trigger press
  1324 3765 C9 01		            cmp #1
  1325 3767 F0 8D		            beq sel_loop
  1326
  1327 3769 20 71 3B		draw        jsr hideGuide
  1328
  1329 376C EE E6 2D		            inc fline_sel
  1330 376F AD E6 2D 8D EA 28	            mva fline_sel fline_count
  1331
  1332 3775 60			            rts
  1333
  1334
  1335 3776			add4Search  ; ****** Adds cell (at dataw offset) neighbours to search lookup array (sets 7th bit)
  1336 3776 98			            tya                  ; push y on stack
  1337 3777 48			            pha
  1338 3778 A0 00		            ldy #0
  1339
  1340 377A 18 A5 84 69 00 85 +             adw dataw #board boardPos
  1341 3787 A5 87 C9 22 D0 04 +             cpw boardPos #board
  1342 3791 90 06		            bcc @+
  1343 3793 B1 86		            lda (boardPos),y
  1344 3795 29 7F		            and #%01111111      ; remove cell from lookup array
  1345 3797 91 86		            sta (boardPos),y
  1346
  1347 3799 18 A5 84 69 E9 85 + @           adw dataw #board-BOARD_SIZE-1 boardPos    ; upper left
  1348 37A6 A5 87 C9 22 D0 04 +             cpw boardPos #board
  1349 37B0 90 03		            scc
  1350 37B2 20 5F 38		            jsr setBit7
  1351
  1352 37B5 E6 86 D0 02 E6 87	            inw boardPos                              ; upper
  1353 37BB A5 87 C9 22 D0 04 +             cpw boardPos #board
  1354 37C5 90 03		            scc
  1355 37C7 20 5F 38		            jsr setBit7
  1356
  1357 37CA E6 86 D0 02 E6 87	            inw boardPos                              ; upper right
  1358 37D0 A5 87 C9 22 D0 04 +             cpw boardPos #board
  1359 37DA 90 03		            scc
  1360 37DC 20 5F 38		            jsr setBit7
  1361
  1362 37DF 18 A5 84 69 FF 85 +             adw dataw #board-1 boardPos               ; on left
  1363 37EC A5 87 C9 22 D0 04 +             cpw boardPos #board
  1364 37F6 90 03		            scc
  1365 37F8 20 5F 38		            jsr setBit7
  1366
  1367 37FB E6 86 D0 02 E6 87	            inw boardPos                              ; right
  1368 3801 E6 86 D0 02 E6 87	            inw boardPos
  1369 3807 A5 87 C9 23 D0 04 +             cpw boardPos #level
  1370 3811 B0 03		            scs
  1371 3813 20 5F 38		            jsr setBit7
  1372
  1373 3816 18 A5 84 69 15 85 +             adw dataw #(board+BOARD_SIZE-1) boardPos  ; bottom left
  1374 3823 A5 87 C9 23 D0 04 +             cpw boardPos #level
  1375 382D B0 03		            scs
  1376 382F 20 5F 38		            jsr setBit7
  1377
  1378 3832 E6 86 D0 02 E6 87	            inw boardPos                              ; bottom
  1379 3838 A5 87 C9 23 D0 04 +             cpw boardPos #level
  1380 3842 B0 03		            scs
  1381 3844 20 5F 38		            jsr setBit7
  1382
  1383 3847 E6 86 D0 02 E6 87	            inw boardPos                              ; bottom right
  1384 384D A5 87 C9 23 D0 04 +             cpw boardPos #level
  1385 3857 B0 03		            scs
  1386 3859 20 5F 38		            jsr setBit7
  1387
  1388 385C 68			            pla             ; pull y from stack
  1389 385D A8			            tay
  1390 385E 60			            rts
  1391
  1392 385F			setBit7     ; ****** sets bit 7 (adds cell at boardPos to lookup table)
  1393 385F B1 86		            lda (boardPos),y
  1394 3861 24 9F		            bit bit1            ; only when there is no dot at this cell already
  1395 3863 D0 04		            bne @+
  1396 3865 09 80		            ora #%10000000
  1397 3867 91 86		            sta (boardPos),y
  1398 				@
  1399 3869 60			            rts
  1400
  1401
  1402 386A			 icl 'board.asm'
Source: D:\!Delphi\mads\examples\games\5dots\board.asm
     1
     2 				;*************************************  BOARD
     3
     4 386A			initBoard   ; ****** Clears board memory, and loads initial setup 
     5 				 
     6 386A A9 00 85 82 A9 22 +             mwa #board dest     ; clear board
     7 3872 A0 00		            ldy #0
     8 3874 A9 00 91 82		@           mva #0 (dest),y
     9 3878 E6 82 D0 02 E6 83	            inw dest
    10 387E A5 83 C9 23 D0 04 +             cpw dest #board+(BOARD_SIZE*BOARD_SIZE)
    11 3888 D0 EA		            bne @-
    12 388A AD E4 23		            lda level           ; init layout
    13 388D 18 2A A8		            clc:rol:tay
    14 3890 B9 32 7E 85 80 B9 +             mwa lvlptrs,y src
    15 389A A0 00		            ldy #0
    16 389C A2 01		            ldx #1   
    17 389E A9 00 85 82 A9 22 +             mwa #board dest
    18 38A6 B1 80 85 84 C8 B1 + @           mwa (src),y dataw 
    19 38AF 18 A5 82 65 84 8D +             adw dest dataw set+1
    20 				            
    21 38BE A9 00 C5 85 D0 04 +             cpw #0 dataw
    22 38C8 F0 0A		            beq setgoal
    23 38CA 8E FF FF		set         stx $ffff                                        
    24
    25 38CD 20 76 37		            jsr add4Search
    26
    27 38D0 C8			            iny 
    28 38D1 4C A6 38		            jmp @-      
    29 				            
    30 38D4 C8			setgoal     iny
    31 38D5 B1 80 85 84 C8 B1 +             mwa (src),y dataw
    32 38DE A5 84 85 A4		            mva dataw timer
    33 38E2 85 A5		            sta basetimer
    34 38E4 C8			            iny
    35 38E5 B1 80 85 84 C8 B1 +             mwa (src),y dataw
    36 38EE A5 84 85 A7		            mva dataw goal                           
    37 				                            ; print levelname    
    38 38F2 AD E4 23		setname     lda level          
    39 38F5 0A A8		            asl:tay
    40 38F7 B9 32 7E 85 80 B9 +             mwa lvlptrs,y src
    41 3901 38			            sec          
    42 3902 38 A5 80 E9 10 85 +             sbw src #16
    43 390D A9 00 85 82 A9 60 +             mwa #vram_game dest
    44 3915 18 A5 82 69 62 85 +             adw dest #866 dest
    45 3922 A0 0C		            ldy #12
    46 3924 B1 80		@           lda (src),y
    47 3926 91 82		            sta (dest),y
    48 3928 88			            dey
    49 3929 10 F9		            bpl @- 
    50 				            
    51 392B AD E5 23		            lda game_mode       ; check ARCADE MODE
    52 392E C9 00		            cmp #MODE_ARCADE
    53 3930 D0 03		            sne 
    54 3932 4C 8C 39		            jmp arcade
    55 				            
    56 3935 A9 E2 85 80 A9 60 + noarcade    mwa #vram_game+226 src
    57 393D A9 0A 85 82 A9 61 +             mwa #vram_game+266 dest
    58 3945 20 C2 39		            jsr label
    59 3948 A9 5A 85 82 A9 61 +             mwa #vram_game+346 dest
    60 3950 20 C2 39		            jsr label
    61 3953 A9 72 85 82 A9 62 +             mwa #vram_game+626 dest
    62 395B 20 C2 39		            jsr label
    63
    64 				            
    65 395E AD E5 23		            lda game_mode       ; check 
    66 3961 C9 02		            cmp #MODE_EXPLORE
    67 3963 D0 26		            bne noexplore
    68 				            
    69 3965 A9 0A 85 82 A9 61 +             mwa #vram_game+266 dest
    70 396D A9 5B 85 80 A9 6C +             mwa #hint_label src
    71 3975 20 C2 39		            jsr label
    72 3978 A9 5A 85 82 A9 61 +             mwa #vram_game+346 dest
    73 3980 A9 69 85 80 A9 6C +             mwa #undo_label src
    74 3988 20 C2 39		            jsr label 
    75
    76 398B 60			noexplore   rts
    77
    78 398C A9 0A 85 82 A9 61 + arcade      mwa #vram_game+266 dest
    79 3994 A9 22 85 80 A9 6C +             mwa #timer_label src
    80 399C 20 C2 39		            jsr label
    81 399F A9 5A 85 82 A9 61 +             mwa #vram_game+346 dest
    82 39A7 A9 30 85 80 A9 6C +             mwa #goal_label src
    83 39AF 20 C2 39		            jsr label
    84 39B2 A9 72 85 82 A9 62 +             mwa #vram_game+626 dest
    85 39BA A9 4D 85 80 A9 6C +             mwa #arcade_label src
    86 				            
    87 				            
    88 39C2 A0 0C		label       ldy #12
    89 39C4 B1 80		@           lda (src),y
    90 39C6 91 82		            sta (dest),y
    91 39C8 88			            dey
    92 39C9 10 F9		            bpl @-
    93 				           
    94 39CB 60			            rts 
    95
    96 39CC			showBoard   ; ****** Prints board contents 
    97 39CC A2 15		            ldx #BOARD_SIZE-1
    98 39CE A9 00 85 80 A9 22 +             mwa #board src
    99 39D6 A9 29 85 82 A9 60 +             mwa #vram_game+41 dest
   100 39DE A0 15		showcell    ldy #BOARD_SIZE-1
   101 39E0 B1 80		            lda (src),y
   102 39E2 09 40		            ora #$40        ; adds 32 (to get proper chars from chartable)
   103 				.ifndef debug_mode
   104 39E4 29 7F		            and #%01111111  ; hides bit 7 (lookup marker)
   105 				.endif
   106 39E6 91 82		            sta (dest),y
   107 39E8 88			            dey
   108 39E9 10 F5		            bpl showcell+2
   109 39EB 18 A5 80 69 16 85 +             adw src #BOARD_SIZE
   110 39F6 18 A5 82 69 28 85 +             adw dest #40
   111 3A01 CA			            dex     
   112 3A02 10 DA		            bpl showcell    
   113 3A04 60			            rts                 
   114
   115
   116 3A05			showCursor  ; ******* jump to position
   117
   118 3A05 A5 88		            lda cursorX
   119 3A07 18 2A 2A		            clc:rol:rol
   120 3A0A 18 69 34		            add #CURSOR_OFFSET_X
   121 3A0D 85 8C		            sta cursorXlast
   122 				            
   123 3A0F A5 89		            lda cursorY       
   124 3A11 18 2A 2A		            clc:rol:rol
   125 3A14 18 69 14		            add #CURSOR_OFFSET_Y
   126 3A17 85 8B		            sta cursorYlast
   127
   128 3A19 A5 8C 8D 7A 3A	            mva cursorXlast moveX+1
   129 3A1E A5 8B 8D 53 3A	            mva cursorYlast moveY+1
   130 				            ;sta cursorYprev
   131 3A23 4C 3A 3A		            jmp clearLast
   132
   133 3A26			moveCursor  ; ******* smooth movement animation 
   134 				            
   135 3A26 A5 88		            lda cursorX
   136 3A28 18 2A 2A		            clc:rol:rol
   137 3A2B 18 69 34		            add #CURSOR_OFFSET_X
   138 3A2E 85 8C		            sta cursorXlast
   139 				            
   140 3A30 A5 89		            lda cursorY       
   141 3A32 18 2A 2A		            clc:rol:rol
   142 3A35 18 69 14		            add #CURSOR_OFFSET_Y
   143 3A38 85 8B		            sta cursorYlast
   144 				            
   145 3A3A A9 02 85 8D		clearLast   mva #2 cursor_moves
   146 3A3E A5 14 C5 14 F0 FC	            lda:cmp:req 20      ; wait 4 VSYNC
   147
   148 3A44 A6 8A		            ldx cursorYprev     ; clear last
   149 3A46 A9 00 9D 00 72	            mva #0 pmg+$200,x            
   150 3A4B 9D 80 72		            sta pmg+$280,x
   151 3A4E E8			            inx            
   152 3A4F 9D 80 72		            sta pmg+$280,x            
   153
   154 3A52 A0 00		moveY       ldy #0              ; show new
   155 3A54 A9 80 99 00 72	            mva #128 pmg+$200,y            
   156 3A59 A9 C0 99 80 72	            mva #192 pmg+$280,y
   157 3A5E 84 8A		            sty cursorYprev
   158 3A60 C8			            iny
   159 3A61 99 80 72		            sta pmg+$280,y
   160 3A64 88			            dey            
   161 3A65 C4 8B		            cpy cursorYlast     ; count target y distance
   162 3A67 F0 0E		            beq moveYstop       ; reached
   163 3A69 30 06		            bmi incY
   164 3A6B CE 53 3A		            dec moveY+1
   165 3A6E 4C 79 3A		            jmp moveX
   166 3A71 EE 53 3A		incY        inc moveY+1
   167 3A74 4C 79 3A		            jmp moveX
   168 				            
   169 3A77 C6 8D		moveYstop   dec cursor_moves
   170
   171 3A79 A2 00		moveX       ldx #0
   172 3A7B 8E 00 D0		            stx hposp0
   173 3A7E 8E 01 D0		            stx hposp1
   174 3A81 E4 8C		            cpx cursorXlast     ; count target x distance
   175 3A83 F0 0E		            beq moveXstop       ; reached
   176 3A85 30 06		            bmi incX 
   177 3A87 CE 7A 3A		decX        dec moveX+1
   178 3A8A 4C 3A 3A		            jmp clearLast
   179 3A8D EE 7A 3A		incX        inc moveX+1 
   180 3A90 4C 3A 3A		            jmp clearLast
   181
   182 3A93 C6 8D		moveXstop   dec cursor_moves   
   183 3A95 D0 01		            sne                  ; test if target reached on both axes      
   184 3A97 60			            rts
   185 3A98 4C 3A 3A		            jmp clearLast
   186
   187 3A9B			drawLine    ; ******* draws last line from found lines array 
   188
   189 3A9B CE EA 28		            dec fline_count                 ; get line from flines
   190 3A9E AC EA 28		            ldy fline_count                 ; and store in lines
   191 3AA1 AE EE 23		            ldx line_count
   192 3AA4 B9 EB 28 9D EF 23	            mva fline_sx,y line_sx,x
   193 3AAA 85 8F		            sta start_x
   194 3AAC B9 EA 29 9D EE 24	            mva fline_sy,y line_sy,x
   195 3AB2 85 90		            sta start_y
   196 3AB4 20 56 3B		            jsr getOffset
   197 3AB7 A5 91 85 86 A5 92 +             mwa start_offset boardPos       ; get line start offset
   198 				            
   199 3ABF AE EE 23		            ldx line_count
   200 3AC2 B9 E8 2B 9D EC 26	            mva fline_cx,y line_cx,x
   201 3AC8 85 8F		            sta start_x
   202 3ACA B9 E7 2C 9D EB 27	            mva fline_cy,y line_cy,x
   203 3AD0 85 90		            sta start_y
   204 3AD2 20 56 3B		            jsr getOffset
   205 3AD5 A5 91 85 84 A5 92 +             mwa start_offset dataw          ; get new dot offset
   206 3ADD AE EE 23		            ldx line_count
   207 3AE0 B9 E9 2A 9D ED 25	            mva fline_dir,y line_dir,x
   208 3AE6 85 99		            sta line_bit
   209 3AE8 EE EE 23		            inc line_count                  
   210 				             
   211 3AEB A9 17 85 9A		            mva #BOARD_SIZE+1 pos_offset    ; offset for linebit = 4 '\'
   212 				            
   213 3AEF A9 02		            lda #2
   214 3AF1 24 99		            bit line_bit
   215 3AF3 F0 04		            beq @+
   216 3AF5 A9 01 85 9A		            mva #1 pos_offset;              ; offset for linebit = 2 '-'
   217
   218 3AF9 A9 08		@           lda #8
   219 3AFB 24 99		            bit line_bit
   220 3AFD F0 04		            beq @+
   221 3AFF A9 16 85 9A		            mva #BOARD_SIZE pos_offset      ; offset for linebit = 8 '|'
   222
   223 3B03 A9 10		@           lda #16
   224 3B05 24 99		            bit line_bit
   225 3B07 F0 0C		            beq @+ 
   226 3B09 A5 86 D0 02 C6 87 +             dew boardPos 
   227 3B11 A9 15 85 9A		            mva #BOARD_SIZE-1 pos_offset    ; offset for linebit = 16 '/'
   228
   229 3B15 18 A5 86 69 00 85 + @           adw boardPos #board src           
   230 3B22 A0 00		            ldy #0
   231 3B24 A2 04		            ldx #4
   232 3B26 B1 80		@           lda (src),y
   233 3B28 05 99		            ora line_bit                    ; 'or' line_bit with cell content
   234 3B2A 91 80		            sta (src),y                     
   235 3B2C 98			            tya 
   236 3B2D 65 9A		            adc pos_offset
   237 3B2F A8			            tay
   238 3B30 CA			            dex 
   239 3B31 D0 F3		            bne @- 
   240 				            
   241
   242 3B33 20 76 37		            jsr add4Search                  ; add neighbours to search lookup table
   243 				         
   244 3B36 EE E7 2D		            inc score
   245 3B39 F8			            sed 
   246 3B3A 18 AD E9 2D 69 01 +             adw arcadescore #1
   247 3B48 D8			            cld
   248 3B49 20 05 3D		            jsr updateScore
   249
   250 3B4C A0 22					ldy	#$22						;Y = 2,4,..,16	instrument number * 2 (0,2,4,..,126)
   251 3B4E A2 03					ldx #3						;X = 3			channel (0..3 or 0..7 for stereo module)
   252 3B50 A9 0C					lda #12						;A = 12			note (0..60)
   253 3B52 20 0F A0					jsr RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
   254
   255 3B55 60			            rts            
   256
   257 3B56			getOffset   ; ****** calc boardPosition (index)
   258 3B56 A9 00 85 92		            mva #0 start_offset+1           
   259 3B5A A5 8F 85 91		            mva start_x start_offset
   260 3B5E A6 90		            ldx start_y
   261 3B60 F0 0E		            beq @+1
   262 3B62 18 A5 91 69 16 85 + @           adw start_offset #BOARD_SIZE 
   263 3B6D CA			            dex
   264 3B6E D0 F2		            bne @-
   265 3B70 60			@           rts
   266
   267
   268 3B71			hideGuide   ; ******* clear line selection guide           
   269 3B71 A5 8A		            lda cursorYprev
   270 3B73 A8			            tay
   271 3B74 A5 14 C5 14 F0 FC	            lda:cmp:req 20          ; wait 4 VSYNC
   272 				                                    ; clear guide
   273
   274 3B7A A2 14		            ldx #20
   275 3B7C A9 00 99 00 72	@           mva #0 pmg+$200,y
   276 3B81 A9 00 99 00 73	            mva #0 pmg+$300,y
   277 3B86 A9 00 99 80 72	            mva #0 pmg+$280,y
   278 3B8B A9 00 99 80 73	            mva #0 pmg+$380,y
   279 3B90 C8			            iny            
   280 3B91 CA			            dex
   281 3B92 D0 E8		            bne @-
   282 3B94 60			            rts
   283 				            
   284 3B95			showGuide   ; ******* draw line selection guide   
   285
   286 3B95 AC E6 2D		            ldy fline_sel 
   287 3B98 B9 EB 28 85 95	            mva fline_sx,y sx
   288 3B9D B9 EA 29 85 96	            mva fline_sy,y sy
   289 3BA2 B9 E9 2A 85 99	            mva fline_dir,y line_bit
   290 				            
   291 3BA7 A5 95		            lda sx
   292 3BA9 18 2A 2A		            clc:rol:rol
   293 3BAC 18 69 34		            add #CURSOR_OFFSET_X
   294 3BAF 85 93		            sta cx
   295 				            
   296 3BB1 A5 96		            lda sy       
   297 3BB3 18 2A 2A		            clc:rol:rol
   298 3BB6 18 69 14		            add #CURSOR_OFFSET_Y
   299 3BB9 85 94		            sta cy
   300 3BBB 85 8A		            sta cursorYprev
   301 3BBD A8			            tay
   302 				            
   303 3BBE A9 02		not1        lda #2
   304 3BC0 C5 99		            cmp line_bit
   305 3BC2 D0 2E		            bne not2        
   306 				                                    ; bit 2 - horizontal guide
   307
   308 3BC4 A5 93		            lda cx                  ; x pos
   309 3BC6 8D 00 D0		            sta hposp0              
   310 3BC9 18 69 01		            add #1
   311 3BCC 8D 01 D0		            sta hposp1
   312 3BCF 18 69 07		            add #7
   313 3BD2 8D 02 D0		            sta hposp2
   314 3BD5 18 69 01		            add #1
   315 3BD8 8D 03 D0		            sta hposp3
   316
   317 3BDB A9 FF 99 00 72	            mva #$FF pmg+$200,y     ; y pos
   318 3BE0 A9 FF 99 00 73	            mva #$FF pmg+$300,y
   319 3BE5 A9 FF 99 80 72	            mva #$FF pmg+$280,y
   320 3BEA A9 FF 99 80 73	            mva #$FF pmg+$380,y
   321 				            
   322 3BEF 4C A6 3C		            jmp not16                        
   323 				            
   324 3BF2			not2        
   325 3BF2 A9 04		            lda #4
   326 3BF4 C5 99		            cmp line_bit
   327 3BF6 D0 3A		            bne not4        
   328 				                                    ; bit 4 - diagonal guide
   329
   330 3BF8 A5 93		            lda cx                  ; x pos
   331 3BFA 8D 00 D0		            sta hposp0              
   332 3BFD 18 69 01		            add #1
   333 3C00 8D 01 D0		            sta hposp1
   334 3C03 18 69 07		            add #7
   335 3C06 8D 02 D0		            sta hposp2
   336 3C09 18 69 01		            add #1
   337 3C0C 8D 03 D0		            sta hposp3
   338
   339 3C0F A2 08		            ldx #8
   340 3C11 A9 80 85 99		            mva #%10000000 line_bit
   341 3C15 A5 99 99 00 72	@           mva line_bit pmg+$200,y     ; y pos
   342 3C1A A5 99 99 08 73	            mva line_bit pmg+$308,y     
   343 3C1F C8			            iny            
   344 3C20 A5 99 99 80 72	            mva line_bit pmg+$280,y
   345 3C25 A5 99 99 88 73	            mva line_bit pmg+$388,y
   346 3C2A 46 99		            lsr line_bit
   347 3C2C CA			            dex 
   348 3C2D D0 E6		            bne @-
   349 				            
   350 3C2F 4C A6 3C		            jmp not16                        
   351 				                    
   352 				            
   353 3C32			not4        
   354 3C32 A9 08		            lda #8
   355 3C34 C5 99		            cmp line_bit
   356 3C36 D0 2B		            bne not8        
   357 				                                    ; bit 8 - vertical guide
   358
   359 3C38 A5 93		            lda cx                  ; x pos
   360 3C3A 8D 00 D0		            sta hposp0              
   361 3C3D 8D 01 D0		            sta hposp1
   362 				            ;add #8
   363 3C40 8D 02 D0		            sta hposp2
   364 3C43 8D 03 D0		            sta hposp3
   365
   366 3C46 A2 10		            ldx #16
   367 3C48 A9 80 99 00 72	@           mva #$80 pmg+$200,y     ; y pos
   368 3C4D A9 80 99 00 73	            mva #$80 pmg+$300,y
   369 3C52 C8			            iny
   370 3C53 A9 80 99 80 72	            mva #$80 pmg+$280,y
   371 3C58 A9 80 99 80 73	            mva #$80 pmg+$380,y
   372 3C5D CA			            dex
   373 3C5E D0 E8		            bne @-
   374 				            
   375 3C60 4C A6 3C		            jmp not16                        
   376 				             
   377
   378 3C63			not8        
   379 3C63 A9 10		            lda #16
   380 3C65 C5 99		            cmp line_bit
   381 3C67 D0 3D		            bne not16        
   382
   383 				                                    ; bit 16 - diagonal guide /
   384
   385 3C69 A5 93		            lda cx                  ; x pos
   386 3C6B 38 E9 07		            sub #7
   387 3C6E 8D 00 D0		            sta hposp0              
   388 3C71 38 E9 01		            sub #1
   389 3C74 8D 01 D0		            sta hposp1
   390 3C77 38 E9 07		            sub #7
   391 3C7A 8D 02 D0		            sta hposp2
   392 3C7D 38 E9 01		            sub #1
   393 3C80 8D 03 D0		            sta hposp3
   394
   395 3C83 A2 08		            ldx #8
   396 3C85 A9 01 85 99		            mva #%00000001 line_bit
   397 				            ;iny
   398 3C89 A5 99 99 00 72	@           mva line_bit pmg+$200,y     ; y pos
   399 3C8E A5 99 99 08 73	            mva line_bit pmg+$308,y     
   400 3C93 C8			            iny            
   401 3C94 A5 99 99 80 72	            mva line_bit pmg+$280,y
   402 3C99 A5 99 99 88 73	            mva line_bit pmg+$388,y
   403 3C9E 06 99		            asl line_bit
   404 3CA0 CA			            dex 
   405 3CA1 D0 E6		            bne @-
   406 				            
   407 3CA3 4C A6 3C		            jmp not16                        
   408
   409 3CA6 A5 14 C5 14 F0 FC	not16       lda:cmp:req 20      ; wait 4 VSYNC
   410 3CAC 60			            rts
   411
   412
   413 3CAD			updateTitleTop5
   414 3CAD A9 4C 85 82 A9 5D +             mwa #topscore1+24 dest
   415 3CB5 A2 00		            ldx #0
   416
   417 3CB7 BD D1 2E 85 80 BD + updateLine  mwa top5,x src
   418 				            
   419 3CC1 A0 00		            ldy #0
   420 3CC3 A5 81		            lda src+1
   421 3CC5 18			            clc
   422 3CC6 4A 4A 4A 4A		            :4 lsr
   423 3CCA 18 69 10		            add #16
   424 3CCD 91 82		            sta (dest),y
   425 3CCF C8			            iny
   426
   427 3CD0 A5 81		            lda src+1
   428 3CD2 29 0F		            and #15                       
   429 3CD4 18 69 10		            add #16
   430 3CD7 91 82		            sta (dest),y
   431 3CD9 C8			            iny
   432
   433 3CDA A5 80		            lda src
   434 3CDC 18			            clc
   435 3CDD 4A 4A 4A 4A		            :4 lsr
   436 3CE1 18 69 10		            add #16
   437 3CE4 91 82		            sta (dest),y
   438 3CE6 C8			            iny
   439
   440 3CE7 A5 80		            lda src
   441 3CE9 29 0F		            and #15                       
   442 3CEB 18 69 10		            add #16
   443 3CEE 91 82		            sta (dest),y
   444
   445 3CF0 E8 E8		            inx:inx
   446 3CF2 E0 0A		            cpx #10
   447 3CF4 F0 0E		            beq @+            
   448 3CF6 18 A5 82 69 28 85 +             adw dest #40
   449 3D01 4C B7 3C		            jmp updateLine                        
   450 				@
   451 3D04 60			            rts
   452
   453 3D05			updateScore ; *********************************** 
   454 3D05 A9 71 85 82 A9 60 +             mwa #vram_game+113 dest
   455 3D0D AD E7 2D		            lda score
   456 3D10 20 88 42		            jsr printNum
   457
   458 3D13 AD E5 23		            lda game_mode       
   459 3D16 C9 00		            cmp #MODE_ARCADE
   460 3D18 D0 5A		            bne skip_arcade 
   461
   462 3D1A A9 7A 85 82 A9 62 +             mwa #vram_game+634 dest
   463 3D22 A0 00		            ldy #0
   464 3D24 A2 00		            ldx #0
   465 				            
   466 3D26 AD EA 2D		            lda arcadescore+1
   467 3D29 18			            clc
   468 3D2A 4A 4A 4A 4A		            :4 lsr
   469 3D2E F0 08		            beq @+
   470 3D30 A2 01		px000       ldx #1
   471 3D32 18 69 10		            add #16
   472 3D35 91 82		            sta (dest),y
   473 3D37 C8			            iny
   474
   475 3D38 AD EA 2D		@           lda arcadescore+1
   476 3D3B 29 0F		            and #15
   477 3D3D D0 07		            bne p0x00
   478 3D3F E0 01		            cpx #1
   479 3D41 F0 03		            beq p0x00
   480 3D43 4C 4E 3D		            jmp @+
   481 3D46 A2 01		p0x00       ldx #1
   482 3D48 18 69 10		            add #16
   483 3D4B 91 82		            sta (dest),y
   484 3D4D C8			            iny
   485
   486 3D4E AD E9 2D		@           lda arcadescore
   487 3D51 18			            clc
   488 3D52 4A 4A 4A 4A		            :4 lsr
   489 3D56 D0 07		            bne p00x0
   490 3D58 E0 01		            cpx #1
   491 3D5A F0 03		            beq p00x0
   492 3D5C 4C 65 3D		            jmp @+
   493 3D5F 18 69 10		p00x0       add #16
   494 3D62 91 82		            sta (dest),y
   495 3D64 C8			            iny
   496
   497 3D65 AD E9 2D		@           lda arcadescore
   498 3D68 29 0F		            and #15                       
   499 3D6A 18 69 10		            add #16
   500 3D6D 91 82		            sta (dest),y
   501 3D6F C8			            iny
   502 3D70 A9 00		            lda #0
   503 3D72 91 82		            sta (dest),y                        
   504
   505 3D74			skip_arcade            
   506 3D74 60			            rts 
   507
   508 3D75			updateHiScore ; *********************************** 
   509 3D75 A9 DC 85 82 A9 01 +             mwa #476 dest
   510 3D7D 18 A5 82 69 00 85 +             adw dest #vram_game dest
   511 3D8A AC E4 23		            ldy level
   512 3D8D B1 A9		            lda (hiscores), y
   513 3D8F 20 88 42		            jsr printNum
   514 3D92 60			            rts 
   515
   516 3D93			updateMoves ; ***********************************
   517 3D93 A9 C1 85 82 A9 00 +             mwa #193 dest
   518 3D9B 18 A5 82 69 00 85 +             adw dest #vram_game dest
   519 3DA8 AD E8 2D		            lda moves
   520 3DAB 20 88 42		            jsr printNum
   521 3DAE 60			            rts 
   522
   523 3DAF			showLevelT  ; ************************************            
   524 				            
   525 3DAF A9 60 85 82 A9 0A +             mwa #[56*40+10*40+16] dest
   526 3DB7 18 A5 82 69 00 85 +             adw dest #vram_title dest
   527 3DC4 AD E4 23		            lda level
   528 3DC7 18 69 01		            add #1
   529 3DCA 20 88 42		            jsr printNum
   530 3DCD 60			            rts 
   531
   532 3DCE			showHiscoreT ; ************************************            
   533 				            
   534 3DCE A2 00		            ldx #0
   535 3DD0 BD 3E 6C		@           lda hiscore_label,x
   536 3DD3 9D BB 5A		            sta vram_title+(56*40+12*40+27),x
   537 3DD6 E8			            inx
   538 3DD7 E0 0F		            cpx #15
   539 3DD9 D0 F5		            bne @-
   540 				            
   541 3DDB A9 C4 85 82 A9 0A +             mwa #[56*40+12*40+36] dest
   542 3DE3 18 A5 82 69 00 85 +             adw dest #vram_title dest
   543 3DF0 AC E4 23		            ldy level
   544 3DF3 B1 A9		            lda (hiscores),y
   545 3DF5 20 88 42		            jsr printNum
   546
   547 3DF8 AD E4 23		            lda level          
   548 3DFB 0A A8		            asl:tay
   549 3DFD B9 32 7E 85 80 B9 +             mwa lvlptrs,y src
   550 3E07 38			            sec          
   551 3E08 38 A5 80 E9 10 85 +             sbw src #16
   552 3E13 A9 A8 85 82 A9 5A +             mwa #vram_title+(56*40+12*40+8) dest
   553 				            
   554 3E1B A0 0C		            ldy #12
   555 3E1D B1 80		@           lda (src),y
   556 3E1F 91 82		            sta (dest),y
   557 3E21 88			            dey
   558 3E22 10 F9		            bpl @-
   559
   560 3E24 60			            rts                       
   561
   562
   563
   564 3E25			showLevelG  ; ************************************            
   565 				            
   566 3E25 A9 19 85 82 A9 03 +             mwa #793 dest
   567 3E2D 18 A5 82 69 00 85 +             adw dest #vram_game dest
   568 3E3A AD E4 23		            lda level
   569 3E3D 18 69 01		            add #1
   570 3E40 20 88 42		            jsr printNum
   571 3E43 60			            rts 
   572
   573 				            
   574 3E44			showMode   ; ************************************            
   575 				            
   576 3E44 A9 00 85 80 85 81	            mwa #0 src          
   577 3E4A AD E5 23		            lda game_mode       
   578 3E4D C9 00		            cmp #MODE_ARCADE
   579 3E4F D0 03		            sne 
   580 3E51 8D E4 23		            sta level
   581 3E54 18 2A 2A 2A		            clc:rol:rol:rol ; multiply * 8 
   582 3E58 85 80		            sta src
   583 3E5A 18 A5 80 69 EF 85 +             adw src #modenames src
   584 3E67 A9 00 85 82 A9 50 +             mwa #vram_title dest
   585 3E6F 18 A5 82 69 0F 85 +             adw dest #[56*40+8*40+15] dest
   586 3E7C A0 07		            ldy #7
   587 3E7E B1 80		@           lda (src),y
   588 3E80 91 82		            sta (dest),y
   589 3E82 88			            dey
   590 3E83 10 F9		            bpl @- 
   591 3E85 60			            rts             
   592 				            
   593 3E86 A5 12 85 A1		zeroTimer    mva rtclock zero_time
   594 3E8A A5 13 85 A2		            mva rtclock+1 zero_time+1
   595 3E8E A5 14 85 A3		            mva rtclock+2 zero_time+2
   596 3E92 60			            rts
   597
   598 3E93 AD E5 23		updateTimer lda game_mode
   599 3E96 C9 00		            cmp #MODE_ARCADE
   600 3E98 D0 2F		            bne @+
   601 3E9A 38			            sec
   602 3E9B A5 14		            lda rtclock+2 
   603 3E9D E5 A3		            sbc zero_time+2
   604 3E9F C9 32		            cmp #50
   605 3EA1 30 26		            bmi @+
   606 3EA3 A5 14 85 A3		            mva rtclock+2 zero_time+2
   607 3EA7 18			            clc
   608 3EA8 C6 A4		            dec timer
   609 3EAA 30 1D		            bmi @+
   610 3EAC A9 11 85 82 A9 01 + showTimer   mwa #273 dest
   611 3EB4 18 A5 82 69 00 85 +             adw dest #vram_game dest
   612 3EC1 A5 A4		            lda timer
   613 3EC3 20 88 42		            jsr printNum
   614 3EC6 20 EE 3E		            jsr updateTimebar
   615 3EC9 60			@           rts
   616
   617 = 000F			TIMEBAR_TOP_OFFSET = 15
   618 = 0060			TIMEBAR_HEIGHT = 96
   619
   620 3ECA			showTimebar 
   621 3ECA A9 91 8D 04 D0	            mva #145 hposm0
   622 3ECF A9 CD 8D 05 D0	            mva #205 hposm1
   623 3ED4 A9 00 85 A6		            mva #0 timerbarlast
   624 3ED8 A0 10		            ldy #16
   625 3EDA 98			@           tya
   626 3EDB 29 01		            and #1
   627 3EDD F0 06		            beq @+
   628 3EDF 38 2A 38 2A 38 2A	            :3 sec:rol
   629 3EE5 99 80 71		@           sta  pmg+$180,y 
   630 3EE8 C8			            iny
   631 3EE9 C0 70		            cpy #112
   632 3EEB D0 ED		            bne @-1
   633 3EED 60			            rts
   634
   635 3EEE			updateTimebar
   636 3EEE A5 A5		            lda basetimer ; timer * 96
   637 3EF0 38			            sec
   638 3EF1 E5 A4		            sbc timer
   639 3EF3 85 95		            sta sx
   640 3EF5 A9 00		            lda #$00
   641 3EF7 A2 08		            ldx #$08
   642 3EF9 18			            clc
   643 3EFA 90 03		m0          bcc m1
   644 3EFC 18			            clc
   645 3EFD 69 60		            adc #96
   646 3EFF 6A			m1          ror
   647 3F00 66 95		            ror sx
   648 3F02 CA			            dex
   649 3F03 10 F5		            bpl m0
   650 3F05 A6 95		            ldx sx            
   651 				            
   652 3F07 A2 08		            LDX #8      ; and then divided by 120
   653 3F09 06 95		            ASL sx
   654 3F0B 2A			L1          ROL
   655 3F0C B0 04		            BCS L2
   656 3F0E C5 A5		            CMP basetimer
   657 3F10 90 03		            BCC L3
   658 3F12 E5 A5		L2          SBC basetimer
   659 3F14 38			            SEC
   660 3F15 26 95		L3          ROL sx
   661 3F17 CA			            DEX
   662 3F18 D0 F1		            BNE L1
   663
   664 3F1A A5 95		            lda sx      ; 15 top offset added
   665 3F1C 18			            clc
   666 3F1D 69 10		            adc #TIMEBAR_TOP_OFFSET+1
   667 3F1F A4 A6		            ldy timerbarlast
   668 3F21 85 A6		            sta timerbarlast
   669 3F23 A9 00		            lda #0
   670 3F25 99 80 71		@           sta pmg+$180,y
   671 3F28 C8			            iny
   672 3F29 C4 A6		            cpy timerbarlast
   673 3F2B 30 F8		            bmi @-
   674
   675 3F2D 60			            rts
   676
   677
   678 3F2E A9 61 85 82 A9 01 + showGoal    mwa #353 dest
   679 3F36 18 A5 82 69 00 85 +             adw dest #vram_game dest
   680 3F43 A5 A7		            lda goal
   681 3F45 20 88 42		            jsr printNum
   682
   683 3F48 60			@           rts
   684 				            
   685 				            
   686 3F49			showHint   ;
   687 				            
   688 3F49 AD E8 2B 85 88	            mva fline_cx cursorX
   689 3F4E AD E7 2C 85 89	            mva fline_cy cursorY
   690 3F53 20 26 3A		            jsr moveCursor
   691 				            
   692 				            
   693 3F56 A9 FF 8D FC 02	endHint     mva #$ff keycode
   694 3F5B 60			            rts                        
   695 				            
   696 				            
   697 3F5C			updateBombs ; ******* updates bombs on puzzle mode screen  
   698 3F5C A9 00 85 82 A9 60 +             mwa #vram_game dest 
   699 3F64 18 A5 82 69 E2 85 +             adw dest #226 src
   700 3F71 18 A5 82 69 32 85 +             adw dest #306 dataw
   701 3F7E 18 A5 82 69 0A 85 +             adw dest #266 dest
   702 				            
   703 3F8B A0 0C		            ldy #12
   704 3F8D B1 80		@           lda (src),y
   705 3F8F 91 82		            sta (dest),y
   706 3F91 91 84		            sta (dataw),y
   707 3F93 88			            dey
   708 3F94 10 F7		            bpl @-
   709 				            
   710 3F96 A5 A8		            lda bombs
   711 3F98 F0 1F		            beq @+
   712 3F9A A0 00		            ldy #0
   713 3F9C 98 18 2A AA		putBomb     tya:clc:rol:tax
   714 3FA0 A9 54 9D 0A 61	            mva #$54 vram_game+266,x 
   715 3FA5 A9 56 9D 0B 61	            mva #$56 vram_game+267,x 
   716 3FAA A9 58 9D 32 61	            mva #$58 vram_game+306,x 
   717 3FAF A9 5A 9D 33 61	            mva #$5a vram_game+307,x
   718 3FB4 C8			            iny
   719 3FB5 C4 A8		            cpy bombs
   720 3FB7 D0 E3		            bne putBomb 
   721 				                
   722 				@
   723 3FB9 60			            rts            
   724 				            
   725 				            
   726 3FBA			updateSearch
   727 3FBA A9 00 85 84 85 85	            mwa #0 dataw
   728 3FC0 A0 00		@           ldy #0 
   729 3FC2 18 A5 84 69 00 85 +             adw dataw #board dest
   730 3FCF B1 82		            lda (dest),y
   731 3FD1 29 7F		            and #%01111111
   732 3FD3 91 82		            sta (dest),y
   733 3FD5 E6 84 D0 02 E6 85	            inw dataw
   734 3FDB A5 85 C9 01 D0 04 +             cpw dataw #BOARD_SIZE*BOARD_SIZE
   735 3FE5 D0 D9		            bne @-
   736 				            
   737 3FE7 A9 00 85 84 85 85	            mwa #0 dataw
   738 3FED A0 00		@           ldy #0 
   739 3FEF 18 A5 84 69 00 85 +             adw dataw #board dest
   740 3FFC B1 82		            lda (dest),y
   741 3FFE 29 01		            and #1
   742 4000 F0 03		            seq 
   743 4002 20 76 37		            jsr add4Search                  ; add neighbours to search lookup table            
   744 4005 E6 84 D0 02 E6 85	            inw dataw
   745 400B A5 85 C9 01 D0 04 +             cpw dataw #BOARD_SIZE*BOARD_SIZE
   746 4015 D0 D6		            bne @-
   747 				                
   748 4017 60			            rts
   749 				            
   750 4018			showPadlock
   751 				 
   752 4018 A5 14 C5 14 F0 FC	            lda:cmp:req 20      ; wait 4 VSYNC
   753 401E A2 00		            ldx #0
   754 4020 BD 84 88 9D 80 74 + @           :4 mva padlock+#*$40,x pmg+$400+LEVEL_PREVIEW_Y+#*$100,x           
   755 				            
   756 4038 E8			            inx
   757 4039 E0 40		            cpx #64
   758 403B D0 E3		            bne @-
   759 403D 20 41 40		            jsr colorPreview
   760 							
   761 4040 60						rts			            
   762 				           
   763 4041			colorPreview
   764 4041 A2 00		            ldx #0
   765 4043 AD E4 23		@           lda level
   766 4046 0A 0A 0A 0A		            asl:asl:asl:asl
   767 404A 1D 35 45		            ora pmg_colors,x
   768 404D 9D C0 02		            sta colpm0,x
   769 4050 E8			            inx 
   770 4051 E0 04		            cpx #4
   771 4053 D0 EE		            bne @-
   772 4055 60			            rts
   773 				            
   774 4056			showPreview
   775
   776 4056 AD E5 23					lda game_mode       ; check PUZZLE MODE
   777 4059 C9 01		            cmp #MODE_PUZZLE
   778 405B D0 0C		            bne @+
   779 405D AD CF 2E					lda unlocked
   780 4060 CD E4 23					cmp level
   781 4063 10 04					bpl @+
   782 4065 20 18 40					jsr showPadlock
   783 4068 60						rts
   784
   785 4069 A5 14 C5 14 F0 FC	@           lda:cmp:req 20      ; wait 4 VSYNC
   786 406F 20 41 40		            jsr colorPreview
   787 4072 A2 40		            ldx #64
   788 4074 A9 00		            lda #0
   789 4076 9D 80 74 9D 80 75 + @           :4 sta pmg+$400+LEVEL_PREVIEW_Y+#*$100,x           
   790 4082 9D 81 74 9D 81 75 +             :4 sta pmg+$401+LEVEL_PREVIEW_Y+#*$100,x
   791 408E CA CA		            :2 dex
   792 4090 10 E4		            bpl @-
   793 				            
   794 4092 AD E4 23		            lda level           ; read layout
   795 4095 0A A8		            asl:tay
   796 4097 B9 32 7E 85 80 B9 +             mwa lvlptrs,y src
   797 40A1 A0 00		            ldy #0
   798 40A3 B1 80 85 84 C8 B1 + @           mwa (src),y dataw 
   799 40AC A9 00 C5 85 D0 04 +             cpw #0 dataw
   800 40B6 D0 03		            sne
   801 40B8 4C 31 41		            jmp setgridpos
   802 40BB 38			            sec
   803 40BC 38 A5 84 E9 42 85 +             sbw dataw #(BOARD_SIZE*3)
   804 40C7 A2 00		            ldx #0
   805 40C9 E8			mod         inx
   806 40CA 38			            sec
   807 				            ;sbw dataw #BOARD_SIZE
   808 40CB A5 84		            lda dataw
   809 40CD E9 16		            sbc #BOARD_SIZE
   810 40CF 85 84		            sta dataw
   811 40D1 B0 F6		            bcs mod
   812 40D3 A5 85		            lda dataw+1
   813 40D5 F0 05		            beq done
   814 40D7 C6 85		            dec dataw+1
   815 40D9 4C C9 40		            jmp mod
   816 40DC			done                     
   817 40DC A5 84		            lda dataw
   818 40DE 69 16		            adc #BOARD_SIZE
   819 40E0 CA			            dex
   820 40E1 86 96		            stx sy
   821 40E3 38			            sec
   822 40E4 E9 03		            sbc #3
   823 40E6 85 95		            sta sx
   824 40E8 29 03		            and #3
   825 40EA 85 93		            sta cx
   826 40EC A9 80 85 82 A9 74 +             mwa #pmg+$400+LEVEL_PREVIEW_Y dest
   827 40F4 46 95		            lsr sx
   828 40F6 46 95		            lsr sx
   829 40F8 F0 11		            beq @+
   830 40FA 18 A5 82 69 00 85 + plrsel      adw dest #$100 dest
   831 4107 C6 95		            dec sx
   832 4109 D0 EF		            bne plrsel 
   833 				@                     
   834 410B 98			            tya
   835 410C AA			            tax              
   836 410D A5 96		            lda sy
   837 410F 0A 0A		            asl:asl
   838 4111 A8			            tay
   839 4112 A9 80 85 94		            mva #%10000000 cy
   840 4116 A5 93		            lda cx
   841 4118 F0 08		            beq cstore
   842 411A 46 94 46 94		movebit     :2 lsr cy
   843 411E C6 93		            dec cx 
   844 4120 D0 F8		            bne movebit            
   845
   846 4122 B1 82		cstore      lda (dest),y
   847 4124 05 94		            ora cy
   848 4126 91 82		            sta (dest),y
   849 4128 C8			            iny
   850 4129 91 82		            sta (dest),y 
   851 				            
   852 412B 8A			            txa
   853 412C A8			            tay    
   854 				                
   855 412D C8			            iny
   856 412E 4C A3 40		            jmp @-1      
   857
   858 4131			setgridpos            
   859
   860 4131 A9 A2 8D 00 D0	            mva #LEVEL_PREVIEW_X hposp0
   861 4136 A9 AA 8D 01 D0	            mva #LEVEL_PREVIEW_X+8 hposp1
   862 413B A9 B2 8D 02 D0	            mva #LEVEL_PREVIEW_X+16 hposp2
   863 4140 A9 BA 8D 03 D0	            mva #LEVEL_PREVIEW_X+24 hposp3
   864
   865 4145 60			            rts            
  1403
  1404 4146			 icl 'screen.asm'
Source: D:\!Delphi\mads\examples\games\5dots\screen.asm
     1
     2 				;*************************************  SCREEN ROUTINES
     3
     4
     5 4146			scrInitTitle
     6 4146 A9 00 8D 2F 02	            mva #0 sdmctl       ; turn off antic
     7 414B A9 40 8D 0E D4	            mva #$40 nmien
     8 4150 A9 00 8D 30 02 A9 +             mwa #dlist_title sdlstl   ; set Display List
     9 415A A9 00 8D 00 02 A9 +             mwa #dli_title vdslst     ; set Display List interrupt
    10 4164 A9 80 8D F4 02	            mva >charset_title 756    ; set charset
    11 4169 A5 14 C5 14 F0 FC	            lda:cmp:req 20      ; wait 4 VSYNC
    12 416F A9 C0 8D 0E D4	            mva #$c0 nmien
    13 4174 A9 08 8D 04 D4	            mva #8 hscrol
    14 4179 A9 22 8D 2F 02	            mva #34 sdmctl      ; turn on antic
    15 417E A9 10 8D C6 02	            mva #TITLE_BG_COLOR 710          ; set colors
    16 4183 A9 DA 8D C4 02	            mva #SCROLL_COLOR_LIGHT 708
    17 4188 60			            rts
    18
    19
    20 4189			scrInitGame
    21 4189 A9 00 8D 2F 02	            mva #0 sdmctl       ; turn off antic
    22 418E A9 40 8D 0E D4	            mva #$40 nmien
    23 4193 A9 00 8D 30 02 A9 +             mwa #dlist_game sdlstl   ; set Display List
    24 419D A9 00 8D 00 02 A9 +             mwa #dli_game vdslst     ; set Display List interrupt
    25 41A7 A9 80 8D F4 02	            mva >charset_game 756    ; set charset
    26 41AC A5 14 C5 14 F0 FC	            lda:cmp:req 20      ; wait 4 VSYNC
    27 41B2 A9 C0 8D 0E D4	            mva #$c0 nmien
    28 41B7 A9 22 8D 2F 02	            mva #34 sdmctl      ; turn on antic
    29
    30 41BC A9 02 8D C6 02	            mva #GAME_BG_COLOR 710          ; set colors
    31 41C1 A9 0E		            lda #14
    32 41C3 20 38 42		            jsr setGameColors
    33
    34 41C6 60			            rts
    35
    36 41C7			scrInitHelp
    37 41C7 A9 00 8D 2F 02	            mva #0 sdmctl       ; turn off antic
    38 41CC A9 40 8D 0E D4	            mva #$40 nmien
    39 41D1 A9 20 8D 30 02 A9 +             mwa #dlist_help sdlstl   ; set Display List
    40 41DB A9 2F 8D 00 02 A9 +             mwa #dli_help vdslst     ; set Display List interrupt
    41 41E5 A9 80 8D F4 02	            mva >charset_game 756    ; set charset
    42 41EA A5 14 C5 14 F0 FC	            lda:cmp:req 20      ; wait 4 VSYNC
    43 41F0 A9 C0 8D 0E D4	            mva #$c0 nmien
    44 41F5 A9 22 8D 2F 02	            mva #34 sdmctl      ; turn on antic
    45
    46 41FA A9 E2 8D C6 02	            mva #$e2 710          ; set colors
    47 41FF 20 03 42		            jsr setHelpColors
    48
    49 4202 60			            rts
    50
    51
    52 4203			setHelpColors
    53 4203 A2 17		            ldx #23
    54 4205 A9 0C		@           lda #12
    55
    56 4207 E0 03		            cpx #3
    57 4209 30 02		            smi
    58 420B A9 0A		            lda #10
    59
    60 420D E0 06		            cpx #6
    61 420F 30 02		            smi
    62 4211 A9 08		            lda #8
    63
    64 4213 E0 0A		            cpx #10
    65 4215 30 02		            smi
    66 4217 A9 06		            lda #6
    67
    68 4219 E0 0E		            cpx #14
    69 421B 30 02		            smi
    70 421D A9 08		            lda #8
    71
    72 421F E0 11		            cpx #17
    73 4221 30 02		            smi
    74 4223 A9 0A		            lda #10
    75
    76 4225 E0 13		            cpx #19
    77 4227 30 02		            smi
    78 4229 A9 0C		            lda #12
    79
    80 422B E0 15		            cpx #21
    81 422D 30 02		            smi
    82 422F A9 0E		            lda #14
    83 4231 9D 80 6B		            sta game_colors,x
    84 4234 CA			            dex
    85 4235 10 CE		            bpl @-
    86 4237 60			            rts
    87
    88
    89 4238			setGameColors
    90 4238 A2 17		            ldx #23
    91 423A 9D 80 6B		@           sta game_colors,x
    92 423D CA			            dex
    93 423E 10 FA		            bpl @-
    94 4240 60			            rts
    95
    96 4241			outdec8s    ; ****** outputs 8bit decimal number without leading zeroes
    97 				            ; ****** stolen and adapted from:
    98 				            ; ****** http://6502org.wikidot.com/software-output-decimal
    99 4241 A2 01		            ldx #1
   100 4243 8E 7C 42		            stx c
   101 4246 E8			            inx
   102 4247 A0 40		            ldy #$40
   103 4249 8C 7B 42		o1          sty b
   104 424C 4A			            lsr
   105 424D 2A			o2          rol
   106 424E B0 05		            bcs o3
   107 4250 DD 78 42		            cmp a,x
   108 4253 90 04		            bcc o4
   109 4255 FD 78 42		o3          sbc a,x
   110 4258 38			            sec
   111 4259 2E 7B 42		o4          rol b
   112 425C 90 EF		            bcc o2
   113 425E A8			            tay
   114 425F EC 7C 42		            cpx c
   115 4262 AD 7B 42		            lda b
   116 4265 90 05		            bcc o5
   117 4267 F0 08		            beq o6
   118 4269 8E 7C 42		            stx c
   119
   120 426C 09 10		o5          ora #$10
   121 426E 20 7D 42		            jsr output
   122 4271 98			o6          tya
   123 4272 A0 10		            ldy #$10
   124 4274 CA			            dex
   125 4275 10 D2		            bpl o1
   126 4277 60			            rts
   127
   128 4278 80 A0 C8		a dta  128,160,200
   129 = 427B			b .ds  1
   130 = 427C			c .ds  1
   131
   132 427D-4295> 84 94		output      sty cy
   133 427F A4 9A		            ldy pos_offset
   134 4281 91 82		            sta (dest),y
   135 4283 E6 9A		            inc pos_offset
   136 4285 A4 94		            ldy cy
   137 4287 60			            rts
   138
   139 4288			printNum    ; *** prints 8bit numer from accumulator to position at dest
   140 4288 A0 00 84 9A		            mvy #0 pos_offset
   141 428C 20 41 42		            jsr outdec8s
   142 428F A4 9A		            ldy pos_offset
   143 4291 A9 00		            lda #0
   144 4293 91 82		            sta (dest),y
   145 4295 60			            rts
   146
   147
   148
   149
   150
   151 				;*************************************  DISPLAY LISTS INTERRUPTS
   152
   153 4296			.align $100
   154 4300-4342> 48 8A 48	dli_game    pha:txa:pha
   155
   156
   157 4303 A6 AB		            ldx hline
   158 4305 BD 80 6B		            lda game_colors,x
   159 4308 8D 17 D0		            sta colpf1
   160 430B BD 98 6B		            lda timebar_colors,x
   161 430E 8D 19 D0		            sta $D019
   162 4311 E6 AB		            inc hline
   163 4313 E4 AC		            cpx splitpmg
   164 4315 D0 14		            bne @+
   165
   166
   167
   168 4317 A5 AE 8D 12 D0	            mva LOW_COLOR_0 colpm0r     ; set PMG colors
   169 431C A5 AF 8D 13 D0	            mva LOW_COLOR_1 colpm1r     ; set PMG colors
   170 4321 A5 B0 8D 14 D0	            mva LOW_COLOR_2 colpm2r     ; set PMG colors
   171 4326 A5 B1 8D 15 D0	            mva LOW_COLOR_3 colpm3r     ; set PMG colors
   172
   173 432B 68 AA 68		@           pla:tax:pla
   174 432E 40			            rti
   175
   176 432F 48 8A 48		dli_help    pha:txa:pha
   177
   178 4332 A6 AB		            ldx hline
   179 4334 BD 80 6B		            lda game_colors,x
   180 4337 8D 0A D4		            sta wsync
   181 433A 8D 17 D0		            sta colpf1
   182 433D E6 AB		            inc hline
   183
   184 433F 68 AA 68		            pla:tax:pla
   185 4342 40			            rti
   186
   187 4343			.align $100
   188 4400			dli_title
   189 4400-4534> 48 8A 48	            pha:txa:pha
   190 4403 A6 AB		            ldx hline
   191 4405 E6 AB		            inc hline
   192 4407 BD C8 6B		            lda title_colors,x
   193 440A 8D 0A D4		            sta wsync
   194 440D 8D 17 D0		            sta colpf1
   195
   196 4410 E0 47		            cpx #71
   197 4412 D0 05		            bne @+
   198 4414 A9 84 8D 09 D4	            mva >charset_scroll $D409    ; set scroll charset
   199 				@
   200 4419 68 AA 68		            pla:tax:pla
   201 441C 40			            rti
   202
   203 				;*************************************  PLAYER MISSLE GRAPHICS
   204
   205 441D			initPMG     ; ****** Initializes Playes/Missle graphics
   206 441D A9 2A 8D 2F 02	            mva #@dmactl(standard|dma|players|lineX2) sdmctl
   207 4422 A9 70 8D 07 D4	            mva >pmg pmbase     ; missiles and players data address
   208 4427 A0 00		            ldy #0              ; clearing pmg memory
   209 4429 A9 00		            lda #0
   210 442B 99 00 72 99 80 72 + clrPMG      :4 sta  pmg+$200+#*$80,y
   211 4437 C8			            iny
   212 4438 10 F1		            bpl clrPMG
   213
   214 443A A9 11 8D 6F 02	            mva #17 gprior       ; set priority
   215 443F A9 03 8D 1D D0	            mva #3 pmcntl       ; enable players and missles only
   216
   217 4444 A9 00 8D 0C D0	            mva #0 sizem        ; clear PMG initial params
   218
   219 4449 8D 08 D0 8D 09 D0 +             :4 sta sizep:1
   220 4455 8D 00 D0 8D 01 D0 +             :4 sta hposp:1
   221 4461 8D C0 02 8D C1 02 +             :4 sta colpm:1
   222 446D 8D 04 D0 8D 05 D0 +             :4 sta hposm:1
   223
   224 4479 A9 8B 8D C0 02	            mva #CURSOR_COLOR_LIGHT colpm0     ; set PMG colors
   225 447E 8D C2 02		            sta colpm2
   226 4481 A9 86 8D C1 02	            mva #CURSOR_COLOR_DARK colpm1
   227 4486 8D C3 02		            sta colpm3
   228
   229
   230 4489 60			            rts
   231
   232 448A			initPMG_title  ; ****** Initializes Playes/Missle graphics
   233 448A A9 3E 8D 2F 02	            mva #@dmactl(standard|dma|players|missiles|lineX1) sdmctl
   234 448F A9 70 8D 07 D4	            mva >pmg pmbase     ; missiles and players data address
   235 4494 A0 00		            ldy #0              ; clearing pmg memory
   236 4496 A9 00		            lda #0
   237 4498			clrPMGt
   238 4498 99 00 73 99 00 74 +             :5 sta pmg+$300+#*$100,y
   239 44A7 C8			            iny
   240 44A8 D0 EE		            bne clrPMGt
   241
   242 44AA A0 28		            ldy #40
   243 44AC 98			vline1      tya
   244 44AD 38			            sec
   245 44AE E9 05		            sbc #5
   246 44B0 29 06		            and #6
   247 44B2 C9 06		            cmp #6
   248 44B4 F0 08		            beq @+
   249 44B6 A9 00		            lda #%00000000
   250 44B8 99 00 73		            sta pmg+$300,y
   251 44BB 4C C3 44		            jmp @+1
   252 44BE A9 A0		@           lda #%10100000
   253 44C0 99 00 73		            sta pmg+$300,y
   254 				@
   255 44C3 C8			            iny
   256 44C4 C0 C8		            cpy #200
   257 44C6 D0 E4		            bne vline1
   258
   259
   260 44C8 A9 03 8D 1D D0	            mva #3 pmcntl       ; enable players and missles
   261
   262 44CD A9 00 8D 0C D0	            mva #0 sizem        ; clear PMG initial params
   263
   264 44D2 8D 08 D0 8D 09 D0 +             :4 sta sizep:1
   265 44DE 8D 00 D0 8D 01 D0 +             :4 sta hposp:1
   266 44EA 8D 04 D0 8D 05 D0 +             :4 sta hposm:1
   267 44F6 8D C0 02 8D C1 02 +             :4 sta colpm:1
   268
   269 4502 A9 04 8D 35 45	            mva #$04 pmg_colors     ; set PMG colors
   270 4507 A9 08 8D 36 45	            mva #$08 pmg_colors+1     ; set PMG colors
   271 450C A9 0C 8D 37 45	            mva #$0c pmg_colors+2     ; set PMG colors
   272 4511 A9 0F 8D 38 45	            mva #$0f pmg_colors+3     ; set PMG colors
   273 4516 A9 1F 8D C7 02	            mva #$1f 711     ; set PMG colors
   274
   275 451B A9 31 8D 04 D0	            mva #49 hposm0
   276 4520 A9 CE 8D 05 D0	            mva #206 hposm1
   277 4525 A9 31 8D 06 D0	            mva #49 hposm2
   278 452A A9 CE 8D 07 D0	            mva #206 hposm3
   279
   280 452F A9 11 8D 6F 02	            mva #17 gprior       ; set priority
   281
   282 4534 60			            rts
   283 = 4535			pmg_colors  .ds 4
   284
   285
   286 4539			showOver    ; ****** Animated GAME OVER screen
   287
   288 4539-475E> A0 26					ldy	#$26						;Y = 2,4,..,16	instrument number * 2 (0,2,4,..,126)
   289 453B A2 03					ldx #3						;X = 3			channel (0..3 or 0..7 for stereo module)
   290 453D A9 01					lda #1						;A = 12			note (0..60)
   291 453F 20 0F A0					jsr RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
   292
   293 4542 A9 0C 85 AC		            mva #12 splitpmg
   294
   295 4546 A9 16 8D C0 02	            mva #GAMEOVER_COLOR_0 colpm0     ; set PMG colors
   296 454B A9 18 8D C1 02	            mva #GAMEOVER_COLOR_1 colpm1     ; set PMG colors
   297 4550 A9 1A 8D C2 02	            mva #GAMEOVER_COLOR_2 colpm2     ; set PMG colors
   298 4555 A9 1C 8D C3 02	            mva #GAMEOVER_COLOR_3 colpm3     ; set PMG colors
   299 455A A9 EC 85 AE		            mva #GAMEOVER_COLOR_4 LOW_COLOR_0     ; set PMG colors
   300 455E A9 EA 85 AF		            mva #GAMEOVER_COLOR_5 LOW_COLOR_1     ; set PMG colors
   301 4562 A9 E8 85 B0		            mva #GAMEOVER_COLOR_6 LOW_COLOR_2     ; set PMG colors
   302 4566 A9 E6 85 B1		            mva #GAMEOVER_COLOR_7 LOW_COLOR_3     ; set PMG colors
   303
   304 456A A9 4C		            lda #76                  ; x pos
   305 456C 8D 00 D0		            sta hposp0
   306 456F 18 69 0A		            add #10
   307 4572 8D 01 D0		            sta hposp1
   308 4575 18 69 0A		            add #10
   309 4578 8D 02 D0		            sta hposp2
   310 457B 18 69 0A		            add #10
   311 457E 8D 03 D0		            sta hposp3
   312
   313 4581 A9 3F 85 95		            mva #63 sx
   314
   315 4585 A5 14 C5 14 F0 FC	@           lda:cmp:req 20          ; wait 4 VSYNC
   316
   317 458B A5 95 85 93		            mva sx cx
   318 458F A5 95 85 97		            mva sx dx
   319 4593 A2 17		            ldx #23
   320 4595 A5 95		@           lda sx
   321 4597 4A 4A		            lsr:lsr
   322 4599 DD B0 6B		            cmp game_colors_min,x
   323 459C B0 03		            scs
   324 459E BD B0 6B		            lda game_colors_min,x
   325 45A1 9D 80 6B		            sta game_colors,x
   326 45A4 CA			            dex
   327 45A5 D0 EE		            bne @-
   328
   329
   330 45A7 48 8A 48 98 48	            phr
   331 45AC 38			            sec
   332 45AD A9 34		            lda #52
   333 45AF E5 93		            sbc cx
   334 45B1 A8			            tay
   335
   336 45B2 C0 02		            cpy #2
   337 45B4 30 5A		            bmi next_line_l-2
   338 45B6 A9 00 99 FE 71	            mva #0 pmg+$200-2,y     ; y pos
   339 45BB 99 7E 72		            sta pmg+$280-2,y
   340 45BE 99 FE 72		            sta pmg+$300-2,y
   341 45C1 99 7E 73		            sta pmg+$380-2,y
   342 45C4 99 FF 71		            sta pmg+$200-1,y     ; y pos
   343 45C7 99 7F 72		            sta pmg+$280-1,y
   344 45CA 99 FF 72		            sta pmg+$300-1,y
   345 45CD 99 7F 73		            sta pmg+$380-1,y
   346
   347 45D0 18			            clc
   348 45D1 A9 31		            lda #49
   349 45D3 65 97		            adc dx
   350 45D5 A8			            tay
   351 45D6 A9 00 99 1D 72	            mva #0 pmg+$210+13,y     ; y pos
   352 45DB 99 9D 72		            sta pmg+$290+13,y
   353 45DE 99 1D 73		            sta pmg+$310+13,y
   354 45E1 99 9D 73		            sta pmg+$390+13,y
   355 45E4 99 1C 72		            sta pmg+$210+12,y     ; y pos
   356 45E7 99 9C 72		            sta pmg+$290+12,y
   357 45EA 99 1C 73		            sta pmg+$310+12,y
   358 45ED 99 9C 73		            sta pmg+$390+12,y
   359
   360
   361 45F0 A2 00		            ldx #0
   362
   363 45F2			next_line_u
   364 45F2 38			            sec
   365 45F3 A9 34		            lda #52
   366 45F5 E5 93		            sbc cx
   367 45F7 A8			            tay
   368 45F8 30 18		            bmi next_line_l
   369 45FA BD 00 88 99 00 72	            mva GO_G,x pmg+$200,y     ; y pos
   370 4600 BD 18 88 99 80 72	            mva GO_A,x pmg+$280,y
   371 4606 BD 24 88 99 00 73	            mva GO_M,x pmg+$300,y
   372 460C BD 48 88 99 80 73	            mva GO_E,x pmg+$380,y
   373
   374 4612			next_line_l
   375
   376 4612 18			            clc
   377 4613 A9 31		            lda #49
   378 4615 65 97		            adc dx
   379 4617 A8			            tay
   380 4618 C0 6C		            cpy #108
   381 461A 10 18		            bpl next_step
   382 461C BD 60 88 99 10 72	            mva GO_O,x pmg+$210,y     ; y pos
   383 4622 BD 6C 88 99 90 72	            mva GO_V,x pmg+$290,y
   384 4628 BD 48 88 99 10 73	            mva GO_E,x pmg+$310,y
   385 462E BD 78 88 99 90 73	            mva GO_R,x pmg+$390,y
   386
   387 4634 C6 93		next_step   dec cx
   388 4636 E6 97		            inc dx
   389 4638 E8			            inx
   390 4639 E0 0C		            cpx #12
   391 463B D0 B5		            bne next_line_u
   392
   393 463D 68 A8 68 AA 68	            plr
   394 4642 C6 95		            dec sx
   395 4644 C6 95		            dec sx
   396
   397 4646 30 03		            smi
   398 4648 4C 85 45		            jmp @-1
   399
   400 464B 60			            rts
   401
   402 464C			showLvlUp   ; ****** Animated WELL DONE screen
   403
   404 464C A0 28		            ldy	#$28						;Y = 2,4,..,16	instrument number * 2 (0,2,4,..,126)
   405 464E A2 03					ldx #3						;X = 3			channel (0..3 or 0..7 for stereo module)
   406 4650 A9 01					lda #1						;A = 12			note (0..60)
   407 4652 20 0F A0					jsr RASTERMUSICTRACKER+15	;RMT_SFX start tone (It works only if FEAT_SFX is enabled !!!)
   408
   409 4655 A9 0C 85 AC		            mva #12 splitpmg
   410
   411 4659 A9 96 8D C0 02	            mva #WELLDONE_COLOR_0 colpm0     ; set PMG colors
   412 465E A9 98 8D C1 02	            mva #WELLDONE_COLOR_1 colpm1     ; set PMG colors
   413 4663 A9 9A 8D C2 02	            mva #WELLDONE_COLOR_2 colpm2     ; set PMG colors
   414 4668 A9 9C 8D C3 02	            mva #WELLDONE_COLOR_3 colpm3     ; set PMG colors
   415 466D A9 AC 85 AE		            mva #WELLDONE_COLOR_4 LOW_COLOR_0     ; set PMG colors
   416 4671 A9 AA 85 AF		            mva #WELLDONE_COLOR_5 LOW_COLOR_1     ; set PMG colors
   417 4675 A9 A8 85 B0		            mva #WELLDONE_COLOR_6 LOW_COLOR_2     ; set PMG colors
   418 4679 A9 A6 85 B1		            mva #WELLDONE_COLOR_7 LOW_COLOR_3     ; set PMG colors
   419
   420
   421
   422 467D A9 4C		            lda #76                  ; x pos
   423 467F 8D 00 D0		            sta hposp0
   424 4682 18 69 0A		            add #10
   425 4685 8D 01 D0		            sta hposp1
   426 4688 18 69 0A		            add #10
   427 468B 8D 02 D0		            sta hposp2
   428 468E 18 69 0A		            add #10
   429 4691 8D 03 D0		            sta hposp3
   430
   431 4694 A9 3F 85 95		            mva #63 sx
   432
   433 4698 A5 14 C5 14 F0 FC	@           lda:cmp:req 20          ; wait 4 VSYNC
   434
   435 469E A5 95 85 93		            mva sx cx
   436 46A2 A5 95 85 97		            mva sx dx
   437 46A6 A2 17		            ldx #23
   438 46A8 A5 95		@           lda sx
   439 46AA 4A 4A		            lsr:lsr
   440 46AC DD B0 6B		            cmp game_colors_min,x
   441 46AF B0 03		            scs
   442 46B1 BD B0 6B		            lda game_colors_min,x
   443 46B4 9D 80 6B		            sta game_colors,x
   444 46B7 CA			            dex
   445 46B8 D0 EE		            bne @-
   446
   447 46BA 48 8A 48 98 48	            phr
   448 46BF 38			            sec
   449 46C0 A9 34		            lda #52
   450 46C2 E5 93		            sbc cx
   451 46C4 A8			            tay
   452
   453 46C5 C0 02		            cpy #2
   454 46C7 30 5A		            bmi n_line_l-2
   455 46C9 A9 00 99 FE 71	            mva #0 pmg+$200-2,y     ; y pos
   456 46CE 99 7E 72		            sta pmg+$280-2,y
   457 46D1 99 FE 72		            sta pmg+$300-2,y
   458 46D4 99 7E 73		            sta pmg+$380-2,y
   459 46D7 99 FF 71		            sta pmg+$200-1,y     ; y pos
   460 46DA 99 7F 72		            sta pmg+$280-1,y
   461 46DD 99 FF 72		            sta pmg+$300-1,y
   462 46E0 99 7F 73		            sta pmg+$380-1,y
   463
   464 46E3 18			            clc
   465 46E4 A9 31		            lda #49
   466 46E6 65 97		            adc dx
   467 46E8 A8			            tay
   468 46E9 A9 00 99 1D 72	            mva #0 pmg+$210+13,y     ; y pos
   469 46EE 99 9D 72		            sta pmg+$290+13,y
   470 46F1 99 1D 73		            sta pmg+$310+13,y
   471 46F4 99 9D 73		            sta pmg+$390+13,y
   472 46F7 99 1C 72		            sta pmg+$210+12,y     ; y pos
   473 46FA 99 9C 72		            sta pmg+$290+12,y
   474 46FD 99 1C 73		            sta pmg+$310+12,y
   475 4700 99 9C 73		            sta pmg+$390+12,y
   476
   477
   478 4703 A2 00		            ldx #0
   479
   480 4705			n_line_u
   481 4705 38			            sec
   482 4706 A9 34		            lda #52
   483 4708 E5 93		            sbc cx
   484 470A A8			            tay
   485 470B 30 18		            bmi n_line_l
   486 470D BD 30 88 99 00 72	            mva GO_W,x pmg+$200,y     ; y pos
   487 4713 BD 48 88 99 80 72	            mva GO_E,x pmg+$280,y
   488 4719 BD 54 88 99 00 73	            mva GO_L,x pmg+$300,y
   489 471F BD 54 88 99 80 73	            mva GO_L,x pmg+$380,y
   490
   491 4725			n_line_l
   492
   493 4725 18			            clc
   494 4726 A9 31		            lda #49
   495 4728 65 97		            adc dx
   496 472A A8			            tay
   497 472B C0 6C		            cpy #108
   498 472D 10 18		            bpl @+
   499 472F BD 0C 88 99 10 72	            mva GO_D,x pmg+$210,y     ; y pos
   500 4735 BD 60 88 99 90 72	            mva GO_O,x pmg+$290,y
   501 473B BD 3C 88 99 10 73	            mva GO_N,x pmg+$310,y
   502 4741 BD 48 88 99 90 73	            mva GO_E,x pmg+$390,y
   503
   504 4747 C6 93		@           dec cx
   505 4749 E6 97		            inc dx
   506 474B E8			            inx
   507 474C E0 0C		            cpx #12
   508 474E D0 B5		            bne n_line_u
   509
   510 4750 68 A8 68 AA 68	            plr
   511 4755 C6 95		            dec sx
   512 4757 C6 95		            dec sx
   513
   514 4759 30 03		            smi
   515 475B 4C 98 46		            jmp @-2
   516
   517 475E 60			            rts
   518
   519
   520 				;*************************************  DISPLAY LISTS
   521
   522
   523 475F			     .align $100                                ; title screen
   524 4800-4852> 70 70 F0	dlist_title dta b($70),b($70),b($70|128)
   525 4803 C2 00 50		            dta b($42|128),a(vram_title)
   526 4806 82 82 82		:3          dta b($02|128)
   527 4809 8F 8F 8F 8F 8F 8F + :56         dta b($0F|128)
   528 4841 82 82 82 82 82 82 + :11         dta b($02|128)
   529 484C 20			            dta b($20)
   530 484D D6 80 67		scrmem      dta b($06|128|16|$40),a(scroll)
   531 4850 41 00 48		            dta b($41),a(dlist_title)
   532
   533
   534 4853			        .align $100                             ; game screen
   535 4900-6C76> 70 70 F0	dlist_game  dta b($70),b($70),b($70|128)
   536 4903 C2 00 60		            dta b($42|128),a(vram_game)
   537 4906 82 82 82 82 82 82 + :23         dta b($02|128)
   538 491D 41 00 49		            dta b($41),a(dlist_game)
   539
   540
   541 4920 70 70 F0		dlist_help  dta b($70),b($70),b($70|128)
   542 4923 C2 C0 63		            dta b($42|128),a(vram_help)
   543 4926 82 82 82 82 82 82 + :23         dta b($02|128)
   544 493D 41 00 49		            dta b($41),a(dlist_game)
   545
   546
   547 				;*************************************  VIDEO RAM
   548
   549 				; title screen
   550
   551 4940 00 00 00 00 00 00 + .align $1000,0
   552 5000			vram_title
   553 5000 5E			            .by 94
   554 5001 7E 7E 7E 7E 7E 7E + :38         .by 126
   555 5027 5E			            .by 94
   556 5028 00 00 00 00 00 00 +             :1*40 .by 0
   557 5050			.array      t_top[1*40] .byte = 0
   558 				;"  idea_sst^code+msx_bocianu^gfx_kris3d"
   559  [0000] 00 00 00 00 00 + "          AnticShop  presents:        "
   560 				.enda
   561 5078 00 00 00 00 00 00 +             :1*40 .by 0
   562 50A0 00 00 00 00 00 00 +             :3*40 .by 0
   563 5118 00			            .by 0
   564 5119 00 00 00 00 00 00 + logo        ins 'assets/logo.gr8' +0,+0,2119
   565 5960 00 00 00 00 00 00 +             :1*40 .by 0
   566
   567 5988			.array      t_bottom[9*40] .byte = 0
   568  [002B] B3 B4 A1 B2 B4 + [1*40+3] = "START"*,"/","FIRE"*,"_start"
   569  [007B] AF B0 B4 A9 AF + [3*40+3] = "OPTION"*,"_mode:           "
   570  [00CB] B3 A5 AC A5 A3 + [5*40+3] = "SELECT"*,"_level:          "
   571  [011B] 2E 21 2D 25 1A + [7*40+3] = "NAME: "
   572 				.enda
   573 5AF0 5E			            .by 94
   574 5AF1 7F 7F 7F 7F 7F 7F + :38         .by 127
   575 5B17 5E			            .by 94
   576 5B18 00 00 00 00 00 00 +             :20 .by 0
   577 5B2C 00 00 00 00 00 00 +             :400 .by 0
   578
   579
   580 5CBC			titlebar
   581 5CBC			.array      topline1[1*40] .byte = 0
   582  [0000] 00 00 00 00 00 + "          AnticShop  presents:"
   583 				.enda
   584 5CE4			.array      topline2[1*40] .byte = 0
   585  [0000] 00 00 69 64 65 + "  idea_sst^code+msx_bocianu^gfx_kris3d"
   586 				.enda
   587 5D0C			.array      topline3[1*40] .byte = 0
   588  [0000] 00 00 00 00 00 + "        Arcade Mode ^ Top Scores"
   589 				.enda
   590 5D34			.array      topscore1[1*40] .byte = 0
   591  [0000] 00 00 00 00 00 + "            1st Place _"
   592 				.enda
   593 5D5C			.array      topscore2[1*40] .byte = 0
   594  [0000] 00 00 00 00 00 + "            2nd Place _"
   595 				.enda
   596 5D84			.array      topscore3[1*40] .byte = 0
   597  [0000] 00 00 00 00 00 + "            3rd Place _"
   598 				.enda
   599 5DAC			.array      topscore4[1*40] .byte = 0
   600  [0000] 00 00 00 00 00 + "            4th Place _"
   601 				.enda
   602 5DD4			.array      topscore5[1*40] .byte = 0
   603  [0000] 00 00 00 00 00 + "            5th Place _"
   604 				.enda
   605
   606
   607
   608 5DFC 00 00 00 00 00 00 + .align $400,0 ; game screen
   609
   610 6000			.array      vram_game [24*40] .byte = 0
   611  [0000] 42 44 44 44 44 + $42,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$46
   612  [0028] 52 [0050] 52 +   [40]:[80]:[120]:[160]:[200]:[240]:[280]:[320]:[360]:[400]:[440]:[480]:[520]:[560]:[600]:[640]:[680]:[720]:[760]:[800]:[840]:[880] = $52
   613  [003F] 48 [0067] 48 +   [63]:[103]:[143]:[183]:[223]:[263]:[303]:[343]:[383]:[423]:[463]:[503]:[543]:[583]:[623]:[663]:[703]:[743]:[783]:[823]:[863]:[903] = $48
   614  [0398] 4E 4C 4C 4C 4C + [920] = $4E,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4A
   615  [006A] 33 23 2F 32 25 + [106] = "SCORE:"
   616  [00BA] 2D 2F 36 25 33 + [186] = "MOVES:"
   617  [01D2] 28 29 00 33 23 + [466] = "HI SCORE:"
   618  [0312] 2C 25 36 25 2C + [786] = "LEVEL:"
   619 				.enda
   620 63C0			vram_end
   621 				            ; help screen
   622
   623 63C0			.array      vram_help [24*40] .byte = 64
   624  [0000] 42 44 44 44 44 +         $42,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$46
   625  [0028] 52 [0050] 52 +   [40]:[80]:[120]:[160]:[200]:[240]:[280]:[320]:[360]:[400]:[440]:[480]:[520]:[560]:[600]:[640]:[680]:[720]:[760]:[800]:[840]:[880] = $52
   626  [004F] 48 [0077] 48 +   [79]:[119]:[159]:[199]:[239]:[279]:[319]:[359]:[399]:[439]:[479]:[519]:[559]:[599]:[639]:[679]:[719]:[759]:[799]:[839]:[879]:[919] = $48
   627  [0398] 4E 4C 4C 4C 4C + [920] = $4E,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4A
   628
   629  [0029] A7 E1 ED E5 80 + [41] =  "Game rules:"*,"       "
   630  [0049] 76 10 0E 19 16	[73] =  "v",VERSION_H,".",VERSION_Lh,VERSION_Ll
   631  [0051] 00 00 00 00 00 + [81] =  "                        "
   632  [0079] 39 6F 75 72 00 + [121] = "Your goal is to draw       "
   633  [00A1] 61 73 00 6D 61 + [161] = "as many lines as possible.    "
   634  [00C9] 00 00 00 00 00 + [201] = "                                "
   635  [00F1] 34 6F 00 64 72 + [241] = "To draw a line, put fifth dot in a "
   636  [0119] 72 6F 77 00 6F + [281] = "row of four other dots. Like this: "
   637  [0141] 00 00 00 00 00 + [321] = "                                  "
   638  [0165] 41		[357] = 65
   639  [018C] 41 41		[396] = 65,65
   640  [01B3] 41 40 41		[435] = 65,64,65
   641  [01DA] 41		[474] = 65
   642  [0202] 41 41 41		[514] = 65,65,65
   643
   644  [0169] 00 00 00 00 00 + [361] = "                                 "
   645  [016A] 40 40 40 41 41 + [362] = 64,64,64,65,65,65,65,64,64,64
   646  [0191] 39 6F 75 00 6D + [401] = "You may draw horizontal,        "
   647  [01B9] 76 65 72 74 69 + [441] = "vertical and diagonal lines    "
   648  [01E1] 00 00 00 00 00 + [481] = "                              "
   649  [0209] 00 00 00 00 00 + [521] = "                             "
   650  [0231] 29 6E 00 A1 B2 + [561] = "In ","ARCADE"*," mode, your time is limited "
   651  [0259] 61 6E 64 00 69 + [601] = "and illegal moves are punished     "
   652  [0281] 00 00 00 00 00 + [641] = "                                "
   653  [02A9] 29 6E 00 B0 B5 + [681] = "In ","PUZZLE"*," you can beat hiscores  "
   654  [02D1] 00 00 00 00 00 + [721] = "                                   "
   655  [02F9] 29 6E 00 A5 B8 + [761] = "In ","EXPLORE"*," you can try how to play "
   656  [0321] 29 74 00 69 73 + [801] = "It is good starting point      "
   657  [0349] 00 00 00 00 00 + [841] = "                            "
   658  [0364] 70 72 65 73 73 + [868] = "press ","FIRE"*
   659 				.enda
   660
   661
   662 6780			.array  scroll[1024] .byte = 0
   663  [0000] 00 00 00 00 00 + "                         "
   664  [0019] 00 77 65 00 0D + " we - ANTICSHOP - are proud to present you our new game."
   665  [0051] 00 70 72 65 73 + " press HELP to get game rules. if you will find our game"
   666  [0089] 00 66 75 6E 6E + " funny and/or enjoyable, do not hesitiate to write us     "
   667  [00C3] 00 62 6F 63 69 + " bocianu@gmail.com"
   668  [00D5] 00 00 00 00 00 + "           "
   669  [00E0] 00 67 72 65 65 + " greetings and thanks to: "
   670  [00FA] 29 2C 2D 25 2E + "ILMENIT, "
   671  [0103] 29 32 21 34 21 + "IRATA4, "
   672  [010B] 29 32 2F 2E 0C + "IRON, "
   673  [0111] 2A 28 35 33 21 + "JHUSAK, "
   674  [0119] 2B 2F 21 2C 21 + "KOALA, "
   675  [0120] 2C 21 32 25 2B + "LAREK, "
   676  [0127] 2D 21 32 25 2B + "MAREKP, "
   677  [012F] 2D 21 32 2F 2B + "MAROK7, "
   678  [0137] 2D 29 2B 25 32 + "MIKER, "
   679  [013E] 2D 2F 2E 2F 0C + "MONO, "
   680  [0144] 2E 2F 33 34 39 + "NOSTY, "
   681  [014B] 32 2A 11 13 10 + "RJ1307, "
   682  [0153] 30 29 2E 2F 2B + "PINOKIO, "
   683  [015C] 34 24 23 0C 00	"TDC, "
   684  [0161] 38 25 25 2E 0C + "XEEN, "
   685  [0167] 38 38 2C 0C 00	"XXL, "
   686  [016C] 39 25 32 3A 2D + "YERZMYEY, "
   687  [0176] 61 74 61 72 69 + "atarionline.pl  "
   688  [0186] 00 00 00 00 00 + "           "
   689  [0191] 73 70 65 63 69 + "special thanks for our two voluteer testers "
   690  [01BD] 2D 21 32 2F 2B + "MAROK7 and RJ1307"
   691  [01CE] 00 00 00 00 00 + "                 "
   692  [01DF] 00 74 68 61 74 + " that is enough of sweet shit for today, let's play! let's fu&*%ng play!"
   693  [0227] 00 00 00 00 00 + "                                                                         "
   694 				.enda
   695
   696
   697 6B80			.array game_colors[24] .byte = 0
   698 				.enda
   699
   700 6B98			.array timebar_colors[24] .byte = 0
   701  [0000] C6 C6 C6 C6 C6 + $c6,$c6,$c6,$c6,$c6,$c6
   702  [0006] C8 C8 C8 CA CA + $c8,$c8,$c8,$ca,$ca,$ca
   703  [000C] CD CD DD DD ED + $cd,$cd,$dd,$dd,$ed,$ed
   704  [0012] EA EA 18 16 24 + $ea,$ea,$18,$16,$24,$22
   705 				.enda
   706
   707
   708 6BB0			.array game_colors_min[24] .byte = 0
   709  [0000] 0F 0E 0D 0C 0B + 15,14,13,12,11,10,9,8,7,6,5,4,4,5,6,7,8,9,10,11,12,13,14,15
   710 				.enda
   711
   712 6BC8			.array title_colors[90] .byte = 0
   713  [0000] 0F 0F 0F 0F 0F	15,15,15,15,15
   714  [0005] 06 06 06 06 06 + $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
   715  [0011] 0F		$0F
   716  [0012] 08 08 08 08 08 + $08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08,$08
   717  [0020] 0F		$0F
   718  [0021] 0A 0A 0A 0A 0A + $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A
   719  [0030] 0F		$0F
   720  [0031] 0C 0C 0C 0C 0C + $0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C,$0C
   721
   722  [003C] 0A 0A 0A 0A 08 + $0A,$0A,$0A,$0A,$08,$08,$06,$06,$04,$0F,$0f,SCROLL_COLOR_DARK
   723
   724 				.enda
   725
   726 6C22 34 29 2D 25 1A 00 + timer_label dta d'TIME:         '
   727 6C30 27 2F 21 2C 1A 00 + goal_label  dta d'GOAL:         '
   728 6C3E 28 29 00 33 23 2F + hiscore_label  dta d'HI SCORE:      '
   729 6C4D 21 32 23 21 24 25 + arcade_label dta d'ARCADE:       '
   730 6C5B A8			hint_label  dta d'H'*
   731 6C5C 29 2E 34 00 00 00 +             dta d'INT          '
   732 6C69 B5			undo_label  dta d'U'*
   733 6C6A 2E 24 2F 00 00 00 +             dta d'NDO          '
   734
   735
   736 				;*************************************  PMG MEMORY
   737
   738 6C77			            .align $800
   739 = 7000			pmg         .ds 2048
   740
  1405
  1406 7800			 icl 'levels.asm'
Source: D:\!Delphi\mads\examples\games\5dots\levels.asm
     1
     2 				;*************************************  LEVELS
     3
     4 7800-7E52> 23 32 2F 33 +  dta d'CROSS           '
     5 7810			.array level_cross .word 
     6  [0000] 0153 0154 0155 + 339, 340, 341, 342, 141, 142, 143, 144, 163, 166, 185, 188, 204, 205, 206, 207, 210, 211, 212, 213, 226, 235, 248, 257, 270, 271, 272, 273, 276, 277, 278, 279, 295, 298, 317, 320, 0 , 120, 20
     7 				.enda
     8
     9 785E 23 32 2F 33 33 28 +  dta d'CROSSHAIR       '
    10 786E			.array level_crosshair .word 
    11  [0000] 78 79 8D 8E 8F + 120, 121, 141, 142, 143, 144, 162, 164, 165, 167, 183, 186, 187, 190, 204, 213, 225, 226, 227, 228, 233, 234, 235, 236, 247, 248, 249, 250, 255, 256, 257, 258, 270, 279, 293, 296, 297, 300, 316, 318, 319, 321, 339, 340, 341, 342, 362, 363, 0, 120, 20
    12 				.enda
    13
    14 78D4 26 2C 2F 37 25 32 +  dta d'FLOWER          '
    15 78E4			.array level_flower .word 
    16  [0000] 8E 8F A3 A6 B9 + 142, 143, 163, 166, 185, 188, 205, 206, 208, 209, 211, 212, 226, 229, 232, 235, 248, 251, 254, 257, 271, 272, 274, 275, 277, 278, 295, 298, 317, 320, 340, 341, 0, 120, 20
    17 				.enda
    18
    19 792A 24 29 21 2D 2F 2E +  dta d'DIAMOND         '
    20 793A			.array level_diamond .word 
    21  [0000] 8E 8F A3 A4 A6 + 142, 143, 163, 164, 166, 184, 186, 189, 205, 208, 212, 226, 230, 231, 232, 233, 234, 235, 248, 249, 250, 251, 252, 253, 257, 271, 275, 278, 294, 297, 299, 317, 319, 320, 340, 341, 0, 120, 20
    22 				.enda
    23
    24 7988 33 2E 2F 37 26 2C +  dta d'SNOWFLAKE       '
    25 7998			.array level_snowflake .word 
    26  [0000] A1 A5 A9 B8 BB + 161, 165, 169, 184, 187, 190, 207, 208, 209, 210, 211, 229, 230, 231, 232, 233, 249, 250, 251, 252, 254, 255, 256, 257, 273, 274, 275, 276, 277, 295, 296, 297, 298, 299, 316, 319, 322, 337, 341, 345, 0, 120, 20
    27 				.enda 
    28
    29 79EE 36 2F 32 34 25 38 +  dta d'VORTEX          '
    30 79FE			.array level_vortex .word 
    31  [0000] 77 78 79 8F 90 + 119, 120, 121, 143, 144, 167, 183, 184, 185, 189, 204, 207, 208, 210, 211, 214, 225, 226, 230, 231, 232, 236, 247, 251, 252, 253, 257, 258, 269, 272, 273, 275, 276, 279, 294, 298, 299, 300, 316, 339, 340, 362, 363, 364, 0, 120, 20
    32 				.enda 
    33
    34 7A5C 23 35 22 25 24 00 +  dta d'CUBED           '
    35 7A6C			.array level_cubed .word 
    36  [0000] 8E 8F 90 91 92 + 142, 143, 144, 145, 146, 163, 164, 165, 166, 167, 168, 184, 188, 189, 190, 205, 206, 207, 208, 209, 211, 212, 227, 231, 233, 234, 249, 253, 255, 271, 275, 276, 293, 294, 295, 296, 297, 0, 120, 20
    37 				.enda
    38
    39
    40 7ABC 37 29 2E 24 2D 29 +  dta d'WINDMILL        '
    41 7ACC			.array level_windmill .word 
    42  [0000] 7A 7B 7C 8A 90 + 122, 123, 124, 138, 144, 160, 164, 165, 166, 182, 183, 184, 186, 206, 208, 209, 210, 211, 228, 229, 230, 231, 233, 253, 255, 256, 257, 273, 274, 275, 279, 295, 301, 315, 316, 317, 0, 120, 20
    43 				.enda
    44
    45
    46 7B1A 28 2F 35 32 27 2C +  dta d'HOURGLASS       '
    47 7B2A			.array level_hourglass .word 
    48  [0000] 8A 8B 8C 8D 8E + 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 161, 168, 184, 185, 186, 187, 188, 189, 207, 208, 209, 210, 230, 231, 251, 252, 253, 254, 272, 277, 293, 300, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 0, 120, 20
    49 				.enda
    50
    51 7B84 30 2C 21 2E 25 00 +  dta d'PLANE           '
    52 7B94			.array level_plane .word 
    53  [0000] 77 78 79 7A 8E + 119, 120, 121, 122, 142, 143, 163, 166, 185, 188, 204, 205, 206, 207, 210, 211, 212, 213, 225, 230, 231, 236, 247, 252, 253, 258, 270, 271, 272, 273, 276, 277, 278, 279, 295, 298, 317, 320, 338, 343, 360, 361, 362, 363, 364, 365, 0, 120, 20
    54 				.enda
    55
    56 7BF6 2C 29 27 28 34 22 +  dta d'LIGHTBULB       '
    57 7C06			.array level_lightbulb .word 
    58  [0000] 77 78 79 7A 8C + 119, 120, 121, 122, 140, 145, 161, 168, 183, 185, 188, 190, 205, 208, 209, 212, 227, 230, 231, 234, 250, 252, 253, 255, 273, 274, 275, 276, 295, 298, 317, 320, 339, 342, 362, 363, 0, 120, 20
    59 				.enda
    60
    61 7C54 27 25 34 00 24 2F +  dta d'GET DOWN        '
    62 7C64			.array level_getdown .word 
    63  [0000] A3 A4 A5 A6 B9 + 163, 164, 165, 166, 185, 188, 207, 210, 229, 232, 249, 250, 251, 252, 253, 254, 255, 256, 272, 273, 274, 275, 276, 277, 295, 296, 297, 298, 318, 319, 0, 120, 20
    64 				.enda
    65
    66 7CA6 38 0D 2D 21 33 00 +  dta d'X-MAS TREE      '
    67 7CB6			.array level_xmastree .word 
    68  [0000] 8E 8F A3 A4 A5 + 142, 143, 163, 164, 165, 166, 184, 185, 188, 189, 207, 210, 228, 233, 249, 250, 251, 254, 255, 256, 272, 277, 293, 300, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 340, 341, 0, 120, 20
    69 				.enda
    70
    71 7D04 33 30 29 24 25 32 +  dta d'SPIDERWEB       '
    72 7D14			.array level_spiderweb .word 
    73  [0000] 79 8A 8E 8F 93 + 121, 138, 142, 143, 147, 161, 163, 165, 166, 168, 184, 187, 189, 205, 207, 208, 209, 210, 212, 225, 226, 227, 228, 229, 232, 235, 248, 251, 254, 255, 256, 257, 258, 271, 273, 274, 275, 276, 278, 294, 296, 299, 315, 317, 318, 320, 322, 336, 340, 341, 345, 362, 0, 120, 20
    74 				.enda
    75
    76 7D82 34 29 25 00 26 29 +  dta d'TIE FIGHTER     '
    77 7D92			.array level_tiefighter .word 
    78  [0000] B6 BA BB BF CC + 182, 186, 187, 191, 204, 207, 210, 213, 226, 227, 228, 229, 232, 233, 234, 235, 248, 249, 250, 251, 254, 255, 256, 257, 270, 273, 276, 279, 292, 296, 297, 301, 0, 120, 20
    79 				.enda
    80
    81 7DD8 23 2C 35 22 33 00 +  dta d'CLUBS           '
    82 7DE8			.array level_clubs .word 
    83  [0000] 8E 8F A3 A6 B9 + 142, 143, 163, 166, 185, 188, 205, 206, 207, 210, 211, 212, 226, 230, 231, 235, 248, 252, 253, 257, 271, 272, 273, 276, 277, 278, 296, 297, 318, 319, 339, 340, 341, 342, 0, 120, 20
    84 				.enda
    85
    86
    87 7E32			.proc lvlptrs     
    88 				                                    ; old level order - before balance rearangement
    89 7E32 98 79		            dta a(level_snowflake)  ; 5
    90 7E34 94 7B		            dta a(level_plane)      ; 10
    91 7E36 14 7D		            dta a(level_spiderweb)  ; 14
    92 7E38 FE 79		            dta a(level_vortex)     ; 6
    93 7E3A 64 7C		            dta a(level_getdown)    ; 12
    94 7E3C 6C 7A		            dta a(level_cubed)      ; 7
    95 7E3E 92 7D		            dta a(level_tiefighter) ; 15
    96 7E40 6E 78		            dta a(level_crosshair)  ; 2
    97 7E42 E8 7D		            dta a(level_clubs)      ; 16
    98 7E44 CC 7A		            dta a(level_windmill)   ; 8
    99 7E46 B6 7C		            dta a(level_xmastree)   ; 13
   100 7E48 3A 79		            dta a(level_diamond)    ; 4
   101 7E4A E4 78		            dta a(level_flower)     ; 3
   102 7E4C 06 7C		            dta a(level_lightbulb)  ; 11
   103 7E4E 2A 7B		    	    dta a(level_hourglass)  ; 9
   104 7E50 10 78		            dta a(level_cross)      ; 1
   105
   106
   107 				.endp
   108
   109 7E52 10			levelnum    .by (.sizeof lvlptrs)/2                       ; max level num
   110 				    
   111 				           
   112 				; FLATBOX
   113 				; [141, 142, 143, 144, 163, 166, 183, 184, 185, 186, 187, 188, 189, 190, 205, 207, 210, 212, 227, 229, 232, 234, 249, 251, 254, 256, 271, 273, 276, 278, 293, 294, 295, 296, 297, 298, 299, 300, 317, 320, 339, 340, 341, 342]
   114
   115 				; UMBRELLA
   116 				; [118, 119, 120, 121, 122, 123, 138, 139, 142, 143, 146, 147, 159, 163, 166, 170, 180, 184, 189, 193, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 230, 231, 252, 253, 274, 275, 296, 297, 318, 319, 338, 340, 341, 361, 362]
   117 				 
   118 				; ARROW UP
   119 				; [120, 121, 141, 144, 162, 167, 183, 190, 204, 213, 225, 229, 232, 236, 247, 250, 251, 254, 255, 258, 269, 270, 271, 272, 273, 276, 277, 278, 279, 280, 292, 293, 295, 298, 300, 301, 317, 320, 339, 342, 362, 363]
   120
  1407
  1408 7E53			 icl 'fonts.asm'
Source: D:\!Delphi\mads\examples\games\5dots\fonts.asm
     1
     2 				;*************************************  CHARSETS
     3
     4 7E53			            .align $400
     5 8000			charset_title
     6 8000			charset_game 
     7 8000-8C1C> 00 00 00 00 +              ins 'assets/5dots_thin.fnt' +$0,+$0,$200
     8 8200 00 40 00 00 00 00 +              ins 'assets/5dots.fnt' +0,+$200,$100
     9 8300 00 18 24 42 42 24 +              ins 'assets/5dots_thin.fnt' +0,+$300,$100
    10 				             
    11 				             
    12 				             
    13 8400			charset_scroll
    14 8400 00 00 00 00 00 00 +              ins 'assets/bzzz2.fnt'
    15
    16
    17 				            
    18 				;*************************************  PMG FONTS
    19
    20 				;*************** GAME OVER
    21
    22 8800 3C			GO_G        .by %00111100
    23 8801 7E			            .by %01111110
    24 8802 E7			            .by %11100111
    25 8803 C3			            .by %11000011
    26 8804 C0			            .by %11000000
    27 8805 DF			            .by %11011111
    28 8806 DF			            .by %11011111
    29 8807 C3			            .by %11000011
    30 8808 C3			            .by %11000011
    31 8809 E7			            .by %11100111
    32 880A 7E			            .by %01111110
    33 880B 3C			            .by %00111100
    34
    35 880C F8			GO_D        .by %11111000
    36 880D FC			            .by %11111100
    37 880E C7			            .by %11000111
    38 880F C3			            .by %11000011
    39 8810 C3			            .by %11000011
    40 8811 C3			            .by %11000011
    41 8812 C3			            .by %11000011
    42 8813 C3			            .by %11000011
    43 8814 C3			            .by %11000011
    44 8815 C7			            .by %11000111
    45 8816 FC			            .by %11111100
    46 8817 F0			            .by %11110000
    47
    48 8818 3C			GO_A        .by %00111100
    49 8819 7E			            .by %01111110
    50 881A E7			            .by %11100111
    51 881B C3			            .by %11000011
    52 881C C3			            .by %11000011
    53 881D FF			            .by %11111111
    54 881E FF			            .by %11111111
    55 881F C3			            .by %11000011
    56 8820 C3			            .by %11000011
    57 8821 C3			            .by %11000011
    58 8822 C3			            .by %11000011
    59 8823 C3			            .by %11000011
    60
    61 8824 C3			GO_M        .by %11000011
    62 8825 E7			            .by %11100111
    63 8826 FF			            .by %11111111
    64 8827 FF			            .by %11111111
    65 8828 DB			            .by %11011011
    66 8829 C3			            .by %11000011
    67 882A C3			            .by %11000011
    68 882B C3			            .by %11000011
    69 882C C3			            .by %11000011
    70 882D C3			            .by %11000011
    71 882E C3			            .by %11000011
    72 882F C3			            .by %11000011
    73
    74 8830 C3			GO_W        .by %11000011
    75 8831 C3			            .by %11000011
    76 8832 C3			            .by %11000011
    77 8833 C3			            .by %11000011
    78 8834 C3			            .by %11000011
    79 8835 C3			            .by %11000011
    80 8836 C3			            .by %11000011
    81 8837 DB			            .by %11011011
    82 8838 FF			            .by %11111111
    83 8839 FF			            .by %11111111
    84 883A E7			            .by %11100111
    85 883B C3			            .by %11000011
    86
    87 883C C3			GO_N        .by %11000011
    88 883D C3			            .by %11000011
    89 883E E3			            .by %11100011
    90 883F F3			            .by %11110011
    91 8840 FB			            .by %11111011
    92 8841 FF			            .by %11111111
    93 8842 DF			            .by %11011111
    94 8843 CF			            .by %11001111
    95 8844 C7			            .by %11000111
    96 8845 C3			            .by %11000011
    97 8846 C3			            .by %11000011
    98 8847 C3			            .by %11000011
    99
   100 8848 FF			GO_E        .by %11111111
   101 8849 FF			            .by %11111111
   102 884A C0			            .by %11000000
   103 884B C0			            .by %11000000
   104 884C C0			            .by %11000000
   105 884D FF			            .by %11111111
   106 884E FF			            .by %11111111
   107 884F C0			            .by %11000000
   108 8850 C0			            .by %11000000
   109 8851 C0			            .by %11000000
   110 8852 FF			            .by %11111111
   111 8853 FF			            .by %11111111
   112
   113 8854 C0			GO_L        .by %11000000
   114 8855 C0			            .by %11000000
   115 8856 C0			            .by %11000000
   116 8857 C0			            .by %11000000
   117 8858 C0			            .by %11000000
   118 8859 C0			            .by %11000000
   119 885A C0			            .by %11000000
   120 885B C0			            .by %11000000
   121 885C C0			            .by %11000000
   122 885D C0			            .by %11000000
   123 885E FF			            .by %11111111
   124 885F FF			            .by %11111111
   125
   126 8860 3C			GO_O        .by %00111100
   127 8861 7E			            .by %01111110
   128 8862 E7			            .by %11100111
   129 8863 C3			            .by %11000011
   130 8864 C3			            .by %11000011
   131 8865 C3			            .by %11000011
   132 8866 C3			            .by %11000011
   133 8867 C3			            .by %11000011
   134 8868 C3			            .by %11000011
   135 8869 E7			            .by %11100111
   136 886A 7E			            .by %01111110
   137 886B 3C			            .by %00111100
   138
   139 886C C3			GO_V        .by %11000011
   140 886D C3			            .by %11000011
   141 886E C3			            .by %11000011
   142 886F C3			            .by %11000011
   143 8870 C3			            .by %11000011
   144 8871 C3			            .by %11000011
   145 8872 C3			            .by %11000011
   146 8873 C3			            .by %11000011
   147 8874 E7			            .by %11100111
   148 8875 7E			            .by %01111110
   149 8876 3C			            .by %00111100
   150 8877 18			            .by %00011000
   151
   152 8878 FC			GO_R        .by %11111100
   153 8879 FE			            .by %11111110
   154 887A C3			            .by %11000011
   155 887B C3			            .by %11000011
   156 887C C3			            .by %11000011
   157 887D FE			            .by %11111110
   158 887E FC			            .by %11111100
   159 887F C6			            .by %11000110
   160 8880 C3			            .by %11000011
   161 8881 C3			            .by %11000011
   162 8882 C3			            .by %11000011
   163 8883 C3			            .by %11000011
   164
   165
   166
   167 8884			padlock 	
   168 8884 00 00 00 00 00 00 + 			:64 dta %00000000
   169 88C4 00 00 00 00 00 00 + 			:16 dta %00000000
   170
   171 88D4 07						dta %00000111	
   172 88D5 0F						dta %00001111	
   173 88D6 1F						dta %00011111	
   174 88D7 3C						dta %00111100	
   175 88D8 38						dta %00111000	
   176 88D9 70						dta %01110000	
   177 88DA 70						dta %01110000	
   178 88DB 60						dta %01100000
   179
   180 88DC 60						dta %01100000
   181 88DD 60						dta %01100000
   182 88DE 60						dta %01100000
   183 88DF 60						dta %01100000
   184 88E0 60						dta %01100000
   185 88E1 60						dta %01100000
   186 88E2 60						dta %01100000
   187 88E3 FF						dta %11111111
   188
   189 88E4 FF						dta %11111111
   190 88E5 FF						dta %11111111
   191 88E6 FE						dta %11111110
   192 88E7 FC						dta %11111100
   193 88E8 FC						dta %11111100
   194 88E9 FC						dta %11111100
   195 88EA FE						dta %11111110
   196 88EB FE						dta %11111110
   197 							
   198 88EC FC						dta %11111100
   199 88ED FC						dta %11111100
   200 88EE FC						dta %11111100
   201 88EF FC						dta %11111100
   202 88F0 FC						dta %11111100
   203 88F1 FF						dta %11111111
   204 88F2 FF						dta %11111111
   205 88F3 FF						dta %11111111
   206
   207 88F4 00 00 00 00 00 00 + 			:16 dta %00000000
   208
   209 8904 00 00 00 00 00 00 + 			:16 dta %00000000
   210
   211 8914 E0						dta %11100000
   212 8915 F0						dta %11110000
   213 8916 F8						dta %11111000
   214 8917 3C						dta %00111100
   215 8918 1C						dta %00011100
   216 8919 0E						dta %00001110
   217 891A 0E						dta %00001110
   218 891B 06						dta %00000110
   219
   220 891C 06						dta %00000110
   221 891D 06						dta %00000110
   222 891E 06						dta %00000110
   223 891F 06						dta %00000110
   224 8920 06						dta %00000110
   225 8921 06						dta %00000110
   226 8922 06						dta %00000110
   227 8923 FF						dta %11111111
   228
   229 8924 FF						dta %11111111
   230 8925 FF						dta %11111111
   231 8926 7F						dta %01111111
   232 8927 3F						dta %00111111
   233 8928 3F						dta %00111111
   234 8929 3F						dta %00111111
   235 892A 7F						dta %01111111
   236 892B 7F						dta %01111111
   237 							
   238 892C 3F						dta %00111111
   239 892D 3F						dta %00111111
   240 892E 3F						dta %00111111
   241 892F 3F						dta %00111111
   242 8930 3F						dta %00111111
   243 8931 FF						dta %11111111
   244 8932 FF						dta %11111111
   245 8933 FF						dta %11111111
   246
   247 8934 00 00 00 00 00 00 + 			:16 dta %00000000
   248
   249 8944 00 00 00 00 00 00 + 			:64 dta %00000000
   250 				            
  1409
  1410 8984			 icl 'io.asm'
Source: D:\!Delphi\mads\examples\games\5dots\io.asm
     1 8984 44 3A 47 41 4D 45 + fname       dta c'D:GAMEDATA.SAV',$9b
     2 = 00D4			SAVE_SIZE   equ 212
     3
     4 8993			.array fbuffer [SAVE_SIZE+6] .byte = $FF
     5 				.enda
     6 8A6D DA 00		flength     dta a(.sizeof fbuffer)
     7
     8 8A6F 65 72 72 6F 72 1A + error_label dta d'error:       '
     9
    10 = 0001			IO_CHANNEL  equ 1
    11
    12
    13 8A7C 00			io_command  .by 0
    14 8A7D 00			io_status   .by 0
    15 8A7E 01			io_ready    .by 1       ; should contain 1 when last read or write operation was successful
    16 8A7F 08			io_rw       .by $08     ; io open type 04 read , 08 write 
    17 8A80 00			crc_1       .by 0
    18 8A81 00			crc_2       .by 0
    19 8A82 00			crc_ok      .by 0
    20
    21
    22 8A83			dataLoad
    23 8A83 A9 04 8D 7F 8A	        mva #$04 io_rw
    24 8A88 20 74 8B		        jsr fopen
    25 8A8B 20 AE 8B		        jsr fread
    26 8A8E 20 99 8B		        jsr fclose
    27 8A91 AD 7D 8A		        lda io_status
    28 8A94 F0 04		        beq @+
    29 8A96 20 B2 8A		        jsr dataSave
    30 8A99 60			        rts
    31
    32 8A9A 20 14 8B		@       jsr validatebuffer   
    33 8A9D AD 82 8A		        lda crc_ok
    34 8AA0 D0 04		        bne @+        
    35 8AA2 20 B2 8A		        jsr dataSave
    36 8AA5 60			        rts
    37
    38 8AA6 20 66 8B		@       jsr setsavedata
    39 8AA9 60			        rts        
    40
    41 8AAA			safeSave 
    42 8AAA AD 7E 8A		        lda io_ready
    43 8AAD C9 01		        cmp #1
    44 8AAF F0 01		        beq dataSave
    45 8AB1 60			        rts
    46 8AB2			dataSave
    47 8AB2 A9 08 8D 7F 8A	        mva #$08 io_rw
    48 8AB7 20 C4 8A		        jsr fillbuffer
    49 8ABA 20 74 8B		        jsr fopen
    50 8ABD 20 E1 8B		        jsr fwrite
    51 8AC0 20 99 8B		        jsr fclose
    52 8AC3 60			        rts        
    53
    54
    55 8AC4			fillbuffer                  ; prepare data to save (encode and store CRC checksums) 
    56 8AC4 A9 00 8D 6B 8A	        mva #0 fbuffer+SAVE_SIZE+4
    57 8AC9 A9 00 8D 6C 8A	        mva #0 fbuffer+SAVE_SIZE+5
    58 8ACE AD 0A D2 8D 93 89	        mva random fbuffer
    59 8AD4 AD 0A D2 8D 94 89	        mva random fbuffer+1
    60 8ADA AD 0A D2 8D 95 89	        mva random fbuffer+2
    61 8AE0 AD 0A D2 8D 96 89	        mva random fbuffer+3
    62 8AE6 A2 00		        ldx #0
    63 8AE8 A0 00		        ldy #0
    64 8AEA BD 07 2E		@       lda savedata,x 
    65 8AED 4D 6B 8A		        eor fbuffer+SAVE_SIZE+4
    66 8AF0 8D 6B 8A		        sta fbuffer+SAVE_SIZE+4
    67 8AF3 BD 07 2E		        lda savedata,x
    68 8AF6 18 6D 6C 8A		        add fbuffer+SAVE_SIZE+5
    69 8AFA 8D 6C 8A		        sta fbuffer+SAVE_SIZE+5
    70 8AFD 8A			        txa
    71 8AFE 59 93 89		        eor fbuffer,y
    72 8B01 5D 07 2E		        eor savedata,x       
    73 8B04 9D 97 89		        sta fbuffer+4,x
    74 8B07 C8			        iny 
    75 8B08 C0 04		        cpy #4 
    76 8B0A D0 02		        bne @+
    77 8B0C A0 00		        ldy #0
    78 8B0E E8			@       inx
    79 8B0F E0 D4		        cpx #SAVE_SIZE
    80 8B11 D0 D7		        bne @-1
    81 8B13 60			        rts
    82 				       
    83 8B14			validatebuffer          ; validation result is stored in crc_ok :  1 - OK ; 0 - KO  
    84 8B14 A9 00 8D 80 8A	        mva #0 crc_1
    85 8B19 A9 00 8D 81 8A	        mva #0 crc_2
    86 8B1E A9 01 8D 82 8A	        mva #1 crc_ok
    87 8B23 A2 00		        ldx #0
    88 8B25 A0 00		        ldy #0
    89 8B27 8A			@       txa
    90 8B28 59 93 89		        eor fbuffer,y
    91 8B2B 5D 97 89		        eor fbuffer+4,x       
    92 8B2E 9D 97 89		        sta fbuffer+4,x
    93 8B31 4D 80 8A		        eor crc_1
    94 8B34 8D 80 8A		        sta crc_1
    95 8B37 BD 97 89		        lda fbuffer+4,x
    96 8B3A 18 6D 81 8A		        add crc_2
    97 8B3E 8D 81 8A		        sta crc_2
    98 8B41 C8			        iny 
    99 8B42 C0 04		        cpy #4 
   100 8B44 D0 02		        bne @+
   101 8B46 A0 00		        ldy #0
   102 8B48 E8			@       inx
   103 8B49 E0 D4		        cpx #SAVE_SIZE
   104 8B4B D0 DA		        bne @-1
   105 8B4D AD 80 8A		        lda crc_1
   106 8B50 CD 6B 8A		        cmp fbuffer+SAVE_SIZE+4
   107 8B53 D0 0B		        bne crc_fail
   108 8B55 AD 81 8A		        lda crc_2
   109 8B58 CD 6C 8A		        cmp fbuffer+SAVE_SIZE+5
   110 8B5B D0 03		        bne crc_fail
   111 8B5D 4C 65 8B		        jmp crc_exit
   112 8B60			crc_fail
   113 8B60 A9 00 8D 82 8A	        mva #0 crc_ok
   114 8B65			crc_exit        
   115 8B65 60			        rts
   116
   117 8B66			setsavedata             ; move valid data from save file to memory          
   118 8B66 A2 00		        ldx #0
   119 8B68 BD 97 89 9D 07 2E	@       mva fbuffer+4,x savedata,x    
   120 8B6E E8			        inx    
   121 8B6F E0 D4		        cpx #SAVE_SIZE
   122 8B71 D0 F5		        bne @-
   123 8B73 60			        rts
   124 				        
   125
   126 				*--------
   127 				*- OPEN
   128 				*--------
   129 8B74			fopen 
   130 				     
   131 8B74 A2 10		         ldx #IO_CHANNEL*16     ; channel number
   132 8B76 A9 00 8D 7D 8A	         mva #0 io_status
   133 				         ;mva #0 iocb+1,x       ; device num 
   134 8B7B A9 03 8D 7C 8A	         mva #$03 io_command    ; OPEN
   135 8B80 9D 42 03		         sta iocb+2,x 
   136 8B83 AD 7F 8A 9D 4A 03	         mva io_rw iocb+10,x    ; 4 read / 8 write 
   137 8B89 A9 84 9D 44 03 A9 +          mwa #fname iocb+4,x   
   138 				        
   139 8B93 20 56 E4		         jsr ciov     
   140 8B96 30 7C		         bmi ferror   
   141 8B98 60			         rts
   142
   143
   144 				*---------
   145 				*- CLOSE
   146 				*---------
   147 8B99			fclose 
   148
   149 8B99 A2 10		         ldx #IO_CHANNEL*16     ; channel number
   150 8B9B A9 00 8D 7D 8A	         mva #0 io_status
   151 8BA0 A9 0C 8D 7C 8A	         mva #$0c io_command    ; close
   152 8BA5 9D 42 03		         sta iocb+2,x 
   153 				        
   154 8BA8 20 56 E4		         jsr ciov           
   155 8BAB 30 67		         bmi ferror         
   156 8BAD 60			         rts               
   157
   158 				*--------
   159 				*- READ
   160 				*--------
   161 8BAE			fread 
   162
   163 8BAE A2 10		         ldx #IO_CHANNEL*16     ; channel number
   164 8BB0 A9 00 8D 7D 8A	         mva #0 io_status
   165 8BB5 8D 7E 8A		         sta io_ready
   166 8BB8 A9 07 8D 7C 8A	         mva #$07 io_command    ; read
   167 8BBD 9D 42 03		         sta iocb+2,x 
   168 8BC0 A9 93 9D 44 03 A9 +          mwa #fbuffer iocb+4,x
   169 8BCA AD 6D 8A 9D 48 03 +          mwa flength iocb+8,x
   170 				        
   171 8BD6 20 56 E4		         jsr ciov           
   172 8BD9 30 39		         bmi ferror
   173 8BDB A9 01 8D 7E 8A	         mva #1 io_ready
   174 8BE0 60			         rts
   175
   176 				*---------
   177 				*- WRITE
   178 				*---------
   179 8BE1			fwrite 
   180
   181 8BE1 A2 10		         ldx #IO_CHANNEL*16     ; channel number
   182 8BE3 A9 00 8D 7D 8A	         mva #0 io_status
   183 8BE8 8D 7E 8A		         sta io_ready
   184 8BEB A9 0B 8D 7C 8A	         mva #$0b io_command    ; write
   185 8BF0 9D 42 03		         sta iocb+2,x 
   186 8BF3 A9 93 9D 44 03 A9 +          mwa #fbuffer iocb+4,x
   187 8BFD AD 6D 8A 9D 48 03 +          mwa flength iocb+8,x
   188 				        
   189 8C09 20 56 E4		         jsr ciov           
   190 8C0C 30 06		         bmi ferror
   191 8C0E A9 01 8D 7E 8A	         mva #1 io_ready
   192 8C13 60			         rts
   193
   194
   195 8C14			ferror      
   196 8C14 A2 10		        ldx #IO_CHANNEL*16     ; channel number
   197 8C16 BD 43 03 8D 7D 8A	        mva iocb+3,x io_status
   198
   199 				.ifdef     debug_mode          ; print io error info on title screen
   200 				        ldx #0
   201 				@       lda error_label,x
   202 				        sta vram_title+(56*40+13*40+20),x
   203 				        inx
   204 				        cpx #10
   205 				        bne @-
   206 				        mwa #[56*40+13*40+30] dest
   207 				        adw dest #vram_title dest
   208 				        lda io_command 
   209 				        jsr printNum
   210
   211 				        mwa #[56*40+13*40+35] dest
   212 				        adw dest #vram_title dest
   213 				        lda io_status 
   214 				        jsr printNum
   215 				.endif        
   216 8C1C 60			        rts     
  1411
  1412 02E0-02E1> DB 2E		            run main
  1413
